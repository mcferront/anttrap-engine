; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26730.0 

	TITLE	e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	__length_code
PUBLIC	__dist_code
__length_code DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
__dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
_static_dtree DW 00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
_extra_blbits DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
	ORG $+4
_extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	ORG $+4
_base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
_base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
	ORG $+4
_extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
_static_ltree DW 0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
_bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
PUBLIC	__tr_align
PUBLIC	__tr_init
PUBLIC	__tr_flush_block
PUBLIC	__tr_stored_block
_static_d_desc DD FLAT:_static_dtree
	DD	FLAT:_extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
_static_bl_desc DD 00H
	DD	FLAT:_extra_blbits
	DD	00H
	DD	013H
	DD	07H
_static_l_desc DD FLAT:_static_ltree
	DD	FLAT:_extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
_DATA	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT __tr_stored_block
_TEXT	SEGMENT
_buf$1$ = -4						; size = 4
_stored_len$ = 8					; size = 4
_last$ = 12						; size = 4
__tr_stored_block PROC					; COMDAT
; _s$ = ecx
; _buf$ = edx

; 876  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	89 55 fc	 mov	 DWORD PTR _buf$1$[ebp], edx

; 877  :     send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */

  0000b	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  00011	0f b7 9f b8 16
	00 00		 movzx	 ebx, WORD PTR [edi+5816]
  00018	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  0001b	7e 4d		 jle	 SHORT $LN2@tr_stored_
  0001d	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00020	56		 push	 esi
  00021	8b 75 0c	 mov	 esi, DWORD PTR _last$[ebp]
  00024	66 8b d6	 mov	 dx, si
  00027	66 d3 e2	 shl	 dx, cl
  0002a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002d	66 0b d3	 or	 dx, bx
  00030	66 89 97 b8 16
	00 00		 mov	 WORD PTR [edi+5816], dx
  00037	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0003a	ff 47 14	 inc	 DWORD PTR [edi+20]
  0003d	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00040	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00043	8a 87 b9 16 00
	00		 mov	 al, BYTE PTR [edi+5817]
  00049	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0004c	b1 10		 mov	 cl, 16			; 00000010H
  0004e	0f b7 87 bc 16
	00 00		 movzx	 eax, WORD PTR [edi+5820]
  00055	ff 47 14	 inc	 DWORD PTR [edi+20]
  00058	2a c8		 sub	 cl, al
  0005a	83 87 bc 16 00
	00 f3		 add	 DWORD PTR [edi+5820], -13 ; fffffff3H
  00061	66 d3 ee	 shr	 si, cl
  00064	0f b7 c6	 movzx	 eax, si
  00067	5e		 pop	 esi
  00068	eb 16		 jmp	 SHORT $LN3@tr_stored_
$LN2@tr_stored_:
  0006a	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0006d	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  00073	66 8b 45 0c	 mov	 ax, WORD PTR _last$[ebp]
  00077	66 d3 e0	 shl	 ax, cl
  0007a	66 0b c3	 or	 ax, bx
  0007d	0f b7 c0	 movzx	 eax, ax
$LN3@tr_stored_:

; 878  : #ifdef DEBUG
; 879  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 880  :     s->compressed_len += (stored_len + 4) << 3;
; 881  : #endif
; 882  :     copy_block(s, buf, (unsigned)stored_len, 1); /* with header */

  00080	8b 55 fc	 mov	 edx, DWORD PTR _buf$1$[ebp]
  00083	51		 push	 ecx
  00084	ff 75 08	 push	 DWORD PTR _stored_len$[ebp]
  00087	8b cf		 mov	 ecx, edi
  00089	66 89 87 b8 16
	00 00		 mov	 WORD PTR [edi+5816], ax
  00090	e8 00 00 00 00	 call	 _copy_block
  00095	83 c4 08	 add	 esp, 8
  00098	5f		 pop	 edi
  00099	5b		 pop	 ebx

; 883  : }

  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
__tr_stored_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT __tr_flush_block
_TEXT	SEGMENT
_buf$1$ = -8						; size = 4
_max_blindex$1$ = -4					; size = 4
_stored_len$ = 8					; size = 4
_last$ = 12						; size = 4
__tr_flush_block PROC					; COMDAT
; _s$ = ecx
; _buf$ = edx

; 930  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 931  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 932  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */

  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _max_blindex$1$[ebp], 0
  00012	8b da		 mov	 ebx, edx
  00014	89 5d f8	 mov	 DWORD PTR _buf$1$[ebp], ebx

; 933  : 
; 934  :     /* Build the Huffman trees unless a stored block is forced */
; 935  :     if (s->level > 0) {

  00017	83 bf 84 00 00
	00 00		 cmp	 DWORD PTR [edi+132], 0
  0001e	7e 58		 jle	 SHORT $LN2@tr_flush_b

; 936  : 
; 937  :         /* Check if the file is binary or text */
; 938  :         if (s->strm->data_type == Z_UNKNOWN)

  00020	8b 37		 mov	 esi, DWORD PTR [edi]
  00022	83 7e 2c 02	 cmp	 DWORD PTR [esi+44], 2
  00026	75 08		 jne	 SHORT $LN4@tr_flush_b

; 939  :             s->strm->data_type = detect_data_type(s);

  00028	e8 00 00 00 00	 call	 _detect_data_type
  0002d	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$LN4@tr_flush_b:

; 940  : 
; 941  :         /* Construct the literal and distance trees */
; 942  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  00030	8d 97 18 0b 00
	00		 lea	 edx, DWORD PTR [edi+2840]
  00036	8b cf		 mov	 ecx, edi
  00038	e8 00 00 00 00	 call	 _build_tree

; 943  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 944  :                 s->static_len));
; 945  : 
; 946  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  0003d	8d 97 24 0b 00
	00		 lea	 edx, DWORD PTR [edi+2852]
  00043	8b cf		 mov	 ecx, edi
  00045	e8 00 00 00 00	 call	 _build_tree

; 947  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 948  :                 s->static_len));
; 949  :         /* At this point, opt_len and static_len are the total bit lengths of
; 950  :          * the compressed block data, excluding the tree representations.
; 951  :          */
; 952  : 
; 953  :         /* Build the bit length tree for the above two trees, and get the index
; 954  :          * in bl_order of the last bit length code to send.
; 955  :          */
; 956  :         max_blindex = build_bl_tree(s);

  0004a	8b cf		 mov	 ecx, edi
  0004c	e8 00 00 00 00	 call	 _build_bl_tree

; 957  : 
; 958  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 959  :         opt_lenb = (s->opt_len+3+7)>>3;

  00051	8b 8f a8 16 00
	00		 mov	 ecx, DWORD PTR [edi+5800]

; 960  :         static_lenb = (s->static_len+3+7)>>3;

  00057	8b 97 ac 16 00
	00		 mov	 edx, DWORD PTR [edi+5804]
  0005d	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00060	83 c2 0a	 add	 edx, 10			; 0000000aH
  00063	c1 e9 03	 shr	 ecx, 3
  00066	c1 ea 03	 shr	 edx, 3

; 961  : 
; 962  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 963  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 964  :                 s->last_lit));
; 965  : 
; 966  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
; 967  : 
; 968  :     } else {

  00069	3b d1		 cmp	 edx, ecx
  0006b	89 45 fc	 mov	 DWORD PTR _max_blindex$1$[ebp], eax
  0006e	8b f2		 mov	 esi, edx
  00070	0f 47 f1	 cmova	 esi, ecx
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _stored_len$[ebp]
  00076	eb 08		 jmp	 SHORT $LN3@tr_flush_b
$LN2@tr_flush_b:

; 969  :         Assert(buf != (char*)0, "lost buf");
; 970  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  00078	8b 4d 08	 mov	 ecx, DWORD PTR _stored_len$[ebp]
  0007b	8d 51 05	 lea	 edx, DWORD PTR [ecx+5]
  0007e	8b f2		 mov	 esi, edx
$LN3@tr_flush_b:

; 971  :     }
; 972  : 
; 973  : #ifdef FORCE_STORED
; 974  :     if (buf != (char*)0) { /* force stored block */
; 975  : #else
; 976  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

  00080	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00083	3b c6		 cmp	 eax, esi
  00085	77 1b		 ja	 SHORT $LN6@tr_flush_b
  00087	85 db		 test	 ebx, ebx
  00089	74 17		 je	 SHORT $LN6@tr_flush_b

; 977  :                        /* 4: two words for the lengths */
; 978  : #endif
; 979  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 980  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 981  :          * the last block flush, because compression would have been
; 982  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 983  :          * transform a block into a stored block.
; 984  :          */
; 985  :         _tr_stored_block(s, buf, stored_len, last);

  0008b	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  0008e	8b 55 f8	 mov	 edx, DWORD PTR _buf$1$[ebp]
  00091	53		 push	 ebx
  00092	51		 push	 ecx
  00093	8b cf		 mov	 ecx, edi
  00095	e8 00 00 00 00	 call	 __tr_stored_block
  0009a	83 c4 08	 add	 esp, 8
  0009d	e9 66 01 00 00	 jmp	 $LN9@tr_flush_b
$LN6@tr_flush_b:

; 986  : 
; 987  : #ifdef FORCE_STATIC
; 988  :     } else if (static_lenb >= 0) { /* force static trees */
; 989  : #else
; 990  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

  000a2	83 bf 88 00 00
	00 04		 cmp	 DWORD PTR [edi+136], 4
  000a9	0f 84 c2 00 00
	00		 je	 $LN10@tr_flush_b
  000af	3b d6		 cmp	 edx, esi
  000b1	0f 84 ba 00 00
	00		 je	 $LN10@tr_flush_b

; 994  : #ifdef DEBUG
; 995  :         s->compressed_len += 3 + s->static_len;
; 996  : #endif
; 997  :     } else {
; 998  :         send_bits(s, (DYN_TREES<<1)+last, 3);

  000b7	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  000bd	0f b7 87 b8 16
	00 00		 movzx	 eax, WORD PTR [edi+5816]
  000c4	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  000c7	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  000ca	7e 4b		 jle	 SHORT $LN13@tr_flush_b
  000cc	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  000cf	66 8b d6	 mov	 dx, si
  000d2	66 d3 e2	 shl	 dx, cl
  000d5	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  000d8	66 0b d0	 or	 dx, ax
  000db	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000de	66 89 97 b8 16
	00 00		 mov	 WORD PTR [edi+5816], dx
  000e5	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000e8	ff 47 14	 inc	 DWORD PTR [edi+20]
  000eb	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000ee	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000f1	8a 87 b9 16 00
	00		 mov	 al, BYTE PTR [edi+5817]
  000f7	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000fa	b1 10		 mov	 cl, 16			; 00000010H
  000fc	0f b7 87 bc 16
	00 00		 movzx	 eax, WORD PTR [edi+5820]
  00103	ff 47 14	 inc	 DWORD PTR [edi+20]
  00106	2a c8		 sub	 cl, al
  00108	83 87 bc 16 00
	00 f3		 add	 DWORD PTR [edi+5820], -13 ; fffffff3H
  0010f	66 d3 ee	 shr	 si, cl
  00112	0f b7 c6	 movzx	 eax, si
  00115	eb 1c		 jmp	 SHORT $LN14@tr_flush_b
$LN13@tr_flush_b:
  00117	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0011a	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  00120	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00123	66 d3 e0	 shl	 ax, cl
  00126	0f b7 8f b8 16
	00 00		 movzx	 ecx, WORD PTR [edi+5816]
  0012d	66 0b c1	 or	 ax, cx
  00130	0f b7 c0	 movzx	 eax, ax
$LN14@tr_flush_b:

; 999  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,

  00133	66 89 87 b8 16
	00 00		 mov	 WORD PTR [edi+5816], ax
  0013a	8b cf		 mov	 ecx, edi
  0013c	8b 45 fc	 mov	 eax, DWORD PTR _max_blindex$1$[ebp]
  0013f	8b 97 1c 0b 00
	00		 mov	 edx, DWORD PTR [edi+2844]
  00145	40		 inc	 eax
  00146	50		 push	 eax
  00147	8b 87 28 0b 00
	00		 mov	 eax, DWORD PTR [edi+2856]
  0014d	42		 inc	 edx
  0014e	40		 inc	 eax
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 _send_all_trees

; 1000 :                        max_blindex+1);
; 1001 :         compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);

  00155	8d 87 88 09 00
	00		 lea	 eax, DWORD PTR [edi+2440]
  0015b	8b cf		 mov	 ecx, edi
  0015d	50		 push	 eax
  0015e	8d 97 94 00 00
	00		 lea	 edx, DWORD PTR [edi+148]
  00164	e8 00 00 00 00	 call	 _compress_block
  00169	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016c	e9 97 00 00 00	 jmp	 $LN9@tr_flush_b
$LN10@tr_flush_b:

; 991  : #endif
; 992  :         send_bits(s, (STATIC_TREES<<1)+last, 3);

  00171	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  00177	0f b7 87 b8 16
	00 00		 movzx	 eax, WORD PTR [edi+5816]
  0017e	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  00181	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  00184	7e 4b		 jle	 SHORT $LN11@tr_flush_b
  00186	8d 73 02	 lea	 esi, DWORD PTR [ebx+2]
  00189	66 8b d6	 mov	 dx, si
  0018c	66 d3 e2	 shl	 dx, cl
  0018f	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00192	66 0b d0	 or	 dx, ax
  00195	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00198	66 89 97 b8 16
	00 00		 mov	 WORD PTR [edi+5816], dx
  0019f	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001a2	ff 47 14	 inc	 DWORD PTR [edi+20]
  001a5	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  001a8	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  001ab	8a 87 b9 16 00
	00		 mov	 al, BYTE PTR [edi+5817]
  001b1	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001b4	b1 10		 mov	 cl, 16			; 00000010H
  001b6	0f b7 87 bc 16
	00 00		 movzx	 eax, WORD PTR [edi+5820]
  001bd	ff 47 14	 inc	 DWORD PTR [edi+20]
  001c0	2a c8		 sub	 cl, al
  001c2	83 87 bc 16 00
	00 f3		 add	 DWORD PTR [edi+5820], -13 ; fffffff3H
  001c9	66 d3 ee	 shr	 si, cl
  001cc	0f b7 c6	 movzx	 eax, si
  001cf	eb 1c		 jmp	 SHORT $LN12@tr_flush_b
$LN11@tr_flush_b:
  001d1	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  001d4	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  001da	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  001dd	66 d3 e0	 shl	 ax, cl
  001e0	0f b7 8f b8 16
	00 00		 movzx	 ecx, WORD PTR [edi+5816]
  001e7	66 0b c1	 or	 ax, cx
  001ea	0f b7 c0	 movzx	 eax, ax
$LN12@tr_flush_b:

; 993  :         compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);

  001ed	68 00 00 00 00	 push	 OFFSET _static_dtree
  001f2	ba 00 00 00 00	 mov	 edx, OFFSET _static_ltree
  001f7	66 89 87 b8 16
	00 00		 mov	 WORD PTR [edi+5816], ax
  001fe	8b cf		 mov	 ecx, edi
  00200	e8 00 00 00 00	 call	 _compress_block
  00205	83 c4 04	 add	 esp, 4
$LN9@tr_flush_b:

; 1002 : #ifdef DEBUG
; 1003 :         s->compressed_len += 3 + s->opt_len;
; 1004 : #endif
; 1005 :     }
; 1006 :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 1007 :     /* The above check is made mod 2^32, for files larger than 512 MB
; 1008 :      * and uLong implemented on 32 bits.
; 1009 :      */
; 1010 :     init_block(s);

  00208	8b cf		 mov	 ecx, edi
  0020a	e8 00 00 00 00	 call	 _init_block

; 1011 : 
; 1012 :     if (last) {

  0020f	85 db		 test	 ebx, ebx
  00211	74 05		 je	 SHORT $LN15@tr_flush_b

; 1013 :         bi_windup(s);

  00213	e8 00 00 00 00	 call	 _bi_windup
$LN15@tr_flush_b:
  00218	5f		 pop	 edi

; 1014 : #ifdef DEBUG
; 1015 :         s->compressed_len += 7;  /* align on byte boundary */
; 1016 : #endif
; 1017 :     }
; 1018 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
; 1019 :            s->compressed_len-7*last));
; 1020 : }

  00219	5e		 pop	 esi
  0021a	5b		 pop	 ebx
  0021b	8b e5		 mov	 esp, ebp
  0021d	5d		 pop	 ebp
  0021e	c3		 ret	 0
__tr_flush_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT __tr_init
_TEXT	SEGMENT
__tr_init PROC						; COMDAT
; _s$ = ecx

; 389  :     tr_static_init();
; 390  : 
; 391  :     s->l_desc.dyn_tree = s->dyn_ltree;

  00000	8d 81 94 00 00
	00		 lea	 eax, DWORD PTR [ecx+148]

; 392  :     s->l_desc.stat_desc = &static_l_desc;

  00006	c7 81 20 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2848], OFFSET _static_l_desc
  00010	89 81 18 0b 00
	00		 mov	 DWORD PTR [ecx+2840], eax

; 393  : 
; 394  :     s->d_desc.dyn_tree = s->dyn_dtree;

  00016	8d 81 88 09 00
	00		 lea	 eax, DWORD PTR [ecx+2440]
  0001c	89 81 24 0b 00
	00		 mov	 DWORD PTR [ecx+2852], eax

; 395  :     s->d_desc.stat_desc = &static_d_desc;
; 396  : 
; 397  :     s->bl_desc.dyn_tree = s->bl_tree;

  00022	8d 81 7c 0a 00
	00		 lea	 eax, DWORD PTR [ecx+2684]
  00028	89 81 30 0b 00
	00		 mov	 DWORD PTR [ecx+2864], eax

; 398  :     s->bl_desc.stat_desc = &static_bl_desc;
; 399  : 
; 400  :     s->bi_buf = 0;

  0002e	33 c0		 xor	 eax, eax
  00030	c7 81 2c 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2860], OFFSET _static_d_desc
  0003a	c7 81 38 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2872], OFFSET _static_bl_desc
  00044	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 401  :     s->bi_valid = 0;

  0004b	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax

; 402  :     s->last_eob_len = 8; /* enough lookahead for inflate */

  00051	c7 81 b4 16 00
	00 08 00 00 00	 mov	 DWORD PTR [ecx+5812], 8

; 403  : #ifdef DEBUG
; 404  :     s->compressed_len = 0L;
; 405  :     s->bits_sent = 0L;
; 406  : #endif
; 407  : 
; 408  :     /* Initialize the first block of the first file: */
; 409  :     init_block(s);

  0005b	e9 00 00 00 00	 jmp	 _init_block
__tr_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT __tr_align
_TEXT	SEGMENT
__tr_align PROC						; COMDAT
; _s$ = ecx

; 898  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 899  :     send_bits(s, STATIC_TREES<<1, 3);

  00004	bf 02 00 00 00	 mov	 edi, 2
  00009	8b c7		 mov	 eax, edi
  0000b	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  00011	66 d3 e0	 shl	 ax, cl
  00014	66 0b 86 b8 16
	00 00		 or	 ax, WORD PTR [esi+5816]
  0001b	0f b7 d0	 movzx	 edx, ax
  0001e	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  00021	7e 41		 jle	 SHORT $LN2@tr_align
  00023	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00026	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00029	66 89 96 b8 16
	00 00		 mov	 WORD PTR [esi+5816], dx
  00030	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00033	ff 46 14	 inc	 DWORD PTR [esi+20]
  00036	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00039	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0003c	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  00042	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00045	b1 10		 mov	 cl, 16			; 00000010H
  00047	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  0004e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00051	2a c8		 sub	 cl, al
  00053	83 86 bc 16 00
	00 f3		 add	 DWORD PTR [esi+5820], -13 ; fffffff3H
  0005a	8b c7		 mov	 eax, edi
  0005c	66 d3 e8	 shr	 ax, cl
  0005f	0f b7 c0	 movzx	 eax, ax
  00062	eb 0b		 jmp	 SHORT $LN3@tr_align
$LN2@tr_align:
  00064	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  00067	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  0006d	8b c2		 mov	 eax, edx
$LN3@tr_align:

; 900  :     send_code(s, END_BLOCK, static_ltree);

  0006f	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  00076	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  0007c	0f b7 96 b8 16
	00 00		 movzx	 edx, WORD PTR [esi+5816]
  00083	83 f8 09	 cmp	 eax, 9
  00086	7e 29		 jle	 SHORT $LN4@tr_align
  00088	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0008b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0008e	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00091	ff 46 14	 inc	 DWORD PTR [esi+20]
  00094	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00097	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0009a	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  000a0	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000a3	ff 46 14	 inc	 DWORD PTR [esi+20]
  000a6	83 86 bc 16 00
	00 f7		 add	 DWORD PTR [esi+5820], -9 ; fffffff7H
  000ad	33 c0		 xor	 eax, eax
  000af	eb 0b		 jmp	 SHORT $LN5@tr_align
$LN4@tr_align:
  000b1	83 c0 07	 add	 eax, 7
  000b4	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  000ba	8b c2		 mov	 eax, edx
$LN5@tr_align:

; 901  : #ifdef DEBUG
; 902  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 903  : #endif
; 904  :     bi_flush(s);

  000bc	8b ce		 mov	 ecx, esi
  000be	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  000c5	e8 00 00 00 00	 call	 _bi_flush

; 905  :     /* Of the 10 bits for the empty block, we have already sent
; 906  :      * (10 - bi_valid) bits. The lookahead for the last real code (before
; 907  :      * the EOB of the previous block) was thus at least one plus the length
; 908  :      * of the EOB plus what we have just sent of the empty static block.
; 909  :      */
; 910  :     if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {

  000ca	8b 86 b4 16 00
	00		 mov	 eax, DWORD PTR [esi+5812]
  000d0	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  000d6	2b c1		 sub	 eax, ecx
  000d8	83 c0 0b	 add	 eax, 11			; 0000000bH
  000db	83 f8 09	 cmp	 eax, 9
  000de	0f 8d b9 00 00
	00		 jge	 $LN12@tr_align

; 911  :         send_bits(s, STATIC_TREES<<1, 3);

  000e4	8b c7		 mov	 eax, edi
  000e6	66 d3 e0	 shl	 ax, cl
  000e9	66 0b 86 b8 16
	00 00		 or	 ax, WORD PTR [esi+5816]
  000f0	0f b7 d0	 movzx	 edx, ax
  000f3	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  000f6	7e 3f		 jle	 SHORT $LN7@tr_align
  000f8	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000fb	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000fe	66 89 96 b8 16
	00 00		 mov	 WORD PTR [esi+5816], dx
  00105	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00108	ff 46 14	 inc	 DWORD PTR [esi+20]
  0010b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0010e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00111	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  00117	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0011a	b1 10		 mov	 cl, 16			; 00000010H
  0011c	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  00123	ff 46 14	 inc	 DWORD PTR [esi+20]
  00126	2a c8		 sub	 cl, al
  00128	83 86 bc 16 00
	00 f3		 add	 DWORD PTR [esi+5820], -13 ; fffffff3H
  0012f	66 d3 ef	 shr	 di, cl
  00132	0f b7 c7	 movzx	 eax, di
  00135	eb 0b		 jmp	 SHORT $LN8@tr_align
$LN7@tr_align:
  00137	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0013a	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  00140	8b c2		 mov	 eax, edx
$LN8@tr_align:

; 912  :         send_code(s, END_BLOCK, static_ltree);

  00142	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  00149	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  0014f	0f b7 96 b8 16
	00 00		 movzx	 edx, WORD PTR [esi+5816]
  00156	83 f8 09	 cmp	 eax, 9
  00159	7e 29		 jle	 SHORT $LN9@tr_align
  0015b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0015e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00161	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00164	ff 46 14	 inc	 DWORD PTR [esi+20]
  00167	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0016a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0016d	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  00173	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00176	ff 46 14	 inc	 DWORD PTR [esi+20]
  00179	83 86 bc 16 00
	00 f7		 add	 DWORD PTR [esi+5820], -9 ; fffffff7H
  00180	33 c0		 xor	 eax, eax
  00182	eb 0b		 jmp	 SHORT $LN10@tr_align
$LN9@tr_align:
  00184	83 c0 07	 add	 eax, 7
  00187	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  0018d	8b c2		 mov	 eax, edx
$LN10@tr_align:

; 913  : #ifdef DEBUG
; 914  :         s->compressed_len += 10L;
; 915  : #endif
; 916  :         bi_flush(s);

  0018f	8b ce		 mov	 ecx, esi
  00191	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  00198	e8 00 00 00 00	 call	 _bi_flush
$LN12@tr_align:

; 917  :     }
; 918  :     s->last_eob_len = 7;
; 919  : }

  0019d	5f		 pop	 edi
  0019e	c7 86 b4 16 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+5812], 7
  001a8	5e		 pop	 esi
  001a9	c3		 ret	 0
__tr_align ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _tr_static_init
_TEXT	SEGMENT
_tr_static_init PROC					; COMDAT

; 241  : #if defined(GEN_TREES_H) || !defined(STDC)
; 242  :     static int static_init_done = 0;
; 243  :     int n;        /* iterates over tree elements */
; 244  :     int bits;     /* bit counter */
; 245  :     int length;   /* length value */
; 246  :     int code;     /* code value */
; 247  :     int dist;     /* distance index */
; 248  :     ush bl_count[MAX_BITS+1];
; 249  :     /* number of codes at each bit length for an optimal tree */
; 250  : 
; 251  :     if (static_init_done) return;
; 252  : 
; 253  :     /* For some embedded targets, global variables are not initialized: */
; 254  : #ifdef NO_INIT_GLOBAL_POINTERS
; 255  :     static_l_desc.static_tree = static_ltree;
; 256  :     static_l_desc.extra_bits = extra_lbits;
; 257  :     static_d_desc.static_tree = static_dtree;
; 258  :     static_d_desc.extra_bits = extra_dbits;
; 259  :     static_bl_desc.extra_bits = extra_blbits;
; 260  : #endif
; 261  : 
; 262  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 263  :     length = 0;
; 264  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 265  :         base_length[code] = length;
; 266  :         for (n = 0; n < (1<<extra_lbits[code]); n++) {
; 267  :             _length_code[length++] = (uch)code;
; 268  :         }
; 269  :     }
; 270  :     Assert (length == 256, "tr_static_init: length != 256");
; 271  :     /* Note that the length 255 (match length 258) can be represented
; 272  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 273  :      * overwrite length_code[255] to use the best encoding:
; 274  :      */
; 275  :     _length_code[length-1] = (uch)code;
; 276  : 
; 277  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 278  :     dist = 0;
; 279  :     for (code = 0 ; code < 16; code++) {
; 280  :         base_dist[code] = dist;
; 281  :         for (n = 0; n < (1<<extra_dbits[code]); n++) {
; 282  :             _dist_code[dist++] = (uch)code;
; 283  :         }
; 284  :     }
; 285  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 286  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 287  :     for ( ; code < D_CODES; code++) {
; 288  :         base_dist[code] = dist << 7;
; 289  :         for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
; 290  :             _dist_code[256 + dist++] = (uch)code;
; 291  :         }
; 292  :     }
; 293  :     Assert (dist == 256, "tr_static_init: 256+dist != 512");
; 294  : 
; 295  :     /* Construct the codes of the static literal tree */
; 296  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 297  :     n = 0;
; 298  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 299  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 300  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 301  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 302  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 303  :      * tree construction to get a canonical Huffman tree (longest code
; 304  :      * all ones)
; 305  :      */
; 306  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 307  : 
; 308  :     /* The static distance tree is trivial: */
; 309  :     for (n = 0; n < D_CODES; n++) {
; 310  :         static_dtree[n].Len = 5;
; 311  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 312  :     }
; 313  :     static_init_done = 1;
; 314  : 
; 315  : #  ifdef GEN_TREES_H
; 316  :     gen_trees_header();
; 317  : #  endif
; 318  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 319  : }

  00000	c3		 ret	 0
_tr_static_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _init_block
_TEXT	SEGMENT
_init_block PROC					; COMDAT
; _s$ = ecx

; 418  :     int n; /* iterates over tree elements */
; 419  : 
; 420  :     /* Initialize the trees. */
; 421  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00000	8d 81 94 00 00
	00		 lea	 eax, DWORD PTR [ecx+148]
  00006	ba 1e 01 00 00	 mov	 edx, 286		; 0000011eH
  0000b	56		 push	 esi
  0000c	0f 1f 40 00	 npad	 4
$LL4@init_block:
  00010	33 f6		 xor	 esi, esi
  00012	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00015	66 89 70 fc	 mov	 WORD PTR [eax-4], si
  00019	83 ea 01	 sub	 edx, 1
  0001c	75 f2		 jne	 SHORT $LL4@init_block

; 422  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  0001e	8d 81 88 09 00
	00		 lea	 eax, DWORD PTR [ecx+2440]
  00024	ba 1e 00 00 00	 mov	 edx, 30			; 0000001eH
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@init_block:
  00030	33 f6		 xor	 esi, esi
  00032	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00035	66 89 70 fc	 mov	 WORD PTR [eax-4], si
  00039	83 ea 01	 sub	 edx, 1
  0003c	75 f2		 jne	 SHORT $LL7@init_block

; 423  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

  0003e	8d 81 7c 0a 00
	00		 lea	 eax, DWORD PTR [ecx+2684]
  00044	ba 13 00 00 00	 mov	 edx, 19			; 00000013H
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@init_block:
  00050	33 f6		 xor	 esi, esi
  00052	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00055	66 89 70 fc	 mov	 WORD PTR [eax-4], si
  00059	83 ea 01	 sub	 edx, 1
  0005c	75 f2		 jne	 SHORT $LL10@init_block

; 424  : 
; 425  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  0005e	b8 01 00 00 00	 mov	 eax, 1

; 426  :     s->opt_len = s->static_len = 0L;

  00063	89 b1 ac 16 00
	00		 mov	 DWORD PTR [ecx+5804], esi
  00069	89 b1 a8 16 00
	00		 mov	 DWORD PTR [ecx+5800], esi

; 427  :     s->last_lit = s->matches = 0;

  0006f	89 b1 b0 16 00
	00		 mov	 DWORD PTR [ecx+5808], esi
  00075	89 b1 a0 16 00
	00		 mov	 DWORD PTR [ecx+5792], esi
  0007b	66 89 81 94 04
	00 00		 mov	 WORD PTR [ecx+1172], ax
  00082	5e		 pop	 esi

; 428  : }

  00083	c3		 ret	 0
_init_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _pqdownheap
_TEXT	SEGMENT
tv397 = -8						; size = 4
_tree$1$ = -4						; size = 4
_v$1$ = 8						; size = 4
_k$ = 8							; size = 4
_pqdownheap PROC					; COMDAT
; _s$ = ecx
; _tree$ = edx

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 464  :     int v = s->heap[k];

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _k$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 55 fc	 mov	 DWORD PTR _tree$1$[ebp], edx
  00010	57		 push	 edi

; 465  :     int j = k << 1;  /* left son of k */

  00011	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]

; 466  :     while (j <= s->heap_len) {

  00014	8b 8e 50 14 00
	00		 mov	 ecx, DWORD PTR [esi+5200]
  0001a	8b bc 9e 5c 0b
	00 00		 mov	 edi, DWORD PTR [esi+ebx*4+2908]
  00021	89 7d 08	 mov	 DWORD PTR _v$1$[ebp], edi
  00024	3b c1		 cmp	 eax, ecx
  00026	0f 8f 91 00 00
	00		 jg	 $LN16@pqdownheap
  0002c	8d 14 ba	 lea	 edx, DWORD PTR [edx+edi*4]
  0002f	89 55 f8	 mov	 DWORD PTR tv397[ebp], edx
$LN19@pqdownheap:

; 467  :         /* Set j to the smallest of the two sons: */
; 468  :         if (j < s->heap_len &&

  00032	7d 42		 jge	 SHORT $LN4@pqdownheap
  00034	8b bc 86 60 0b
	00 00		 mov	 edi, DWORD PTR [esi+eax*4+2912]
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  0003e	8b 94 86 5c 0b
	00 00		 mov	 edx, DWORD PTR [esi+eax*4+2908]
  00045	0f b7 0c b9	 movzx	 ecx, WORD PTR [ecx+edi*4]
  00049	8b 7d fc	 mov	 edi, DWORD PTR _tree$1$[ebp]
  0004c	0f b7 14 97	 movzx	 edx, WORD PTR [edi+edx*4]
  00050	8b bc 86 60 0b
	00 00		 mov	 edi, DWORD PTR [esi+eax*4+2912]
  00057	66 3b ca	 cmp	 cx, dx
  0005a	72 19		 jb	 SHORT $LN5@pqdownheap
  0005c	75 18		 jne	 SHORT $LN4@pqdownheap
  0005e	8b 94 86 5c 0b
	00 00		 mov	 edx, DWORD PTR [esi+eax*4+2908]
  00065	8a 8c 3e 58 14
	00 00		 mov	 cl, BYTE PTR [esi+edi+5208]
  0006c	3a 8c 16 58 14
	00 00		 cmp	 cl, BYTE PTR [esi+edx+5208]
  00073	77 01		 ja	 SHORT $LN4@pqdownheap
$LN5@pqdownheap:

; 469  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
; 470  :             j++;

  00075	40		 inc	 eax
$LN4@pqdownheap:

; 471  :         }
; 472  :         /* Exit if v is smaller than both sons */
; 473  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  00076	8b 94 86 5c 0b
	00 00		 mov	 edx, DWORD PTR [esi+eax*4+2908]
  0007d	8b 4d f8	 mov	 ecx, DWORD PTR tv397[ebp]
  00080	8b 7d fc	 mov	 edi, DWORD PTR _tree$1$[ebp]
  00083	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00086	0f b7 3c 97	 movzx	 edi, WORD PTR [edi+edx*4]
  0008a	66 3b cf	 cmp	 cx, di
  0008d	72 3c		 jb	 SHORT $LN15@pqdownheap
  0008f	8b 7d 08	 mov	 edi, DWORD PTR _v$1$[ebp]
  00092	75 10		 jne	 SHORT $LN6@pqdownheap
  00094	8a 8c 37 58 14
	00 00		 mov	 cl, BYTE PTR [edi+esi+5208]
  0009b	3a 8c 32 58 14
	00 00		 cmp	 cl, BYTE PTR [edx+esi+5208]
  000a2	76 19		 jbe	 SHORT $LN16@pqdownheap
$LN6@pqdownheap:

; 474  : 
; 475  :         /* Exchange v with the smallest son */
; 476  :         s->heap[k] = s->heap[j];  k = j;

  000a4	89 94 9e 5c 0b
	00 00		 mov	 DWORD PTR [esi+ebx*4+2908], edx
  000ab	8b d8		 mov	 ebx, eax
  000ad	8b 8e 50 14 00
	00		 mov	 ecx, DWORD PTR [esi+5200]

; 477  : 
; 478  :         /* And continue down the tree, setting j to the left son of k */
; 479  :         j <<= 1;

  000b3	03 c0		 add	 eax, eax
  000b5	3b c1		 cmp	 eax, ecx
  000b7	0f 8e 75 ff ff
	ff		 jle	 $LN19@pqdownheap
$LN16@pqdownheap:

; 482  : }

  000bd	89 bc 9e 5c 0b
	00 00		 mov	 DWORD PTR [esi+ebx*4+2908], edi
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c3		 ret	 0
$LN15@pqdownheap:

; 480  :     }
; 481  :     s->heap[k] = v;

  000cb	8b 45 08	 mov	 eax, DWORD PTR _v$1$[ebp]
  000ce	5f		 pop	 edi
  000cf	89 84 9e 5c 0b
	00 00		 mov	 DWORD PTR [esi+ebx*4+2908], eax

; 482  : }

  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
_pqdownheap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _gen_bitlen
_TEXT	SEGMENT
tv860 = -52						; size = 4
tv851 = -52						; size = 4
_stree$1$ = -48						; size = 4
_extra$1$ = -44						; size = 4
tv863 = -40						; size = 4
tv866 = -36						; size = 4
_h$2$ = -36						; size = 4
tv839 = -32						; size = 4
tv835 = -32						; size = 4
tv859 = -28						; size = 4
_base$1$ = -24						; size = 4
_max_code$1$ = -20					; size = 4
_s$1$ = -16						; size = 4
_overflow$2$ = -12					; size = 4
_bits$2$ = -8						; size = 4
_tree$1$ = -4						; size = 4
_gen_bitlen PROC					; COMDAT
; _s$ = ecx
; _desc$ = edx

; 497  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 498  :     ct_data *tree        = desc->dyn_tree;
; 499  :     int max_code         = desc->max_code;

  00006	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	89 45 ec	 mov	 DWORD PTR _max_code$1$[ebp], eax

; 500  :     const ct_data *stree = desc->stat_desc->static_tree;

  0000f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00012	53		 push	 ebx
  00013	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00015	56		 push	 esi
  00016	8b 10		 mov	 edx, DWORD PTR [eax]

; 501  :     const intf *extra    = desc->stat_desc->extra_bits;
; 502  :     int base             = desc->stat_desc->extra_base;
; 503  :     int max_length       = desc->stat_desc->max_length;

  00018	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  0001b	89 55 d0	 mov	 DWORD PTR _stree$1$[ebp], edx
  0001e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00021	89 55 d4	 mov	 DWORD PTR _extra$1$[ebp], edx
  00024	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00027	0f 11 81 3c 0b
	00 00		 movups	 XMMWORD PTR [ecx+2876], xmm0
  0002e	89 55 e8	 mov	 DWORD PTR _base$1$[ebp], edx

; 504  :     int h;              /* heap index */
; 505  :     int n, m;           /* iterate over the tree elements */
; 506  :     int bits;           /* bit length */
; 507  :     int xbits;          /* extra bits */
; 508  :     ush f;              /* frequency */
; 509  :     int overflow = 0;   /* number of elements with bit length too large */
; 510  : 
; 511  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;
; 512  : 
; 513  :     /* In a first pass, compute the optimal bit lengths (which may
; 514  :      * overflow in the case of the bit length tree).
; 515  :      */
; 516  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  00031	33 d2		 xor	 edx, edx
  00033	0f 11 81 4c 0b
	00 00		 movups	 XMMWORD PTR [ecx+2892], xmm0
  0003a	8b 81 54 14 00
	00		 mov	 eax, DWORD PTR [ecx+5204]
  00040	89 5d fc	 mov	 DWORD PTR _tree$1$[ebp], ebx
  00043	57		 push	 edi
  00044	33 ff		 xor	 edi, edi
  00046	89 4d f0	 mov	 DWORD PTR _s$1$[ebp], ecx
  00049	8b 84 81 5c 0b
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+2908]
  00050	89 75 f8	 mov	 DWORD PTR _bits$2$[ebp], esi
  00053	66 89 54 83 02	 mov	 WORD PTR [ebx+eax*4+2], dx

; 517  : 
; 518  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  00058	8b 99 54 14 00
	00		 mov	 ebx, DWORD PTR [ecx+5204]
  0005e	43		 inc	 ebx
  0005f	81 fb 3d 02 00
	00		 cmp	 ebx, 573		; 0000023dH
  00065	0f 8d 96 01 00
	00		 jge	 $LN14@gen_bitlen

; 504  :     int h;              /* heap index */
; 505  :     int n, m;           /* iterate over the tree elements */
; 506  :     int bits;           /* bit length */
; 507  :     int xbits;          /* extra bits */
; 508  :     ush f;              /* frequency */
; 509  :     int overflow = 0;   /* number of elements with bit length too large */
; 510  : 
; 511  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;
; 512  : 
; 513  :     /* In a first pass, compute the optimal bit lengths (which may
; 514  :      * overflow in the case of the bit length tree).
; 515  :      */
; 516  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  0006b	8d 91 5c 0b 00
	00		 lea	 edx, DWORD PTR [ecx+2908]
  00071	b8 3d 02 00 00	 mov	 eax, 573		; 0000023dH
  00076	8d 14 9a	 lea	 edx, DWORD PTR [edx+ebx*4]
  00079	2b c3		 sub	 eax, ebx
  0007b	8b 5d ec	 mov	 ebx, DWORD PTR _max_code$1$[ebp]
  0007e	89 55 e0	 mov	 DWORD PTR tv839[ebp], edx
  00081	89 45 dc	 mov	 DWORD PTR tv866[ebp], eax
$LL7@gen_bitlen:

; 519  :         n = s->heap[h];

  00084	8b 12		 mov	 edx, DWORD PTR [edx]

; 520  :         bits = tree[tree[n].Dad].Len + 1;

  00086	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  00089	8d 04 95 00 00
	00 00		 lea	 eax, DWORD PTR [edx*4]
  00090	89 45 cc	 mov	 DWORD PTR tv860[ebp], eax
  00093	03 c1		 add	 eax, ecx
  00095	89 45 e4	 mov	 DWORD PTR tv859[ebp], eax
  00098	0f b7 40 02	 movzx	 eax, WORD PTR [eax+2]
  0009c	0f b7 4c 81 02	 movzx	 ecx, WORD PTR [ecx+eax*4+2]

; 521  :         if (bits > max_length) bits = max_length, overflow++;
; 522  :         tree[n].Len = (ush)bits;

  000a1	8b c6		 mov	 eax, esi
  000a3	41		 inc	 ecx
  000a4	3b ce		 cmp	 ecx, esi
  000a6	0f 4e c1	 cmovle	 eax, ecx
  000a9	8b 4d e4	 mov	 ecx, DWORD PTR tv859[ebp]
  000ac	89 45 d8	 mov	 DWORD PTR tv863[ebp], eax
  000af	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  000b2	0f 4e c7	 cmovle	 eax, edi
  000b5	8b f8		 mov	 edi, eax
  000b7	8b 45 d8	 mov	 eax, DWORD PTR tv863[ebp]
  000ba	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 523  :         /* We overwrite tree[n].Dad which is no longer needed */
; 524  : 
; 525  :         if (n > max_code) continue; /* not a leaf node */

  000be	8b 4d f0	 mov	 ecx, DWORD PTR _s$1$[ebp]
  000c1	89 7d f4	 mov	 DWORD PTR _overflow$2$[ebp], edi
  000c4	3b d3		 cmp	 edx, ebx
  000c6	7f 49		 jg	 SHORT $LN5@gen_bitlen

; 526  : 
; 527  :         s->bl_count[bits]++;

  000c8	66 ff 84 41 3c
	0b 00 00	 inc	 WORD PTR [ecx+eax*2+2876]

; 528  :         xbits = 0;

  000d0	33 ff		 xor	 edi, edi

; 529  :         if (n >= base) xbits = extra[n-base];

  000d2	3b 55 e8	 cmp	 edx, DWORD PTR _base$1$[ebp]
  000d5	7c 09		 jl	 SHORT $LN20@gen_bitlen
  000d7	2b 55 e8	 sub	 edx, DWORD PTR _base$1$[ebp]
  000da	8b 7d d4	 mov	 edi, DWORD PTR _extra$1$[ebp]
  000dd	8b 3c 97	 mov	 edi, DWORD PTR [edi+edx*4]
$LN20@gen_bitlen:

; 530  :         f = tree[n].Freq;
; 531  :         s->opt_len += (ulg)f * (bits + xbits);

  000e0	8b 55 e4	 mov	 edx, DWORD PTR tv859[ebp]
  000e3	03 c7		 add	 eax, edi
  000e5	0f b7 12	 movzx	 edx, WORD PTR [edx]
  000e8	0f af c2	 imul	 eax, edx
  000eb	01 81 a8 16 00
	00		 add	 DWORD PTR [ecx+5800], eax

; 532  :         if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);

  000f1	8b 45 d0	 mov	 eax, DWORD PTR _stree$1$[ebp]
  000f4	85 c0		 test	 eax, eax
  000f6	74 16		 je	 SHORT $LN51@gen_bitlen
  000f8	8b 75 cc	 mov	 esi, DWORD PTR tv860[ebp]
  000fb	0f b7 44 06 02	 movzx	 eax, WORD PTR [esi+eax+2]
  00100	8b 75 f8	 mov	 esi, DWORD PTR _bits$2$[ebp]
  00103	03 c7		 add	 eax, edi
  00105	0f af c2	 imul	 eax, edx
  00108	01 81 ac 16 00
	00		 add	 DWORD PTR [ecx+5804], eax
$LN51@gen_bitlen:

; 517  : 
; 518  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  0010e	8b 7d f4	 mov	 edi, DWORD PTR _overflow$2$[ebp]
$LN5@gen_bitlen:
  00111	8b 55 e0	 mov	 edx, DWORD PTR tv839[ebp]
  00114	83 c2 04	 add	 edx, 4
  00117	83 6d dc 01	 sub	 DWORD PTR tv866[ebp], 1
  0011b	89 55 e0	 mov	 DWORD PTR tv839[ebp], edx
  0011e	0f 85 60 ff ff
	ff		 jne	 $LL7@gen_bitlen

; 533  :     }
; 534  :     if (overflow == 0) return;

  00124	85 ff		 test	 edi, edi
  00126	0f 84 d5 00 00
	00		 je	 $LN14@gen_bitlen
  0012c	8b 5d f4	 mov	 ebx, DWORD PTR _overflow$2$[ebp]
  0012f	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00132	81 c6 9e 05 00
	00		 add	 esi, 1438		; 0000059eH
  00138	89 45 cc	 mov	 DWORD PTR tv851[ebp], eax
  0013b	8d 3c 71	 lea	 edi, DWORD PTR [ecx+esi*2]
  0013e	8b f0		 mov	 esi, eax
  00140	89 7d e0	 mov	 DWORD PTR tv835[ebp], edi
$LL10@gen_bitlen:

; 535  : 
; 536  :     Trace((stderr,"\nbit length overflow\n"));
; 537  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 538  : 
; 539  :     /* Find the first bit length which could increase: */
; 540  :     do {
; 541  :         bits = max_length-1;

  00143	8b d6		 mov	 edx, esi

; 542  :         while (s->bl_count[bits] == 0) bits--;

  00145	8d 82 9e 05 00
	00		 lea	 eax, DWORD PTR [edx+1438]
  0014b	66 83 3c 41 00	 cmp	 WORD PTR [ecx+eax*2], 0
  00150	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00153	75 0a		 jne	 SHORT $LN12@gen_bitlen
$LL11@gen_bitlen:
  00155	8d 40 fe	 lea	 eax, DWORD PTR [eax-2]
  00158	4a		 dec	 edx
  00159	66 83 38 00	 cmp	 WORD PTR [eax], 0
  0015d	74 f6		 je	 SHORT $LL11@gen_bitlen
$LN12@gen_bitlen:

; 543  :         s->bl_count[bits]--;      /* move one leaf down the tree */
; 544  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */

  0015f	66 83 84 51 3e
	0b 00 00 02	 add	 WORD PTR [ecx+edx*2+2878], 2
  00168	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0016d	66 01 84 51 3c
	0b 00 00	 add	 WORD PTR [ecx+edx*2+2876], ax

; 545  :         s->bl_count[max_length]--;
; 546  :         /* The brother of the overflow item also moves one step up,
; 547  :          * but this does not affect bl_count[max_length]
; 548  :          */
; 549  :         overflow -= 2;

  00175	83 eb 02	 sub	 ebx, 2
  00178	66 01 07	 add	 WORD PTR [edi], ax

; 550  :     } while (overflow > 0);

  0017b	85 db		 test	 ebx, ebx
  0017d	7f c4		 jg	 SHORT $LL10@gen_bitlen

; 551  : 
; 552  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 553  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 554  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 555  :      * from 'ar' written by Haruhiko Okumura.)
; 556  :      */
; 557  :     for (bits = max_length; bits != 0; bits--) {

  0017f	8b 75 f8	 mov	 esi, DWORD PTR _bits$2$[ebp]
  00182	bb 3d 02 00 00	 mov	 ebx, 573		; 0000023dH
  00187	85 f6		 test	 esi, esi
  00189	74 76		 je	 SHORT $LN14@gen_bitlen
  0018b	0f 1f 44 00 00	 npad	 5
$LL15@gen_bitlen:

; 558  :         n = s->bl_count[bits];

  00190	0f b7 07	 movzx	 eax, WORD PTR [edi]

; 559  :         while (n != 0) {

  00193	85 c0		 test	 eax, eax
  00195	74 5c		 je	 SHORT $LN13@gen_bitlen

; 558  :         n = s->bl_count[bits];

  00197	8b 55 ec	 mov	 edx, DWORD PTR _max_code$1$[ebp]
  0019a	8d bb d7 02 00
	00		 lea	 edi, DWORD PTR [ebx+727]
  001a0	8d 3c b9	 lea	 edi, DWORD PTR [ecx+edi*4]
$LL16@gen_bitlen:

; 560  :             m = s->heap[--h];

  001a3	4b		 dec	 ebx
  001a4	8d 7f fc	 lea	 edi, DWORD PTR [edi-4]
  001a7	89 5d dc	 mov	 DWORD PTR _h$2$[ebp], ebx
  001aa	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 561  :             if (m > max_code) continue;

  001ac	3b da		 cmp	 ebx, edx
  001ae	7f 39		 jg	 SHORT $LN36@gen_bitlen

; 562  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  001b0	8b 55 fc	 mov	 edx, DWORD PTR _tree$1$[ebp]
  001b3	0f b7 54 9a 02	 movzx	 edx, WORD PTR [edx+ebx*4+2]
  001b8	3b d6		 cmp	 edx, esi
  001ba	74 29		 je	 SHORT $LN24@gen_bitlen

; 563  :                 Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 564  :                 s->opt_len += ((long)bits - (long)tree[m].Len)

  001bc	8b d6		 mov	 edx, esi
  001be	8b 75 fc	 mov	 esi, DWORD PTR _tree$1$[ebp]
  001c1	0f b7 4c 9e 02	 movzx	 ecx, WORD PTR [esi+ebx*4+2]
  001c6	2b d1		 sub	 edx, ecx
  001c8	8b ce		 mov	 ecx, esi

; 565  :                               *(long)tree[m].Freq;
; 566  :                 tree[m].Len = (ush)bits;

  001ca	8b 75 f8	 mov	 esi, DWORD PTR _bits$2$[ebp]
  001cd	0f b7 0c 99	 movzx	 ecx, WORD PTR [ecx+ebx*4]
  001d1	0f af d1	 imul	 edx, ecx
  001d4	8b 4d f0	 mov	 ecx, DWORD PTR _s$1$[ebp]
  001d7	01 91 a8 16 00
	00		 add	 DWORD PTR [ecx+5800], edx
  001dd	8b 55 fc	 mov	 edx, DWORD PTR _tree$1$[ebp]
  001e0	66 89 74 9a 02	 mov	 WORD PTR [edx+ebx*4+2], si
$LN24@gen_bitlen:

; 567  :             }
; 568  :             n--;

  001e5	8b 55 ec	 mov	 edx, DWORD PTR _max_code$1$[ebp]
  001e8	48		 dec	 eax
$LN36@gen_bitlen:

; 559  :         while (n != 0) {

  001e9	8b 5d dc	 mov	 ebx, DWORD PTR _h$2$[ebp]
  001ec	85 c0		 test	 eax, eax
  001ee	75 b3		 jne	 SHORT $LL16@gen_bitlen
  001f0	8b 7d e0	 mov	 edi, DWORD PTR tv835[ebp]
$LN13@gen_bitlen:

; 551  : 
; 552  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 553  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 554  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 555  :      * from 'ar' written by Haruhiko Okumura.)
; 556  :      */
; 557  :     for (bits = max_length; bits != 0; bits--) {

  001f3	4e		 dec	 esi
  001f4	83 ef 02	 sub	 edi, 2
  001f7	89 75 f8	 mov	 DWORD PTR _bits$2$[ebp], esi
  001fa	89 7d e0	 mov	 DWORD PTR tv835[ebp], edi
  001fd	85 f6		 test	 esi, esi
  001ff	75 8f		 jne	 SHORT $LL15@gen_bitlen
$LN14@gen_bitlen:
  00201	5f		 pop	 edi

; 569  :         }
; 570  :     }
; 571  : }

  00202	5e		 pop	 esi
  00203	5b		 pop	 ebx
  00204	8b e5		 mov	 esp, ebp
  00206	5d		 pop	 ebp
  00207	c3		 ret	 0
_gen_bitlen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _gen_codes
_TEXT	SEGMENT
_next_code$ = -36					; size = 32
_tree$1$ = -4						; size = 4
_bl_count$ = 8						; size = 4
_gen_codes PROC						; COMDAT
; _tree$ = ecx
; _max_code$ = edx

; 585  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b da		 mov	 ebx, edx
  0000a	89 4d fc	 mov	 DWORD PTR _tree$1$[ebp], ecx

; 586  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 587  :     ush code = 0;              /* running code value */

  0000d	8b 55 08	 mov	 edx, DWORD PTR _bl_count$[ebp]
  00010	8d 45 de	 lea	 eax, DWORD PTR _next_code$[ebp+2]
  00013	57		 push	 edi
  00014	33 ff		 xor	 edi, edi
  00016	be 01 00 00 00	 mov	 esi, 1
  0001b	2b d0		 sub	 edx, eax
  0001d	0f 1f 00	 npad	 3
$LL14@gen_codes:

; 588  :     int bits;                  /* bit index */
; 589  :     int n;                     /* code index */
; 590  : 
; 591  :     /* The distribution counts are first used to generate the code values
; 592  :      * without bit reversal.
; 593  :      */
; 594  :     for (bits = 1; bits <= MAX_BITS; bits++) {
; 595  :         next_code[bits] = code = (code + bl_count[bits-1]) << 1;

  00020	8d 04 72	 lea	 eax, DWORD PTR [edx+esi*2]
  00023	66 8b 44 05 dc	 mov	 ax, WORD PTR _next_code$[ebp+eax]
  00028	66 03 c7	 add	 ax, di
  0002b	66 03 c0	 add	 ax, ax
  0002e	0f b7 f8	 movzx	 edi, ax
  00031	66 89 7c 75 dc	 mov	 WORD PTR _next_code$[ebp+esi*2], di
  00036	46		 inc	 esi
  00037	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  0003a	7e e4		 jle	 SHORT $LL14@gen_codes

; 596  :     }
; 597  :     /* Check that the bit counts in bl_count are consistent. The last code
; 598  :      * must be all ones.
; 599  :      */
; 600  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 601  :             "inconsistent bit counts");
; 602  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 603  : 
; 604  :     for (n = 0;  n <= max_code; n++) {

  0003c	33 f6		 xor	 esi, esi
  0003e	85 db		 test	 ebx, ebx
  00040	78 27		 js	 SHORT $LN6@gen_codes
$LL7@gen_codes:

; 605  :         int len = tree[n].Len;

  00042	0f b7 54 b1 02	 movzx	 edx, WORD PTR [ecx+esi*4+2]

; 606  :         if (len == 0) continue;

  00047	85 d2		 test	 edx, edx
  00049	74 19		 je	 SHORT $LN5@gen_codes

; 607  :         /* Now reverse the bits */
; 608  :         tree[n].Code = bi_reverse(next_code[len]++, len);

  0004b	0f b7 4c 55 dc	 movzx	 ecx, WORD PTR _next_code$[ebp+edx*2]
  00050	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00053	66 89 44 55 dc	 mov	 WORD PTR _next_code$[ebp+edx*2], ax
  00058	e8 00 00 00 00	 call	 _bi_reverse
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  00060	66 89 04 b1	 mov	 WORD PTR [ecx+esi*4], ax
$LN5@gen_codes:

; 596  :     }
; 597  :     /* Check that the bit counts in bl_count are consistent. The last code
; 598  :      * must be all ones.
; 599  :      */
; 600  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 601  :             "inconsistent bit counts");
; 602  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 603  : 
; 604  :     for (n = 0;  n <= max_code; n++) {

  00064	46		 inc	 esi
  00065	3b f3		 cmp	 esi, ebx
  00067	7e d9		 jle	 SHORT $LL7@gen_codes
$LN6@gen_codes:
  00069	5f		 pop	 edi

; 609  : 
; 610  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 611  :              n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
; 612  :     }
; 613  : }

  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_gen_codes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _build_tree
_TEXT	SEGMENT
_desc$1$ = -20						; size = 4
_n$3$ = -16						; size = 4
_stree$1$ = -16						; size = 4
_max_code$1$ = -12					; size = 4
_tree$1$ = -8						; size = 4
_node$2$ = -4						; size = 4
_build_tree PROC					; COMDAT
; _s$ = ecx
; _desc$ = edx

; 626  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	8b c2		 mov	 eax, edx

; 627  :     ct_data *tree         = desc->dyn_tree;
; 628  :     const ct_data *stree  = desc->stat_desc->static_tree;
; 629  :     int elems             = desc->stat_desc->elems;
; 630  :     int n, m;          /* iterate over heap elements */
; 631  :     int max_code = -1; /* largest code with non zero frequency */

  00008	83 ca ff	 or	 edx, -1
  0000b	53		 push	 ebx
  0000c	89 45 ec	 mov	 DWORD PTR _desc$1$[ebp], eax
  0000f	56		 push	 esi
  00010	8b 18		 mov	 ebx, DWORD PTR [eax]
  00012	8b f1		 mov	 esi, ecx
  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00017	57		 push	 edi
  00018	33 ff		 xor	 edi, edi
  0001a	89 5d f8	 mov	 DWORD PTR _tree$1$[ebp], ebx
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00022	89 4d f0	 mov	 DWORD PTR _stree$1$[ebp], ecx
  00025	33 c9		 xor	 ecx, ecx
  00027	89 45 fc	 mov	 DWORD PTR _node$2$[ebp], eax

; 632  :     int node;          /* new node being created */
; 633  : 
; 634  :     /* Construct the initial heap, with least frequent element in
; 635  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 636  :      * heap[0] is not used.
; 637  :      */
; 638  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;

  0002a	c7 86 50 14 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5200], 0
  00034	c7 86 54 14 00
	00 3d 02 00 00	 mov	 DWORD PTR [esi+5204], 573 ; 0000023dH

; 639  : 
; 640  :     for (n = 0; n < elems; n++) {

  0003e	85 c0		 test	 eax, eax
  00040	7e 43		 jle	 SHORT $LL5@build_tree
$LL4@build_tree:

; 641  :         if (tree[n].Freq != 0) {

  00042	66 83 3c 8b 00	 cmp	 WORD PTR [ebx+ecx*4], 0
  00047	74 22		 je	 SHORT $LN13@build_tree

; 642  :             s->heap[++(s->heap_len)] = max_code = n;

  00049	ff 86 50 14 00
	00		 inc	 DWORD PTR [esi+5200]
  0004f	8b d1		 mov	 edx, ecx
  00051	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  00057	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx

; 643  :             s->depth[n] = 0;
; 644  :         } else {

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _node$2$[ebp]
  00061	c6 84 31 58 14
	00 00 00	 mov	 BYTE PTR [ecx+esi+5208], 0
  00069	eb 07		 jmp	 SHORT $LN2@build_tree
$LN13@build_tree:

; 645  :             tree[n].Len = 0;

  0006b	33 ff		 xor	 edi, edi
  0006d	66 89 7c 8b 02	 mov	 WORD PTR [ebx+ecx*4+2], di
$LN2@build_tree:

; 639  : 
; 640  :     for (n = 0; n < elems; n++) {

  00072	41		 inc	 ecx
  00073	3b c8		 cmp	 ecx, eax
  00075	7c cb		 jl	 SHORT $LL4@build_tree

; 646  :         }
; 647  :     }
; 648  : 
; 649  :     /* The pkzip format requires that at least one distance code exists,
; 650  :      * and that at least one bit should be sent even if there is only one
; 651  :      * possible code. So to avoid special checks later on we force at least
; 652  :      * two codes of non zero frequency.
; 653  :      */
; 654  :     while (s->heap_len < 2) {

  00077	8b be 50 14 00
	00		 mov	 edi, DWORD PTR [esi+5200]
  0007d	89 55 f4	 mov	 DWORD PTR _max_code$1$[ebp], edx
  00080	83 ff 02	 cmp	 edi, 2
  00083	7d 5a		 jge	 SHORT $LN6@build_tree
$LL5@build_tree:

; 655  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  00085	33 c0		 xor	 eax, eax
  00087	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  0008a	83 fa 02	 cmp	 edx, 2
  0008d	0f 4d c8	 cmovge	 ecx, eax
  00090	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00093	0f 4d c2	 cmovge	 eax, edx
  00096	8b d0		 mov	 edx, eax
  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0009b	89 86 50 14 00
	00		 mov	 DWORD PTR [esi+5200], eax
  000a1	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx

; 656  :         tree[node].Freq = 1;

  000a8	b8 01 00 00 00	 mov	 eax, 1
  000ad	66 89 04 8b	 mov	 WORD PTR [ebx+ecx*4], ax

; 657  :         s->depth[node] = 0;
; 658  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  000b1	8b 45 f0	 mov	 eax, DWORD PTR _stree$1$[ebp]
  000b4	c6 84 0e 58 14
	00 00 00	 mov	 BYTE PTR [esi+ecx+5208], 0
  000bc	ff 8e a8 16 00
	00		 dec	 DWORD PTR [esi+5800]
  000c2	85 c0		 test	 eax, eax
  000c4	74 0b		 je	 SHORT $LN15@build_tree
  000c6	0f b7 44 88 02	 movzx	 eax, WORD PTR [eax+ecx*4+2]
  000cb	29 86 ac 16 00
	00		 sub	 DWORD PTR [esi+5804], eax
$LN15@build_tree:

; 646  :         }
; 647  :     }
; 648  : 
; 649  :     /* The pkzip format requires that at least one distance code exists,
; 650  :      * and that at least one bit should be sent even if there is only one
; 651  :      * possible code. So to avoid special checks later on we force at least
; 652  :      * two codes of non zero frequency.
; 653  :      */
; 654  :     while (s->heap_len < 2) {

  000d1	8b be 50 14 00
	00		 mov	 edi, DWORD PTR [esi+5200]
  000d7	83 ff 02	 cmp	 edi, 2
  000da	7c a9		 jl	 SHORT $LL5@build_tree
  000dc	89 55 f4	 mov	 DWORD PTR _max_code$1$[ebp], edx
$LN6@build_tree:

; 659  :         /* node is 0 or 1 so it does not have extra bits */
; 660  :     }
; 661  :     desc->max_code = max_code;

  000df	8b 45 ec	 mov	 eax, DWORD PTR _desc$1$[ebp]
  000e2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 662  : 
; 663  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 664  :      * establish sub-heaps of increasing lengths:
; 665  :      */
; 666  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  000e5	8b 8e 50 14 00
	00		 mov	 ecx, DWORD PTR [esi+5200]
  000eb	8b c1		 mov	 eax, ecx
  000ed	99		 cdq
  000ee	2b c2		 sub	 eax, edx
  000f0	8b f8		 mov	 edi, eax
  000f2	d1 ff		 sar	 edi, 1
  000f4	83 ff 01	 cmp	 edi, 1
  000f7	7c 27		 jl	 SHORT $LL12@build_tree
  000f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@build_tree:
  00100	57		 push	 edi
  00101	8b d3		 mov	 edx, ebx
  00103	8b ce		 mov	 ecx, esi
  00105	e8 00 00 00 00	 call	 _pqdownheap
  0010a	4f		 dec	 edi
  0010b	83 c4 04	 add	 esp, 4
  0010e	83 ff 01	 cmp	 edi, 1
  00111	7d ed		 jge	 SHORT $LL9@build_tree
  00113	8b 8e 50 14 00
	00		 mov	 ecx, DWORD PTR [esi+5200]
  00119	0f 1f 80 00 00
	00 00		 npad	 7
$LL12@build_tree:

; 667  : 
; 668  :     /* Construct the Huffman tree by repeatedly combining the least two
; 669  :      * frequent nodes.
; 670  :      */
; 671  :     node = elems;              /* next internal node of the tree */
; 672  :     do {
; 673  :         pqremove(s, tree, n);  /* n = node of least frequency */

  00120	8b 9e 60 0b 00
	00		 mov	 ebx, DWORD PTR [esi+2912]
  00126	8b 84 8e 5c 0b
	00 00		 mov	 eax, DWORD PTR [esi+ecx*4+2908]
  0012d	8b ce		 mov	 ecx, esi
  0012f	8b 55 f8	 mov	 edx, DWORD PTR _tree$1$[ebp]
  00132	89 86 60 0b 00
	00		 mov	 DWORD PTR [esi+2912], eax
  00138	ff 8e 50 14 00
	00		 dec	 DWORD PTR [esi+5200]
  0013e	6a 01		 push	 1
  00140	89 5d f0	 mov	 DWORD PTR _n$3$[ebp], ebx
  00143	e8 00 00 00 00	 call	 _pqdownheap

; 674  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */

  00148	8b 8e 60 0b 00
	00		 mov	 ecx, DWORD PTR [esi+2912]

; 675  : 
; 676  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  0014e	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]
  00154	8b 86 54 14 00
	00		 mov	 eax, DWORD PTR [esi+5204]

; 677  :         s->heap[--(s->heap_max)] = m;
; 678  : 
; 679  :         /* Create a new node father of n and m */
; 680  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  0015a	8b 55 f8	 mov	 edx, DWORD PTR _tree$1$[ebp]
  0015d	8d 3c 8a	 lea	 edi, DWORD PTR [edx+ecx*4]

; 681  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
; 682  :                                 s->depth[n] : s->depth[m]) + 1);
; 683  :         tree[n].Dad = tree[m].Dad = (ush)node;
; 684  : #ifdef DUMP_BL_TREE
; 685  :         if (tree == s->bl_tree) {
; 686  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 687  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 688  :         }
; 689  : #endif
; 690  :         /* and insert the new node in the heap */
; 691  :         s->heap[SMALLEST] = node++;
; 692  :         pqdownheap(s, tree, SMALLEST);

  00160	6a 01		 push	 1
  00162	89 9c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ebx
  00169	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]
  0016f	8b 86 54 14 00
	00		 mov	 eax, DWORD PTR [esi+5204]
  00175	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx
  0017c	66 8b 07	 mov	 ax, WORD PTR [edi]
  0017f	66 03 04 9a	 add	 ax, WORD PTR [edx+ebx*4]
  00183	8b 5d fc	 mov	 ebx, DWORD PTR _node$2$[ebp]
  00186	66 89 04 9a	 mov	 WORD PTR [edx+ebx*4], ax
  0018a	8a 8c 0e 58 14
	00 00		 mov	 cl, BYTE PTR [esi+ecx+5208]
  00191	8b 5d f0	 mov	 ebx, DWORD PTR _n$3$[ebp]
  00194	0f b6 c1	 movzx	 eax, cl
  00197	8a 94 1e 58 14
	00 00		 mov	 dl, BYTE PTR [esi+ebx+5208]
  0019e	3a d1		 cmp	 dl, cl
  001a0	0f b6 da	 movzx	 ebx, dl
  001a3	8b 55 fc	 mov	 edx, DWORD PTR _node$2$[ebp]
  001a6	8b 4d f0	 mov	 ecx, DWORD PTR _n$3$[ebp]
  001a9	0f 42 d8	 cmovb	 ebx, eax
  001ac	fe c3		 inc	 bl
  001ae	0f b7 c2	 movzx	 eax, dx
  001b1	88 9c 16 58 14
	00 00		 mov	 BYTE PTR [esi+edx+5208], bl
  001b8	8b 5d f8	 mov	 ebx, DWORD PTR _tree$1$[ebp]
  001bb	66 89 47 02	 mov	 WORD PTR [edi+2], ax
  001bf	66 89 44 8b 02	 mov	 WORD PTR [ebx+ecx*4+2], ax
  001c4	8b ce		 mov	 ecx, esi
  001c6	89 96 60 0b 00
	00		 mov	 DWORD PTR [esi+2912], edx
  001cc	42		 inc	 edx
  001cd	89 55 fc	 mov	 DWORD PTR _node$2$[ebp], edx
  001d0	8b d3		 mov	 edx, ebx
  001d2	e8 00 00 00 00	 call	 _pqdownheap

; 693  : 
; 694  :     } while (s->heap_len >= 2);

  001d7	8b 8e 50 14 00
	00		 mov	 ecx, DWORD PTR [esi+5200]
  001dd	83 c4 08	 add	 esp, 8
  001e0	83 f9 02	 cmp	 ecx, 2
  001e3	0f 8d 37 ff ff
	ff		 jge	 $LL12@build_tree

; 695  : 
; 696  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  001e9	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]

; 697  : 
; 698  :     /* At this point, the fields freq and dad are set. We can now
; 699  :      * generate the bit lengths.
; 700  :      */
; 701  :     gen_bitlen(s, (tree_desc *)desc);

  001ef	8b ce		 mov	 ecx, esi
  001f1	8b be 54 14 00
	00		 mov	 edi, DWORD PTR [esi+5204]
  001f7	8b 86 60 0b 00
	00		 mov	 eax, DWORD PTR [esi+2912]
  001fd	8b 55 ec	 mov	 edx, DWORD PTR _desc$1$[ebp]
  00200	89 84 be 5c 0b
	00 00		 mov	 DWORD PTR [esi+edi*4+2908], eax
  00207	e8 00 00 00 00	 call	 _gen_bitlen

; 702  : 
; 703  :     /* The field len is now set, we can generate the bit codes */
; 704  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  0020c	8b 55 f4	 mov	 edx, DWORD PTR _max_code$1$[ebp]
  0020f	81 c6 3c 0b 00
	00		 add	 esi, 2876		; 00000b3cH
  00215	56		 push	 esi
  00216	8b cb		 mov	 ecx, ebx
  00218	e8 00 00 00 00	 call	 _gen_codes
  0021d	83 c4 04	 add	 esp, 4
  00220	5f		 pop	 edi
  00221	5e		 pop	 esi
  00222	5b		 pop	 ebx

; 705  : }

  00223	8b e5		 mov	 esp, ebp
  00225	5d		 pop	 ebp
  00226	c3		 ret	 0
_build_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _scan_tree
_TEXT	SEGMENT
tv359 = -12						; size = 4
_prevlen$1$ = -8					; size = 4
tv351 = -4						; size = 4
tv348 = -4						; size = 4
tv357 = 8						; size = 4
_max_code$ = 8						; size = 4
_scan_tree PROC						; COMDAT
; _s$ = ecx
; _tree$ = edx

; 715  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f2		 mov	 esi, edx

; 716  :     int n;                     /* iterates over all tree elements */
; 717  :     int prevlen = -1;          /* last emitted length */

  0000a	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _prevlen$1$[ebp], -1
  00011	57		 push	 edi

; 718  :     int curlen;                /* length of current code */
; 719  :     int nextlen = tree[0].Len; /* length of next code */
; 720  :     int count = 0;             /* repeat count of the current code */
; 721  :     int max_count = 7;         /* max repeat count */
; 722  :     int min_count = 4;         /* min repeat count */
; 723  : 
; 724  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 725  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00012	bf ff ff 00 00	 mov	 edi, 65535		; 0000ffffH
  00017	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  0001b	8b d0		 mov	 edx, eax
  0001d	8b d8		 mov	 ebx, eax
  0001f	89 55 fc	 mov	 DWORD PTR tv348[ebp], edx
  00022	33 c0		 xor	 eax, eax
  00024	8b 55 08	 mov	 edx, DWORD PTR _max_code$[ebp]
  00027	66 89 7c 96 06	 mov	 WORD PTR [esi+edx*4+6], di

; 726  : 
; 727  :     for (n = 0; n <= max_code; n++) {

  0002c	85 d2		 test	 edx, edx
  0002e	0f 88 b7 00 00
	00		 js	 $LN3@scan_tree

; 718  :     int curlen;                /* length of current code */
; 719  :     int nextlen = tree[0].Len; /* length of next code */
; 720  :     int count = 0;             /* repeat count of the current code */
; 721  :     int max_count = 7;         /* max repeat count */
; 722  :     int min_count = 4;         /* min repeat count */
; 723  : 
; 724  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 725  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00034	66 3b d8	 cmp	 bx, ax
  00037	ba 07 00 00 00	 mov	 edx, 7
  0003c	bf 8a 00 00 00	 mov	 edi, 138		; 0000008aH
  00041	0f 45 fa	 cmovne	 edi, edx
  00044	33 d2		 xor	 edx, edx
  00046	66 3b d8	 cmp	 bx, ax
  00049	0f 95 c2	 setne	 dl
  0004c	83 c6 06	 add	 esi, 6
  0004f	89 75 fc	 mov	 DWORD PTR tv351[ebp], esi
  00052	83 c2 03	 add	 edx, 3
  00055	8b 75 08	 mov	 esi, DWORD PTR _max_code$[ebp]
  00058	46		 inc	 esi
  00059	89 75 f4	 mov	 DWORD PTR tv359[ebp], esi
  0005c	0f 1f 40 00	 npad	 4
$LL4@scan_tree:

; 728  :         curlen = nextlen; nextlen = tree[n+1].Len;

  00060	89 5d 08	 mov	 DWORD PTR tv357[ebp], ebx
  00063	8b f3		 mov	 esi, ebx
  00065	8b 5d fc	 mov	 ebx, DWORD PTR tv351[ebp]

; 729  :         if (++count < max_count && curlen == nextlen) {

  00068	40		 inc	 eax
  00069	0f b7 1b	 movzx	 ebx, WORD PTR [ebx]
  0006c	3b c7		 cmp	 eax, edi
  0006e	7d 04		 jge	 SHORT $LN6@scan_tree
  00070	3b f3		 cmp	 esi, ebx
  00072	74 69		 je	 SHORT $LN2@scan_tree
$LN6@scan_tree:

; 730  :             continue;
; 731  :         } else if (count < min_count) {

  00074	3b c2		 cmp	 eax, edx
  00076	8b 55 08	 mov	 edx, DWORD PTR tv357[ebp]
  00079	7d 0a		 jge	 SHORT $LN8@scan_tree

; 732  :             s->bl_tree[curlen].Freq += count;

  0007b	66 01 84 b1 7c
	0a 00 00	 add	 WORD PTR [ecx+esi*4+2684], ax
  00083	eb 2f		 jmp	 SHORT $LN14@scan_tree
$LN8@scan_tree:

; 733  :         } else if (curlen != 0) {

  00085	85 d2		 test	 edx, edx
  00087	74 16		 je	 SHORT $LN10@scan_tree

; 734  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  00089	3b 75 f8	 cmp	 esi, DWORD PTR _prevlen$1$[ebp]
  0008c	74 08		 je	 SHORT $LN25@scan_tree
  0008e	66 ff 84 b1 7c
	0a 00 00	 inc	 WORD PTR [ecx+esi*4+2684]
$LN25@scan_tree:

; 735  :             s->bl_tree[REP_3_6].Freq++;

  00096	66 ff 81 bc 0a
	00 00		 inc	 WORD PTR [ecx+2748]
  0009d	eb 15		 jmp	 SHORT $LN14@scan_tree
$LN10@scan_tree:

; 736  :         } else if (count <= 10) {

  0009f	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000a2	7f 09		 jg	 SHORT $LN13@scan_tree

; 737  :             s->bl_tree[REPZ_3_10].Freq++;

  000a4	66 ff 81 c0 0a
	00 00		 inc	 WORD PTR [ecx+2752]

; 738  :         } else {

  000ab	eb 07		 jmp	 SHORT $LN14@scan_tree
$LN13@scan_tree:

; 739  :             s->bl_tree[REPZ_11_138].Freq++;

  000ad	66 ff 81 c4 0a
	00 00		 inc	 WORD PTR [ecx+2756]
$LN14@scan_tree:

; 740  :         }
; 741  :         count = 0; prevlen = curlen;

  000b4	33 c0		 xor	 eax, eax
  000b6	89 75 f8	 mov	 DWORD PTR _prevlen$1$[ebp], esi

; 742  :         if (nextlen == 0) {

  000b9	85 db		 test	 ebx, ebx
  000bb	75 0a		 jne	 SHORT $LN15@scan_tree

; 743  :             max_count = 138, min_count = 3;

  000bd	bf 8a 00 00 00	 mov	 edi, 138		; 0000008aH
  000c2	8d 50 03	 lea	 edx, DWORD PTR [eax+3]
  000c5	eb 16		 jmp	 SHORT $LN2@scan_tree
$LN15@scan_tree:

; 744  :         } else if (curlen == nextlen) {

  000c7	3b d3		 cmp	 edx, ebx
  000c9	75 0a		 jne	 SHORT $LN17@scan_tree

; 745  :             max_count = 6, min_count = 3;

  000cb	bf 06 00 00 00	 mov	 edi, 6
  000d0	8d 57 fd	 lea	 edx, DWORD PTR [edi-3]

; 746  :         } else {

  000d3	eb 08		 jmp	 SHORT $LN2@scan_tree
$LN17@scan_tree:

; 747  :             max_count = 7, min_count = 4;

  000d5	bf 07 00 00 00	 mov	 edi, 7
  000da	8d 57 fd	 lea	 edx, DWORD PTR [edi-3]
$LN2@scan_tree:

; 726  : 
; 727  :     for (n = 0; n <= max_code; n++) {

  000dd	83 45 fc 04	 add	 DWORD PTR tv351[ebp], 4
  000e1	83 6d f4 01	 sub	 DWORD PTR tv359[ebp], 1
  000e5	0f 85 75 ff ff
	ff		 jne	 $LL4@scan_tree
$LN3@scan_tree:
  000eb	5f		 pop	 edi

; 748  :         }
; 749  :     }
; 750  : }

  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
_scan_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _send_tree
_TEXT	SEGMENT
tv2157 = -32						; size = 4
tv2149 = -32						; size = 4
tv2145 = -32						; size = 4
tv2136 = -32						; size = 4
tv2133 = -32						; size = 4
tv2107 = -28						; size = 4
tv2065 = -28						; size = 4
tv2022 = -28						; size = 4
tv2002 = -28						; size = 4
tv1981 = -28						; size = 4
tv2208 = -24						; size = 4
_tree$1$ = -24						; size = 4
tv2211 = -20						; size = 4
tv2206 = -20						; size = 4
tv2154 = -16						; size = 4
_nextlen$1$ = -12					; size = 4
tv2210 = -8						; size = 4
_s$1$ = -4						; size = 4
_curlen$1$ = 8						; size = 4
_max_code$ = 8						; size = 4
_send_tree PROC						; COMDAT
; _s$ = ecx
; _tree$ = edx

; 760  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx

; 761  :     int n;                     /* iterates over all tree elements */
; 762  :     int prevlen = -1;          /* last emitted length */
; 763  :     int curlen;                /* length of current code */
; 764  :     int nextlen = tree[0].Len; /* length of next code */

  00007	0f b7 5a 02	 movzx	 ebx, WORD PTR [edx+2]
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 765  :     int count = 0;             /* repeat count of the current code */

  0000d	33 ff		 xor	 edi, edi
  0000f	89 55 e8	 mov	 DWORD PTR _tree$1$[ebp], edx
  00012	83 ce ff	 or	 esi, -1
  00015	89 4d fc	 mov	 DWORD PTR _s$1$[ebp], ecx

; 766  :     int max_count = 7;         /* max repeat count */
; 767  :     int min_count = 4;         /* min repeat count */
; 768  : 
; 769  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 770  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 771  : 
; 772  :     for (n = 0; n <= max_code; n++) {

  00018	39 7d 08	 cmp	 DWORD PTR _max_code$[ebp], edi
  0001b	0f 8c 0f 05 00
	00		 jl	 $LN3@send_tree
  00021	85 db		 test	 ebx, ebx
  00023	b8 07 00 00 00	 mov	 eax, 7
  00028	ba 8a 00 00 00	 mov	 edx, 138		; 0000008aH
  0002d	0f 45 d0	 cmovne	 edx, eax
  00030	8b 45 e8	 mov	 eax, DWORD PTR _tree$1$[ebp]
  00033	33 c9		 xor	 ecx, ecx
  00035	85 db		 test	 ebx, ebx
  00037	0f 95 c1	 setne	 cl
  0003a	83 c0 06	 add	 eax, 6
  0003d	89 45 f0	 mov	 DWORD PTR tv2154[ebp], eax
  00040	83 c1 03	 add	 ecx, 3
  00043	8b 45 08	 mov	 eax, DWORD PTR _max_code$[ebp]
  00046	40		 inc	 eax
  00047	89 45 e8	 mov	 DWORD PTR tv2208[ebp], eax
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL4@send_tree:

; 773  :         curlen = nextlen; nextlen = tree[n+1].Len;

  00050	8b 45 f0	 mov	 eax, DWORD PTR tv2154[ebp]

; 774  :         if (++count < max_count && curlen == nextlen) {

  00053	47		 inc	 edi
  00054	89 5d f8	 mov	 DWORD PTR tv2210[ebp], ebx
  00057	89 5d 08	 mov	 DWORD PTR _curlen$1$[ebp], ebx
  0005a	89 5d ec	 mov	 DWORD PTR tv2211[ebp], ebx
  0005d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00060	89 45 f4	 mov	 DWORD PTR _nextlen$1$[ebp], eax
  00063	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  00066	3b fa		 cmp	 edi, edx
  00068	7d 09		 jge	 SHORT $LN9@send_tree
  0006a	3b 5d f4	 cmp	 ebx, DWORD PTR _nextlen$1$[ebp]
  0006d	0f 84 ac 04 00
	00		 je	 $LN46@send_tree
$LN9@send_tree:

; 775  :             continue;
; 776  :         } else if (count < min_count) {

  00073	3b f9		 cmp	 edi, ecx
  00075	0f 8d ac 00 00
	00		 jge	 $LN11@send_tree
  0007b	8d 88 7c 0a 00
	00		 lea	 ecx, DWORD PTR [eax+2684]
  00081	8d 0c 99	 lea	 ecx, DWORD PTR [ecx+ebx*4]
  00084	89 4d e0	 mov	 DWORD PTR tv2157[ebp], ecx
$LL7@send_tree:

; 777  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  00087	8b 55 08	 mov	 edx, DWORD PTR _curlen$1$[ebp]
  0008a	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  00090	0f b7 9c 90 7e
	0a 00 00	 movzx	 ebx, WORD PTR [eax+edx*4+2686]
  00098	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0009b	8b ca		 mov	 ecx, edx
  0009d	89 4d e4	 mov	 DWORD PTR tv1981[ebp], ecx
  000a0	8b ce		 mov	 ecx, esi
  000a2	66 d3 e2	 shl	 dx, cl
  000a5	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000aa	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  000b1	2b cb		 sub	 ecx, ebx
  000b3	0f b7 d2	 movzx	 edx, dx
  000b6	89 55 ec	 mov	 DWORD PTR tv2206[ebp], edx
  000b9	3b f1		 cmp	 esi, ecx
  000bb	7e 46		 jle	 SHORT $LN13@send_tree
  000bd	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000c0	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  000c7	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ca	8b 45 ec	 mov	 eax, DWORD PTR tv2206[ebp]
  000cd	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000d0	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  000d3	ff 40 14	 inc	 DWORD PTR [eax+20]
  000d6	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  000d9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000dc	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  000e2	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  000e5	b1 10		 mov	 cl, 16			; 00000010H
  000e7	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  000ed	8b 55 e4	 mov	 edx, DWORD PTR tv1981[ebp]
  000f0	ff 40 14	 inc	 DWORD PTR [eax+20]
  000f3	66 d3 ea	 shr	 dx, cl
  000f6	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  000fc	83 c1 f0	 add	 ecx, -16		; fffffff0H
  000ff	03 cb		 add	 ecx, ebx
  00101	eb 03		 jmp	 SHORT $LN47@send_tree
$LN13@send_tree:
  00103	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
$LN47@send_tree:
  00106	0f b7 d2	 movzx	 edx, dx
  00109	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  0010f	8b 4d e0	 mov	 ecx, DWORD PTR tv2157[ebp]
  00112	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00119	83 ef 01	 sub	 edi, 1
  0011c	0f 85 65 ff ff
	ff		 jne	 $LL7@send_tree

; 778  : 
; 779  :         } else if (curlen != 0) {

  00122	e9 c9 03 00 00	 jmp	 $LN33@send_tree
$LN11@send_tree:
  00127	83 7d f8 00	 cmp	 DWORD PTR tv2210[ebp], 0
  0012b	0f 84 9c 01 00
	00		 je	 $LN15@send_tree

; 780  :             if (curlen != prevlen) {

  00131	8b 4d 08	 mov	 ecx, DWORD PTR _curlen$1$[ebp]
  00134	3b ce		 cmp	 ecx, esi
  00136	0f 84 95 00 00
	00		 je	 $LN17@send_tree

; 781  :                 send_code(s, curlen, s->bl_tree); count--;

  0013c	0f b7 9c 88 7e
	0a 00 00	 movzx	 ebx, WORD PTR [eax+ecx*4+2686]
  00144	8b 4d ec	 mov	 ecx, DWORD PTR tv2211[ebp]
  00147	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  0014d	0f b7 94 88 7c
	0a 00 00	 movzx	 edx, WORD PTR [eax+ecx*4+2684]
  00155	8b ca		 mov	 ecx, edx
  00157	89 4d e4	 mov	 DWORD PTR tv2002[ebp], ecx
  0015a	8b ce		 mov	 ecx, esi
  0015c	66 d3 e2	 shl	 dx, cl
  0015f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00164	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  0016b	2b cb		 sub	 ecx, ebx
  0016d	0f b7 d2	 movzx	 edx, dx
  00170	89 55 e0	 mov	 DWORD PTR tv2133[ebp], edx
  00173	3b f1		 cmp	 esi, ecx
  00175	7e 46		 jle	 SHORT $LN18@send_tree
  00177	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0017a	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00181	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00184	8b 45 e0	 mov	 eax, DWORD PTR tv2133[ebp]
  00187	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0018a	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  0018d	ff 40 14	 inc	 DWORD PTR [eax+20]
  00190	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00193	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00196	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0019c	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0019f	b1 10		 mov	 cl, 16			; 00000010H
  001a1	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  001a7	8b 55 e4	 mov	 edx, DWORD PTR tv2002[ebp]
  001aa	ff 40 14	 inc	 DWORD PTR [eax+20]
  001ad	66 d3 ea	 shr	 dx, cl
  001b0	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001b6	83 c1 f0	 add	 ecx, -16		; fffffff0H
  001b9	03 cb		 add	 ecx, ebx
  001bb	eb 03		 jmp	 SHORT $LN48@send_tree
$LN18@send_tree:
  001bd	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
$LN48@send_tree:
  001c0	0f b7 d2	 movzx	 edx, dx
  001c3	4f		 dec	 edi
  001c4	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  001ca	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
$LN17@send_tree:

; 782  :             }
; 783  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 784  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  001d1	0f b7 90 bc 0a
	00 00		 movzx	 edx, WORD PTR [eax+2748]
  001d8	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  001de	8b ca		 mov	 ecx, edx
  001e0	0f b7 98 be 0a
	00 00		 movzx	 ebx, WORD PTR [eax+2750]
  001e7	89 4d e4	 mov	 DWORD PTR tv2022[ebp], ecx
  001ea	8b ce		 mov	 ecx, esi
  001ec	66 d3 e2	 shl	 dx, cl
  001ef	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001f4	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  001fb	2b cb		 sub	 ecx, ebx
  001fd	0f b7 d2	 movzx	 edx, dx
  00200	89 55 e0	 mov	 DWORD PTR tv2136[ebp], edx
  00203	3b f1		 cmp	 esi, ecx
  00205	7e 46		 jle	 SHORT $LN20@send_tree
  00207	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0020a	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00211	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00214	8b 45 e0	 mov	 eax, DWORD PTR tv2136[ebp]
  00217	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0021a	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  0021d	ff 40 14	 inc	 DWORD PTR [eax+20]
  00220	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00223	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00226	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0022c	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0022f	b1 10		 mov	 cl, 16			; 00000010H
  00231	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00237	8b 55 e4	 mov	 edx, DWORD PTR tv2022[ebp]
  0023a	ff 40 14	 inc	 DWORD PTR [eax+20]
  0023d	66 d3 ea	 shr	 dx, cl
  00240	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00246	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00249	03 cb		 add	 ecx, ebx
  0024b	eb 03		 jmp	 SHORT $LN49@send_tree
$LN20@send_tree:
  0024d	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
$LN49@send_tree:
  00250	0f b7 d2	 movzx	 edx, dx
  00253	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  00259	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00260	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  00266	0f b7 d2	 movzx	 edx, dx
  00269	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  0026c	7e 57		 jle	 SHORT $LN22@send_tree
  0026e	83 c7 fd	 add	 edi, -3			; fffffffdH
  00271	8b ce		 mov	 ecx, esi
  00273	66 8b df	 mov	 bx, di
  00276	66 d3 e3	 shl	 bx, cl
  00279	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0027c	66 0b da	 or	 bx, dx
  0027f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00282	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  00289	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  0028c	ff 40 14	 inc	 DWORD PTR [eax+20]
  0028f	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00292	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00295	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0029b	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0029e	b1 10		 mov	 cl, 16			; 00000010H
  002a0	0f b7 90 bc 16
	00 00		 movzx	 edx, WORD PTR [eax+5820]
  002a7	ff 40 14	 inc	 DWORD PTR [eax+20]
  002aa	2a ca		 sub	 cl, dl
  002ac	83 80 bc 16 00
	00 f2		 add	 DWORD PTR [eax+5820], -14 ; fffffff2H
  002b3	66 d3 ef	 shr	 di, cl
  002b6	0f b7 cf	 movzx	 ecx, di

; 791  :         }
; 792  :         count = 0; prevlen = curlen;

  002b9	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  002c0	e9 2b 02 00 00	 jmp	 $LN33@send_tree
$LN22@send_tree:

; 782  :             }
; 783  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 784  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  002c5	8d 4e 02	 lea	 ecx, DWORD PTR [esi+2]
  002c8	e9 00 01 00 00	 jmp	 $LN52@send_tree
$LN15@send_tree:

; 785  : 
; 786  :         } else if (count <= 10) {

  002cd	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  002d3	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  002d6	0f 8f 18 01 00
	00		 jg	 $LN24@send_tree

; 787  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  002dc	0f b7 90 c0 0a
	00 00		 movzx	 edx, WORD PTR [eax+2752]
  002e3	0f b7 98 c2 0a
	00 00		 movzx	 ebx, WORD PTR [eax+2754]
  002ea	8b ca		 mov	 ecx, edx
  002ec	89 4d e4	 mov	 DWORD PTR tv2065[ebp], ecx
  002ef	8b ce		 mov	 ecx, esi
  002f1	66 d3 e2	 shl	 dx, cl
  002f4	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002f9	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  00300	2b cb		 sub	 ecx, ebx
  00302	0f b7 d2	 movzx	 edx, dx
  00305	89 55 e0	 mov	 DWORD PTR tv2145[ebp], edx
  00308	3b f1		 cmp	 esi, ecx
  0030a	7e 46		 jle	 SHORT $LN26@send_tree
  0030c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0030f	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00316	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00319	8b 45 e0	 mov	 eax, DWORD PTR tv2145[ebp]
  0031c	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0031f	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  00322	ff 40 14	 inc	 DWORD PTR [eax+20]
  00325	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00328	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0032b	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  00331	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00334	b1 10		 mov	 cl, 16			; 00000010H
  00336	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  0033c	8b 55 e4	 mov	 edx, DWORD PTR tv2065[ebp]
  0033f	ff 40 14	 inc	 DWORD PTR [eax+20]
  00342	66 d3 ea	 shr	 dx, cl
  00345	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0034b	83 c1 f0	 add	 ecx, -16		; fffffff0H
  0034e	03 cb		 add	 ecx, ebx
  00350	eb 03		 jmp	 SHORT $LN50@send_tree
$LN26@send_tree:
  00352	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
$LN50@send_tree:
  00355	0f b7 d2	 movzx	 edx, dx
  00358	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  0035e	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00365	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  0036b	0f b7 d2	 movzx	 edx, dx
  0036e	83 fe 0d	 cmp	 esi, 13			; 0000000dH
  00371	7e 57		 jle	 SHORT $LN28@send_tree
  00373	83 c7 fd	 add	 edi, -3			; fffffffdH
  00376	8b ce		 mov	 ecx, esi
  00378	66 8b df	 mov	 bx, di
  0037b	66 d3 e3	 shl	 bx, cl
  0037e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00381	66 0b da	 or	 bx, dx
  00384	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00387	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  0038e	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  00391	ff 40 14	 inc	 DWORD PTR [eax+20]
  00394	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00397	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0039a	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  003a0	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  003a3	b1 10		 mov	 cl, 16			; 00000010H
  003a5	0f b7 90 bc 16
	00 00		 movzx	 edx, WORD PTR [eax+5820]
  003ac	ff 40 14	 inc	 DWORD PTR [eax+20]
  003af	2a ca		 sub	 cl, dl
  003b1	83 80 bc 16 00
	00 f3		 add	 DWORD PTR [eax+5820], -13 ; fffffff3H
  003b8	66 d3 ef	 shr	 di, cl
  003bb	0f b7 cf	 movzx	 ecx, di

; 791  :         }
; 792  :         count = 0; prevlen = curlen;

  003be	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  003c5	e9 26 01 00 00	 jmp	 $LN33@send_tree
$LN28@send_tree:

; 787  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  003ca	8d 4e 03	 lea	 ecx, DWORD PTR [esi+3]
$LN52@send_tree:

; 791  :         }
; 792  :         count = 0; prevlen = curlen;

  003cd	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  003d3	8d 57 fd	 lea	 edx, DWORD PTR [edi-3]
  003d6	8b ce		 mov	 ecx, esi
  003d8	66 d3 e2	 shl	 dx, cl
  003db	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  003e2	66 0b d1	 or	 dx, cx
  003e5	0f b7 ca	 movzx	 ecx, dx
  003e8	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  003ef	e9 fc 00 00 00	 jmp	 $LN33@send_tree
$LN24@send_tree:

; 788  : 
; 789  :         } else {
; 790  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

  003f4	0f b7 90 c4 0a
	00 00		 movzx	 edx, WORD PTR [eax+2756]
  003fb	0f b7 98 c6 0a
	00 00		 movzx	 ebx, WORD PTR [eax+2758]
  00402	8b ca		 mov	 ecx, edx
  00404	89 4d e4	 mov	 DWORD PTR tv2107[ebp], ecx
  00407	8b ce		 mov	 ecx, esi
  00409	66 d3 e2	 shl	 dx, cl
  0040c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00411	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  00418	2b cb		 sub	 ecx, ebx
  0041a	0f b7 d2	 movzx	 edx, dx
  0041d	89 55 e0	 mov	 DWORD PTR tv2149[ebp], edx
  00420	3b f1		 cmp	 esi, ecx
  00422	7e 46		 jle	 SHORT $LN30@send_tree
  00424	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00427	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  0042e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00431	8b 45 e0	 mov	 eax, DWORD PTR tv2149[ebp]
  00434	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00437	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  0043a	ff 40 14	 inc	 DWORD PTR [eax+20]
  0043d	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00440	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00443	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  00449	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0044c	b1 10		 mov	 cl, 16			; 00000010H
  0044e	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00454	8b 55 e4	 mov	 edx, DWORD PTR tv2107[ebp]
  00457	ff 40 14	 inc	 DWORD PTR [eax+20]
  0045a	66 d3 ea	 shr	 dx, cl
  0045d	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00463	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00466	03 cb		 add	 ecx, ebx
  00468	eb 03		 jmp	 SHORT $LN51@send_tree
$LN30@send_tree:
  0046a	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
$LN51@send_tree:
  0046d	0f b7 d2	 movzx	 edx, dx
  00470	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  00476	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  0047d	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00483	0f b7 f2	 movzx	 esi, dx
  00486	83 f9 09	 cmp	 ecx, 9
  00489	7e 4c		 jle	 SHORT $LN32@send_tree
  0048b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0048e	83 c7 f5	 add	 edi, -11		; fffffff5H
  00491	66 8b df	 mov	 bx, di
  00494	66 d3 e3	 shl	 bx, cl
  00497	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0049a	66 0b de	 or	 bx, si
  0049d	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  004a4	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  004a7	ff 40 14	 inc	 DWORD PTR [eax+20]
  004aa	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  004ad	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  004b0	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  004b6	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  004b9	b1 10		 mov	 cl, 16			; 00000010H
  004bb	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  004c1	ff 40 14	 inc	 DWORD PTR [eax+20]
  004c4	66 d3 ef	 shr	 di, cl
  004c7	83 80 bc 16 00
	00 f7		 add	 DWORD PTR [eax+5820], -9 ; fffffff7H
  004ce	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  004d5	eb 19		 jmp	 SHORT $LN33@send_tree
$LN32@send_tree:
  004d7	8d 57 f5	 lea	 edx, DWORD PTR [edi-11]
  004da	66 d3 e2	 shl	 dx, cl
  004dd	66 0b d6	 or	 dx, si
  004e0	83 c1 07	 add	 ecx, 7
  004e3	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  004ea	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN33@send_tree:

; 793  :         if (nextlen == 0) {

  004f0	8b 5d f4	 mov	 ebx, DWORD PTR _nextlen$1$[ebp]
  004f3	33 ff		 xor	 edi, edi
  004f5	8b 75 08	 mov	 esi, DWORD PTR _curlen$1$[ebp]
  004f8	85 db		 test	 ebx, ebx
  004fa	75 0a		 jne	 SHORT $LN34@send_tree

; 794  :             max_count = 138, min_count = 3;

  004fc	ba 8a 00 00 00	 mov	 edx, 138		; 0000008aH
  00501	8d 4f 03	 lea	 ecx, DWORD PTR [edi+3]
  00504	eb 1c		 jmp	 SHORT $LN2@send_tree
$LN34@send_tree:

; 795  :         } else if (curlen == nextlen) {

  00506	39 5d f8	 cmp	 DWORD PTR tv2210[ebp], ebx
  00509	75 0a		 jne	 SHORT $LN36@send_tree

; 796  :             max_count = 6, min_count = 3;

  0050b	ba 06 00 00 00	 mov	 edx, 6
  00510	8d 4a fd	 lea	 ecx, DWORD PTR [edx-3]

; 797  :         } else {

  00513	eb 0d		 jmp	 SHORT $LN2@send_tree
$LN36@send_tree:

; 798  :             max_count = 7, min_count = 4;

  00515	ba 07 00 00 00	 mov	 edx, 7
  0051a	8d 4a fd	 lea	 ecx, DWORD PTR [edx-3]
  0051d	eb 03		 jmp	 SHORT $LN2@send_tree
$LN46@send_tree:

; 774  :         if (++count < max_count && curlen == nextlen) {

  0051f	8b 5d f4	 mov	 ebx, DWORD PTR _nextlen$1$[ebp]
$LN2@send_tree:

; 766  :     int max_count = 7;         /* max repeat count */
; 767  :     int min_count = 4;         /* min repeat count */
; 768  : 
; 769  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 770  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 771  : 
; 772  :     for (n = 0; n <= max_code; n++) {

  00522	83 45 f0 04	 add	 DWORD PTR tv2154[ebp], 4
  00526	83 6d e8 01	 sub	 DWORD PTR tv2208[ebp], 1
  0052a	0f 85 20 fb ff
	ff		 jne	 $LL4@send_tree
$LN3@send_tree:
  00530	5f		 pop	 edi

; 799  :         }
; 800  :     }
; 801  : }

  00531	5e		 pop	 esi
  00532	5b		 pop	 ebx
  00533	8b e5		 mov	 esp, ebp
  00535	5d		 pop	 ebp
  00536	c3		 ret	 0
_send_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _build_bl_tree
_TEXT	SEGMENT
_build_bl_tree PROC					; COMDAT
; _s$ = ecx

; 809  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 810  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 811  : 
; 812  :     /* Determine the bit length frequencies for literal and distance trees */
; 813  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00003	ff b6 1c 0b 00
	00		 push	 DWORD PTR [esi+2844]
  00009	8d 96 94 00 00
	00		 lea	 edx, DWORD PTR [esi+148]
  0000f	e8 00 00 00 00	 call	 _scan_tree

; 814  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  00014	ff b6 28 0b 00
	00		 push	 DWORD PTR [esi+2856]
  0001a	8d 96 88 09 00
	00		 lea	 edx, DWORD PTR [esi+2440]
  00020	e8 00 00 00 00	 call	 _scan_tree
  00025	83 c4 08	 add	 esp, 8

; 815  : 
; 816  :     /* Build the bit length tree: */
; 817  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  00028	8d 96 30 0b 00
	00		 lea	 edx, DWORD PTR [esi+2864]
  0002e	e8 00 00 00 00	 call	 _build_tree

; 818  :     /* opt_len now includes the length of the tree representations, except
; 819  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 820  :      */
; 821  : 
; 822  :     /* Determine the number of bit length codes to send. The pkzip format
; 823  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 824  :      * 3 but the actual value used is 4.)
; 825  :      */
; 826  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00033	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@build_bl_t:

; 827  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  00040	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _bl_order[eax]
  00047	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00050	75 78		 jne	 SHORT $LN8@build_bl_t
  00052	0f b6 88 ff ff
	ff ff		 movzx	 ecx, BYTE PTR _bl_order[eax-1]
  00059	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00062	75 65		 jne	 SHORT $LN11@build_bl_t
  00064	0f b6 88 fe ff
	ff ff		 movzx	 ecx, BYTE PTR _bl_order[eax-2]
  0006b	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00074	75 3f		 jne	 SHORT $LN12@build_bl_t
  00076	0f b6 88 fd ff
	ff ff		 movzx	 ecx, BYTE PTR _bl_order[eax-3]
  0007d	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00086	75 19		 jne	 SHORT $LN13@build_bl_t

; 818  :     /* opt_len now includes the length of the tree representations, except
; 819  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 820  :      */
; 821  : 
; 822  :     /* Determine the number of bit length codes to send. The pkzip format
; 823  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 824  :      * 3 but the actual value used is 4.)
; 825  :      */
; 826  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00088	83 e8 04	 sub	 eax, 4
  0008b	83 f8 03	 cmp	 eax, 3
  0008e	7d b0		 jge	 SHORT $LL4@build_bl_t

; 828  :     }
; 829  :     /* Update opt_len to include the bit length tree and counts */
; 830  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  00090	8d 0c 45 11 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+17]
  00097	03 c8		 add	 ecx, eax
  00099	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx

; 831  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 832  :             s->opt_len, s->static_len));
; 833  : 
; 834  :     return max_blindex;

  0009f	5e		 pop	 esi

; 835  : }

  000a0	c3		 ret	 0
$LN13@build_bl_t:

; 827  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000a1	83 e8 03	 sub	 eax, 3

; 828  :     }
; 829  :     /* Update opt_len to include the bit length tree and counts */
; 830  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  000a4	8d 0c 45 11 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+17]
  000ab	03 c8		 add	 ecx, eax
  000ad	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx

; 831  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 832  :             s->opt_len, s->static_len));
; 833  : 
; 834  :     return max_blindex;

  000b3	5e		 pop	 esi

; 835  : }

  000b4	c3		 ret	 0
$LN12@build_bl_t:

; 827  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000b5	83 e8 02	 sub	 eax, 2

; 828  :     }
; 829  :     /* Update opt_len to include the bit length tree and counts */
; 830  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  000b8	8d 0c 45 11 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+17]
  000bf	03 c8		 add	 ecx, eax
  000c1	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx

; 831  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 832  :             s->opt_len, s->static_len));
; 833  : 
; 834  :     return max_blindex;

  000c7	5e		 pop	 esi

; 835  : }

  000c8	c3		 ret	 0
$LN11@build_bl_t:

; 827  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000c9	48		 dec	 eax
$LN8@build_bl_t:

; 828  :     }
; 829  :     /* Update opt_len to include the bit length tree and counts */
; 830  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  000ca	8d 0c 45 11 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+17]
  000d1	03 c8		 add	 ecx, eax
  000d3	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx

; 831  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 832  :             s->opt_len, s->static_len));
; 833  : 
; 834  :     return max_blindex;

  000d9	5e		 pop	 esi

; 835  : }

  000da	c3		 ret	 0
_build_bl_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _send_all_trees
_TEXT	SEGMENT
_lcodes$1$ = -12					; size = 4
tv1147 = -8						; size = 4
tv1162 = -4						; size = 4
_dcodes$ = 8						; size = 4
_blcodes$ = 12						; size = 4
_send_all_trees PROC					; COMDAT
; _s$ = ecx
; _lcodes$ = edx

; 845  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	89 55 f4	 mov	 DWORD PTR _lcodes$1$[ebp], edx

; 846  :     int rank;                    /* index in bl_order */
; 847  : 
; 848  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 849  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 850  :             "too many codes");
; 851  :     Tracev((stderr, "\nbl counts: "));
; 852  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

  0000d	0f b7 86 b8 16
	00 00		 movzx	 eax, WORD PTR [esi+5816]
  00014	8d 9e b8 16 00
	00		 lea	 ebx, DWORD PTR [esi+5816]
  0001a	57		 push	 edi
  0001b	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  00021	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  00024	7e 47		 jle	 SHORT $LN5@send_all_t
  00026	8d ba ff fe ff
	ff		 lea	 edi, DWORD PTR [edx-257]
  0002c	66 8b d7	 mov	 dx, di
  0002f	66 d3 e2	 shl	 dx, cl
  00032	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00035	66 0b d0	 or	 dx, ax
  00038	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003b	66 89 13	 mov	 WORD PTR [ebx], dx
  0003e	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00041	ff 46 14	 inc	 DWORD PTR [esi+20]
  00044	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00047	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004a	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  0004d	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00050	b1 10		 mov	 cl, 16			; 00000010H
  00052	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  00059	ff 46 14	 inc	 DWORD PTR [esi+20]
  0005c	2a c8		 sub	 cl, al
  0005e	83 86 bc 16 00
	00 f5		 add	 DWORD PTR [esi+5820], -11 ; fffffff5H
  00065	66 d3 ef	 shr	 di, cl
  00068	0f b7 c7	 movzx	 eax, di
  0006b	eb 1b		 jmp	 SHORT $LN6@send_all_t
$LN5@send_all_t:
  0006d	8d 41 05	 lea	 eax, DWORD PTR [ecx+5]
  00070	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  00076	8d 82 ff fe ff
	ff		 lea	 eax, DWORD PTR [edx-257]
  0007c	66 d3 e0	 shl	 ax, cl
  0007f	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  00082	66 0b c1	 or	 ax, cx
  00085	0f b7 c0	 movzx	 eax, ax
$LN6@send_all_t:

; 853  :     send_bits(s, dcodes-1,   5);

  00088	66 89 03	 mov	 WORD PTR [ebx], ax
  0008b	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  00091	0f b7 c0	 movzx	 eax, ax
  00094	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  00097	7e 45		 jle	 SHORT $LN7@send_all_t
  00099	8b 7d 08	 mov	 edi, DWORD PTR _dcodes$[ebp]
  0009c	4f		 dec	 edi
  0009d	66 8b d7	 mov	 dx, di
  000a0	66 d3 e2	 shl	 dx, cl
  000a3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a6	66 0b d0	 or	 dx, ax
  000a9	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000ac	66 89 13	 mov	 WORD PTR [ebx], dx
  000af	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000b2	ff 46 14	 inc	 DWORD PTR [esi+20]
  000b5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000b8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000bb	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  000be	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000c1	b1 10		 mov	 cl, 16			; 00000010H
  000c3	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  000ca	ff 46 14	 inc	 DWORD PTR [esi+20]
  000cd	2a c8		 sub	 cl, al
  000cf	83 86 bc 16 00
	00 f5		 add	 DWORD PTR [esi+5820], -11 ; fffffff5H
  000d6	66 d3 ef	 shr	 di, cl
  000d9	0f b7 c7	 movzx	 eax, di
  000dc	eb 19		 jmp	 SHORT $LN8@send_all_t
$LN7@send_all_t:
  000de	8d 41 05	 lea	 eax, DWORD PTR [ecx+5]
  000e1	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  000e7	8b 45 08	 mov	 eax, DWORD PTR _dcodes$[ebp]
  000ea	48		 dec	 eax
  000eb	66 d3 e0	 shl	 ax, cl
  000ee	0f b7 0b	 movzx	 ecx, WORD PTR [ebx]
  000f1	66 0b c1	 or	 ax, cx
  000f4	0f b7 c0	 movzx	 eax, ax
$LN8@send_all_t:

; 854  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

  000f7	66 89 03	 mov	 WORD PTR [ebx], ax
  000fa	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  00100	0f b7 d0	 movzx	 edx, ax
  00103	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  00106	7e 4a		 jle	 SHORT $LN9@send_all_t
  00108	8b 7d 0c	 mov	 edi, DWORD PTR _blcodes$[ebp]
  0010b	83 c7 fc	 add	 edi, -4			; fffffffcH
  0010e	0f b7 c0	 movzx	 eax, ax
  00111	66 8b d7	 mov	 dx, di
  00114	66 d3 e2	 shl	 dx, cl
  00117	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0011a	66 0b d0	 or	 dx, ax
  0011d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00120	66 89 13	 mov	 WORD PTR [ebx], dx
  00123	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00126	ff 46 14	 inc	 DWORD PTR [esi+20]
  00129	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0012c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0012f	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  00132	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00135	b1 10		 mov	 cl, 16			; 00000010H
  00137	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  0013e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00141	2a c8		 sub	 cl, al
  00143	83 86 bc 16 00
	00 f4		 add	 DWORD PTR [esi+5820], -12 ; fffffff4H
  0014a	66 d3 ef	 shr	 di, cl
  0014d	0f b7 c7	 movzx	 eax, di
  00150	eb 18		 jmp	 SHORT $LN10@send_all_t
$LN9@send_all_t:
  00152	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00155	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  0015b	8b 45 0c	 mov	 eax, DWORD PTR _blcodes$[ebp]
  0015e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00161	66 d3 e0	 shl	 ax, cl
  00164	66 0b c2	 or	 ax, dx
  00167	0f b7 c0	 movzx	 eax, ax
$LN10@send_all_t:

; 855  :     for (rank = 0; rank < blcodes; rank++) {

  0016a	33 ff		 xor	 edi, edi
  0016c	66 89 03	 mov	 WORD PTR [ebx], ax
  0016f	39 7d 0c	 cmp	 DWORD PTR _blcodes$[ebp], edi
  00172	0f 8e 85 00 00
	00		 jle	 $LN3@send_all_t
  00178	8b 96 bc 16 00
	00		 mov	 edx, DWORD PTR [esi+5820]
  0017e	66 90		 npad	 2
$LL4@send_all_t:

; 856  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 857  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  00180	0f b6 87 00 00
	00 00		 movzx	 eax, BYTE PTR _bl_order[edi]
  00187	8b ca		 mov	 ecx, edx
  00189	0f b7 84 86 7e
	0a 00 00	 movzx	 eax, WORD PTR [esi+eax*4+2686]
  00191	89 45 f8	 mov	 DWORD PTR tv1147[ebp], eax
  00194	66 d3 e0	 shl	 ax, cl
  00197	66 0b 03	 or	 ax, WORD PTR [ebx]
  0019a	0f b7 c0	 movzx	 eax, ax
  0019d	89 45 fc	 mov	 DWORD PTR tv1162[ebp], eax
  001a0	83 fa 0d	 cmp	 edx, 13			; 0000000dH
  001a3	7e 41		 jle	 SHORT $LN11@send_all_t
  001a5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001a8	8b 55 fc	 mov	 edx, DWORD PTR tv1162[ebp]
  001ab	66 89 03	 mov	 WORD PTR [ebx], ax
  001ae	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  001b1	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001b4	ff 46 14	 inc	 DWORD PTR [esi+20]
  001b7	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  001ba	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001bd	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  001c0	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001c3	b1 10		 mov	 cl, 16			; 00000010H
  001c5	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  001cc	83 86 bc 16 00
	00 f3		 add	 DWORD PTR [esi+5820], -13 ; fffffff3H
  001d3	2a c8		 sub	 cl, al
  001d5	8b 45 f8	 mov	 eax, DWORD PTR tv1147[ebp]
  001d8	ff 46 14	 inc	 DWORD PTR [esi+20]
  001db	8b 96 bc 16 00
	00		 mov	 edx, DWORD PTR [esi+5820]
  001e1	66 d3 e8	 shr	 ax, cl
  001e4	eb 09		 jmp	 SHORT $LN18@send_all_t
$LN11@send_all_t:
  001e6	83 c2 03	 add	 edx, 3
  001e9	89 96 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], edx
$LN18@send_all_t:

; 855  :     for (rank = 0; rank < blcodes; rank++) {

  001ef	8b cb		 mov	 ecx, ebx
  001f1	0f b7 c0	 movzx	 eax, ax
  001f4	47		 inc	 edi
  001f5	66 89 01	 mov	 WORD PTR [ecx], ax
  001f8	3b 7d 0c	 cmp	 edi, DWORD PTR _blcodes$[ebp]
  001fb	7c 83		 jl	 SHORT $LL4@send_all_t
$LN3@send_all_t:

; 858  :     }
; 859  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 860  : 
; 861  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

  001fd	8b 45 f4	 mov	 eax, DWORD PTR _lcodes$1$[ebp]
  00200	8d 96 94 00 00
	00		 lea	 edx, DWORD PTR [esi+148]
  00206	48		 dec	 eax
  00207	8b ce		 mov	 ecx, esi
  00209	50		 push	 eax
  0020a	e8 00 00 00 00	 call	 _send_tree

; 862  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 863  : 
; 864  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  0020f	8b 45 08	 mov	 eax, DWORD PTR _dcodes$[ebp]
  00212	8d 96 88 09 00
	00		 lea	 edx, DWORD PTR [esi+2440]
  00218	48		 dec	 eax
  00219	8b ce		 mov	 ecx, esi
  0021b	50		 push	 eax
  0021c	e8 00 00 00 00	 call	 _send_tree
  00221	83 c4 08	 add	 esp, 8
  00224	5f		 pop	 edi
  00225	5e		 pop	 esi
  00226	5b		 pop	 ebx

; 865  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 866  : }

  00227	8b e5		 mov	 esp, ebp
  00229	5d		 pop	 ebp
  0022a	c3		 ret	 0
_send_all_trees ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _compress_block
_TEXT	SEGMENT
_lx$1$ = -28						; size = 4
tv1745 = -28						; size = 4
$T1 = -24						; size = 4
_extra$2$ = -24						; size = 4
_extra$1$ = -24						; size = 4
tv1759 = -24						; size = 4
tv1728 = -24						; size = 4
tv1685 = -24						; size = 4
$T2 = -20						; size = 4
tv1753 = -20						; size = 4
tv1637 = -20						; size = 4
_len$1$ = -16						; size = 4
_len$1$ = -16						; size = 4
tv1659 = -16						; size = 4
_s$1$ = -12						; size = 4
tv1742 = -8						; size = 4
tv1736 = -8						; size = 4
tv1734 = -8						; size = 4
_ltree$1$ = -4						; size = 4
_dtree$ = 8						; size = 4
_compress_block PROC					; COMDAT
; _s$ = ecx
; _ltree$ = edx

; 1080 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f2		 mov	 esi, edx
  0000a	8b c1		 mov	 eax, ecx

; 1081 :     unsigned dist;      /* distance of matched string */
; 1082 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1083 :     unsigned lx = 0;    /* running index in l_buf */

  0000c	33 d2		 xor	 edx, edx
  0000e	89 75 fc	 mov	 DWORD PTR _ltree$1$[ebp], esi
  00011	57		 push	 edi
  00012	89 45 f4	 mov	 DWORD PTR _s$1$[ebp], eax

; 1084 :     unsigned code;      /* the code to send */
; 1085 :     int extra;          /* number of extra bits to send */
; 1086 : 
; 1087 :     if (s->last_lit != 0) do {

  00015	8d 5a 10	 lea	 ebx, DWORD PTR [edx+16]
  00018	39 90 a0 16 00
	00		 cmp	 DWORD PTR [eax+5792], edx
  0001e	0f 84 81 03 00
	00		 je	 $LN3@compress_b
  00024	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@compress_b:

; 1088 :         dist = s->d_buf[lx];

  00030	8b 88 a4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5796]
  00036	0f b7 3c 51	 movzx	 edi, WORD PTR [ecx+edx*2]

; 1089 :         lc = s->l_buf[lx++];

  0003a	8b 88 98 16 00
	00		 mov	 ecx, DWORD PTR [eax+5784]
  00040	0f b6 1c 0a	 movzx	 ebx, BYTE PTR [edx+ecx]
  00044	42		 inc	 edx
  00045	89 55 e4	 mov	 DWORD PTR _lx$1$[ebp], edx

; 1090 :         if (dist == 0) {

  00048	85 ff		 test	 edi, edi
  0004a	0f 85 a3 00 00
	00		 jne	 $LN6@compress_b

; 1091 :             send_code(s, lc, ltree); /* send a literal byte */

  00050	8b 55 fc	 mov	 edx, DWORD PTR _ltree$1$[ebp]
  00053	0f b7 7c 9e 02	 movzx	 edi, WORD PTR [esi+ebx*4+2]
  00058	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  0005e	8b ce		 mov	 ecx, esi
  00060	0f b7 1c 9a	 movzx	 ebx, WORD PTR [edx+ebx*4]
  00064	66 8b d3	 mov	 dx, bx
  00067	66 d3 e2	 shl	 dx, cl
  0006a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0006f	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  00076	2b cf		 sub	 ecx, edi
  00078	0f b7 d2	 movzx	 edx, dx
  0007b	89 55 f8	 mov	 DWORD PTR tv1734[ebp], edx
  0007e	3b f1		 cmp	 esi, ecx
  00080	7e 56		 jle	 SHORT $LN8@compress_b
  00082	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00085	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  0008c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0008f	8b 45 f8	 mov	 eax, DWORD PTR tv1734[ebp]
  00092	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00095	8b 45 f4	 mov	 eax, DWORD PTR _s$1$[ebp]
  00098	ff 40 14	 inc	 DWORD PTR [eax+20]
  0009b	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0009e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000a1	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  000a7	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  000aa	b1 10		 mov	 cl, 16			; 00000010H
  000ac	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  000b2	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  000b8	83 c2 f0	 add	 edx, -16		; fffffff0H
  000bb	ff 40 14	 inc	 DWORD PTR [eax+20]
  000be	03 d7		 add	 edx, edi
  000c0	66 d3 eb	 shr	 bx, cl
  000c3	0f b7 cb	 movzx	 ecx, bx

; 1092 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1093 :         } else {

  000c6	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  000cd	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  000d3	e9 b6 02 00 00	 jmp	 $LN2@compress_b
$LN8@compress_b:

; 1091 :             send_code(s, lc, ltree); /* send a literal byte */

  000d8	8b 4d f8	 mov	 ecx, DWORD PTR tv1734[ebp]
  000db	8d 14 3e	 lea	 edx, DWORD PTR [esi+edi]
  000de	0f b7 c9	 movzx	 ecx, cx

; 1092 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1093 :         } else {

  000e1	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  000e8	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  000ee	e9 9b 02 00 00	 jmp	 $LN2@compress_b
$LN6@compress_b:

; 1094 :             /* Here, lc is the match length - MIN_MATCH */
; 1095 :             code = _length_code[lc];

  000f3	0f b6 8b 00 00
	00 00		 movzx	 ecx, BYTE PTR __length_code[ebx]

; 1096 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

  000fa	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  00101	89 55 e8	 mov	 DWORD PTR tv1759[ebp], edx
  00104	0f b7 94 32 06
	04 00 00	 movzx	 edx, WORD PTR [edx+esi+1030]
  0010c	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  00112	89 55 f0	 mov	 DWORD PTR _len$1$[ebp], edx
  00115	8b 55 fc	 mov	 edx, DWORD PTR _ltree$1$[ebp]
  00118	0f b7 94 8a 04
	04 00 00	 movzx	 edx, WORD PTR [edx+ecx*4+1028]
  00120	8b ca		 mov	 ecx, edx
  00122	89 4d ec	 mov	 DWORD PTR tv1637[ebp], ecx
  00125	8b ce		 mov	 ecx, esi
  00127	66 d3 e2	 shl	 dx, cl
  0012a	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  00131	0f b7 ca	 movzx	 ecx, dx
  00134	8b 55 f0	 mov	 edx, DWORD PTR _len$1$[ebp]
  00137	89 4d f8	 mov	 DWORD PTR tv1736[ebp], ecx
  0013a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0013f	2b ca		 sub	 ecx, edx
  00141	3b f1		 cmp	 esi, ecx
  00143	8b 4d f8	 mov	 ecx, DWORD PTR tv1736[ebp]
  00146	7e 4d		 jle	 SHORT $LN10@compress_b
  00148	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0014b	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  00152	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00155	8b 45 f8	 mov	 eax, DWORD PTR tv1736[ebp]
  00158	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0015b	8b 45 f4	 mov	 eax, DWORD PTR _s$1$[ebp]
  0015e	ff 40 14	 inc	 DWORD PTR [eax+20]
  00161	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00164	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00167	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0016d	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00170	b1 10		 mov	 cl, 16			; 00000010H
  00172	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00178	8b 55 ec	 mov	 edx, DWORD PTR tv1637[ebp]
  0017b	ff 40 14	 inc	 DWORD PTR [eax+20]
  0017e	66 d3 ea	 shr	 dx, cl
  00181	0f b7 ca	 movzx	 ecx, dx
  00184	8b 55 f0	 mov	 edx, DWORD PTR _len$1$[ebp]
  00187	83 c2 f0	 add	 edx, -16		; fffffff0H
  0018a	89 4d ec	 mov	 DWORD PTR $T2[ebp], ecx
  0018d	03 90 bc 16 00
	00		 add	 edx, DWORD PTR [eax+5820]
  00193	eb 05		 jmp	 SHORT $LN11@compress_b
$LN10@compress_b:
  00195	0f b7 c9	 movzx	 ecx, cx
  00198	03 d6		 add	 edx, esi
$LN11@compress_b:

; 1097 :             extra = extra_lbits[code];

  0019a	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  001a0	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  001a7	8b 4d e8	 mov	 ecx, DWORD PTR tv1759[ebp]
  001aa	8b b1 00 00 00
	00		 mov	 esi, DWORD PTR _extra_lbits[ecx]
  001b0	89 75 e8	 mov	 DWORD PTR _extra$1$[ebp], esi

; 1098 :             if (extra != 0) {

  001b3	85 f6		 test	 esi, esi
  001b5	0f 84 88 00 00
	00		 je	 $LN14@compress_b

; 1099 :                 lc -= base_length[code];

  001bb	2b 99 00 00 00
	00		 sub	 ebx, DWORD PTR _base_length[ecx]

; 1100 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  001c1	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001c6	0f b7 cb	 movzx	 ecx, bx
  001c9	2b d6		 sub	 edx, esi
  001cb	89 4d f0	 mov	 DWORD PTR tv1659[ebp], ecx
  001ce	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001d4	3b ca		 cmp	 ecx, edx
  001d6	7e 59		 jle	 SHORT $LN13@compress_b
  001d8	0f b7 90 b8 16
	00 00		 movzx	 edx, WORD PTR [eax+5816]
  001df	66 8b 5d f0	 mov	 bx, WORD PTR tv1659[ebp]
  001e3	66 d3 e3	 shl	 bx, cl
  001e6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001e9	66 0b da	 or	 bx, dx
  001ec	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001ef	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  001f6	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  001f9	ff 40 14	 inc	 DWORD PTR [eax+20]
  001fc	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  001ff	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00202	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  00208	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0020b	b1 10		 mov	 cl, 16			; 00000010H
  0020d	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00213	8b 55 f0	 mov	 edx, DWORD PTR tv1659[ebp]
  00216	ff 40 14	 inc	 DWORD PTR [eax+20]
  00219	66 d3 ea	 shr	 dx, cl
  0021c	8b 4d e8	 mov	 ecx, DWORD PTR _extra$1$[ebp]
  0021f	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00222	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00229	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  0022f	eb 12		 jmp	 SHORT $LN14@compress_b
$LN13@compress_b:
  00231	66 d3 e3	 shl	 bx, cl
  00234	66 09 98 b8 16
	00 00		 or	 WORD PTR [eax+5816], bx
  0023b	03 ce		 add	 ecx, esi
  0023d	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN14@compress_b:

; 1101 :             }
; 1102 :             dist--; /* dist is now the match distance - 1 */

  00243	4f		 dec	 edi

; 1103 :             code = d_code(dist);

  00244	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  0024a	73 08		 jae	 SHORT $LN23@compress_b
  0024c	8a 8f 00 00 00
	00		 mov	 cl, BYTE PTR __dist_code[edi]
  00252	eb 0b		 jmp	 SHORT $LN24@compress_b
$LN23@compress_b:
  00254	8b cf		 mov	 ecx, edi
  00256	c1 e9 07	 shr	 ecx, 7
  00259	8a 89 00 01 00
	00		 mov	 cl, BYTE PTR __dist_code[ecx+256]
$LN24@compress_b:

; 1104 :             Assert (code < D_CODES, "bad d_code");
; 1105 : 
; 1106 :             send_code(s, code, dtree);       /* send the distance code */

  0025f	8b 55 08	 mov	 edx, DWORD PTR _dtree$[ebp]
  00262	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  00268	0f b6 d9	 movzx	 ebx, cl
  0026b	c1 e3 02	 shl	 ebx, 2
  0026e	89 5d ec	 mov	 DWORD PTR tv1753[ebp], ebx
  00271	0f b7 4c 13 02	 movzx	 ecx, WORD PTR [ebx+edx+2]
  00276	0f b7 14 13	 movzx	 edx, WORD PTR [ebx+edx]
  0027a	89 4d f0	 mov	 DWORD PTR _len$1$[ebp], ecx
  0027d	8b ca		 mov	 ecx, edx
  0027f	89 4d e8	 mov	 DWORD PTR tv1685[ebp], ecx
  00282	8b ce		 mov	 ecx, esi
  00284	66 d3 e2	 shl	 dx, cl
  00287	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  0028e	0f b7 ca	 movzx	 ecx, dx
  00291	8b 55 f0	 mov	 edx, DWORD PTR _len$1$[ebp]
  00294	89 4d f8	 mov	 DWORD PTR tv1742[ebp], ecx
  00297	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0029c	2b ca		 sub	 ecx, edx
  0029e	3b f1		 cmp	 esi, ecx
  002a0	8b 4d f8	 mov	 ecx, DWORD PTR tv1742[ebp]
  002a3	7e 4d		 jle	 SHORT $LN15@compress_b
  002a5	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  002a8	8b 5d f8	 mov	 ebx, DWORD PTR tv1742[ebp]
  002ab	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  002b2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002b5	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  002b8	ff 40 14	 inc	 DWORD PTR [eax+20]
  002bb	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  002be	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  002c1	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  002c7	8b 5d ec	 mov	 ebx, DWORD PTR tv1753[ebp]
  002ca	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  002cd	b1 10		 mov	 cl, 16			; 00000010H
  002cf	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  002d5	8b 55 e8	 mov	 edx, DWORD PTR tv1685[ebp]
  002d8	ff 40 14	 inc	 DWORD PTR [eax+20]
  002db	66 d3 ea	 shr	 dx, cl
  002de	0f b7 ca	 movzx	 ecx, dx
  002e1	8b 55 f0	 mov	 edx, DWORD PTR _len$1$[ebp]
  002e4	83 c2 f0	 add	 edx, -16		; fffffff0H
  002e7	89 4d e8	 mov	 DWORD PTR $T1[ebp], ecx
  002ea	03 90 bc 16 00
	00		 add	 edx, DWORD PTR [eax+5820]
  002f0	eb 05		 jmp	 SHORT $LN16@compress_b
$LN15@compress_b:
  002f2	0f b7 c9	 movzx	 ecx, cx
  002f5	03 d6		 add	 edx, esi
$LN16@compress_b:

; 1107 :             extra = extra_dbits[code];

  002f7	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  002fd	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  00304	8b 9b 00 00 00
	00		 mov	 ebx, DWORD PTR _extra_dbits[ebx]
  0030a	89 5d e8	 mov	 DWORD PTR _extra$2$[ebp], ebx

; 1108 :             if (extra != 0) {

  0030d	85 db		 test	 ebx, ebx
  0030f	74 7d		 je	 SHORT $LN2@compress_b

; 1109 :                 dist -= base_dist[code];

  00311	8b 4d ec	 mov	 ecx, DWORD PTR tv1753[ebp]

; 1110 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  00314	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00319	0f b7 b0 b8 16
	00 00		 movzx	 esi, WORD PTR [eax+5816]
  00320	2b d3		 sub	 edx, ebx
  00322	2b b9 00 00 00
	00		 sub	 edi, DWORD PTR _base_dist[ecx]
  00328	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0032e	3b ca		 cmp	 ecx, edx
  00330	7e 47		 jle	 SHORT $LN18@compress_b
  00332	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00335	66 8b df	 mov	 bx, di
  00338	66 d3 e3	 shl	 bx, cl
  0033b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0033e	66 0b de	 or	 bx, si
  00341	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  00348	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  0034b	ff 40 14	 inc	 DWORD PTR [eax+20]
  0034e	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00351	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00354	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0035a	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0035d	b1 10		 mov	 cl, 16			; 00000010H
  0035f	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00365	ff 40 14	 inc	 DWORD PTR [eax+20]
  00368	66 d3 ef	 shr	 di, cl
  0036b	8b 4d e8	 mov	 ecx, DWORD PTR _extra$2$[ebp]
  0036e	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00371	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  00377	eb 0e		 jmp	 SHORT $LN28@compress_b
$LN18@compress_b:
  00379	66 d3 e7	 shl	 di, cl
  0037c	66 0b fe	 or	 di, si
  0037f	03 cb		 add	 ecx, ebx
  00381	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN28@compress_b:

; 1111 :             }
; 1112 :         } /* literal or match pair ? */
; 1113 : 
; 1114 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1115 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1116 :                "pendingBuf overflow");
; 1117 : 
; 1118 :     } while (lx < s->last_lit);

  00387	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
$LN2@compress_b:
  0038e	8b 55 e4	 mov	 edx, DWORD PTR _lx$1$[ebp]
  00391	8b 75 fc	 mov	 esi, DWORD PTR _ltree$1$[ebp]
  00394	3b 90 a0 16 00
	00		 cmp	 edx, DWORD PTR [eax+5792]
  0039a	0f 82 90 fc ff
	ff		 jb	 $LL4@compress_b
  003a0	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
$LN3@compress_b:

; 1119 : 
; 1120 :     send_code(s, END_BLOCK, ltree);

  003a5	0f b7 96 00 04
	00 00		 movzx	 edx, WORD PTR [esi+1024]
  003ac	0f b7 be 02 04
	00 00		 movzx	 edi, WORD PTR [esi+1026]
  003b3	8b f2		 mov	 esi, edx
  003b5	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  003bb	2b df		 sub	 ebx, edi
  003bd	66 d3 e2	 shl	 dx, cl
  003c0	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  003c7	0f b7 d2	 movzx	 edx, dx
  003ca	89 75 e8	 mov	 DWORD PTR tv1728[ebp], esi
  003cd	89 55 e4	 mov	 DWORD PTR tv1745[ebp], edx
  003d0	3b cb		 cmp	 ecx, ebx
  003d2	7e 3f		 jle	 SHORT $LN20@compress_b
  003d4	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003d7	8b 5d e4	 mov	 ebx, DWORD PTR tv1745[ebp]
  003da	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  003e1	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  003e4	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  003e7	ff 40 14	 inc	 DWORD PTR [eax+20]
  003ea	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  003ed	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  003f0	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  003f6	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  003f9	b1 10		 mov	 cl, 16			; 00000010H
  003fb	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00401	8b 55 e8	 mov	 edx, DWORD PTR tv1728[ebp]
  00404	ff 40 14	 inc	 DWORD PTR [eax+20]
  00407	66 d3 ea	 shr	 dx, cl
  0040a	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00410	83 c1 f0	 add	 ecx, -16		; fffffff0H
$LN20@compress_b:

; 1121 :     s->last_eob_len = ltree[END_BLOCK].Len;

  00413	03 cf		 add	 ecx, edi
  00415	0f b7 d2	 movzx	 edx, dx
  00418	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  0041e	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00425	8b 55 fc	 mov	 edx, DWORD PTR _ltree$1$[ebp]
  00428	5f		 pop	 edi
  00429	5e		 pop	 esi
  0042a	5b		 pop	 ebx
  0042b	0f b7 8a 02 04
	00 00		 movzx	 ecx, WORD PTR [edx+1026]
  00432	89 88 b4 16 00
	00		 mov	 DWORD PTR [eax+5812], ecx

; 1122 : }

  00438	8b e5		 mov	 esp, ebp
  0043a	5d		 pop	 ebp
  0043b	c3		 ret	 0
_compress_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _detect_data_type
_TEXT	SEGMENT
_detect_data_type PROC					; COMDAT
; _s$ = ecx

; 1139 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1140 :     /* black_mask is the bit mask of black-listed bytes
; 1141 :      * set bits 0..6, 14..25, and 28..31
; 1142 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1143 :      */
; 1144 :     unsigned long black_mask = 0xf3ffc07fUL;

  00004	b8 7f c0 ff f3	 mov	 eax, -201342849		; f3ffc07fH

; 1145 :     int n;
; 1146 : 
; 1147 :     /* Check for non-textual ("black-listed") bytes. */
; 1148 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  00009	33 f6		 xor	 esi, esi
  0000b	8d 97 94 00 00
	00		 lea	 edx, DWORD PTR [edi+148]
$LL4@detect_dat:

; 1149 :         if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))

  00011	a8 01		 test	 al, 1
  00013	74 06		 je	 SHORT $LN2@detect_dat
  00015	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  00019	75 47		 jne	 SHORT $LN15@detect_dat
$LN2@detect_dat:

; 1145 :     int n;
; 1146 : 
; 1147 :     /* Check for non-textual ("black-listed") bytes. */
; 1148 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  0001b	46		 inc	 esi
  0001c	d1 e8		 shr	 eax, 1
  0001e	83 c2 04	 add	 edx, 4
  00021	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  00024	7e eb		 jle	 SHORT $LL4@detect_dat

; 1150 :             return Z_BINARY;
; 1151 : 
; 1152 :     /* Check for textual ("white-listed") bytes. */
; 1153 :     if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
; 1154 :             || s->dyn_ltree[13].Freq != 0)

  00026	66 83 bf b8 00
	00 00 00	 cmp	 WORD PTR [edi+184], 0
  0002e	75 37		 jne	 SHORT $LN10@detect_dat
  00030	66 83 bf bc 00
	00 00 00	 cmp	 WORD PTR [edi+188], 0
  00038	75 2d		 jne	 SHORT $LN10@detect_dat
  0003a	66 83 bf c8 00
	00 00 00	 cmp	 WORD PTR [edi+200], 0
  00042	75 23		 jne	 SHORT $LN10@detect_dat

; 1156 :     for (n = 32; n < LITERALS; n++)

  00044	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00049	8d 87 14 01 00
	00		 lea	 eax, DWORD PTR [edi+276]
  0004f	90		 npad	 1
$LL7@detect_dat:

; 1157 :         if (s->dyn_ltree[n].Freq != 0)

  00050	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00054	75 11		 jne	 SHORT $LN10@detect_dat

; 1156 :     for (n = 32; n < LITERALS; n++)

  00056	41		 inc	 ecx
  00057	83 c0 04	 add	 eax, 4
  0005a	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00060	7c ee		 jl	 SHORT $LL7@detect_dat
$LN15@detect_dat:
  00062	5f		 pop	 edi

; 1158 :             return Z_TEXT;
; 1159 : 
; 1160 :     /* There are no "black-listed" or "white-listed" bytes:
; 1161 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1162 :      */
; 1163 :     return Z_BINARY;
; 1164 : }

  00063	33 c0		 xor	 eax, eax
  00065	5e		 pop	 esi
  00066	c3		 ret	 0
$LN10@detect_dat:
  00067	5f		 pop	 edi

; 1155 :         return Z_TEXT;

  00068	b8 01 00 00 00	 mov	 eax, 1

; 1158 :             return Z_TEXT;
; 1159 : 
; 1160 :     /* There are no "black-listed" or "white-listed" bytes:
; 1161 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1162 :      */
; 1163 :     return Z_BINARY;
; 1164 : }

  0006d	5e		 pop	 esi
  0006e	c3		 ret	 0
_detect_data_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _bi_reverse
_TEXT	SEGMENT
_bi_reverse PROC					; COMDAT
; _code$ = ecx
; _len$ = edx

; 1175 :     register unsigned res = 0;

  00000	33 c0		 xor	 eax, eax
  00002	56		 push	 esi
$LL4@bi_reverse:

; 1176 :     do {
; 1177 :         res |= code & 1;

  00003	8b f1		 mov	 esi, ecx

; 1178 :         code >>= 1, res <<= 1;
; 1179 :     } while (--len > 0);

  00005	4a		 dec	 edx
  00006	83 e6 01	 and	 esi, 1
  00009	d1 e9		 shr	 ecx, 1
  0000b	0b c6		 or	 eax, esi
  0000d	03 c0		 add	 eax, eax
  0000f	85 d2		 test	 edx, edx
  00011	7f f0		 jg	 SHORT $LL4@bi_reverse

; 1180 :     return res >> 1;

  00013	d1 e8		 shr	 eax, 1
  00015	5e		 pop	 esi

; 1181 : }

  00016	c3		 ret	 0
_bi_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _bi_flush
_TEXT	SEGMENT
_bi_flush PROC						; COMDAT
; _s$ = ecx

; 1188 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1189 :     if (s->bi_valid == 16) {

  00003	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00009	83 f8 10	 cmp	 eax, 16			; 00000010H
  0000c	75 37		 jne	 SHORT $LN2@bi_flush

; 1190 :         put_short(s, s->bi_buf);

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00014	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  0001b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0001e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00021	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00024	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00027	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  0002e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00031	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1191 :         s->bi_buf = 0;

  00034	33 c0		 xor	 eax, eax

; 1192 :         s->bi_valid = 0;

  00036	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax

; 1197 :     }
; 1198 : }

  0003c	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  00043	5e		 pop	 esi
  00044	c3		 ret	 0
$LN2@bi_flush:

; 1193 :     } else if (s->bi_valid >= 8) {

  00045	83 f8 08	 cmp	 eax, 8
  00048	7c 27		 jl	 SHORT $LN4@bi_flush

; 1194 :         put_byte(s, (Byte)s->bi_buf);

  0004a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0004d	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00050	8a 86 b8 16 00
	00		 mov	 al, BYTE PTR [esi+5816]
  00056	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1195 :         s->bi_buf >>= 8;

  00059	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  00060	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1196 :         s->bi_valid -= 8;

  00063	83 86 bc 16 00
	00 f8		 add	 DWORD PTR [esi+5820], -8 ; fffffff8H

; 1197 :     }
; 1198 : }

  0006a	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
$LN4@bi_flush:
  00071	5e		 pop	 esi
  00072	c3		 ret	 0
_bi_flush ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _bi_windup
_TEXT	SEGMENT
_bi_windup PROC						; COMDAT
; _s$ = ecx

; 1205 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1206 :     if (s->bi_valid > 8) {

  00003	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00009	83 f8 08	 cmp	 eax, 8
  0000c	7e 22		 jle	 SHORT $LN2@bi_windup

; 1207 :         put_short(s, s->bi_buf);

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00014	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  0001b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0001e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00021	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00024	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00027	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  0002e	eb 10		 jmp	 SHORT $LN6@bi_windup
$LN2@bi_windup:

; 1208 :     } else if (s->bi_valid > 0) {

  00030	85 c0		 test	 eax, eax
  00032	7e 12		 jle	 SHORT $LN4@bi_windup

; 1209 :         put_byte(s, (Byte)s->bi_buf);

  00034	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00037	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003a	8a 86 b8 16 00
	00		 mov	 al, BYTE PTR [esi+5816]
$LN6@bi_windup:

; 1210 :     }
; 1211 :     s->bi_buf = 0;

  00040	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00043	ff 46 14	 inc	 DWORD PTR [esi+20]
$LN4@bi_windup:
  00046	33 c0		 xor	 eax, eax
  00048	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax

; 1212 :     s->bi_valid = 0;

  0004f	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  00055	5e		 pop	 esi

; 1213 : #ifdef DEBUG
; 1214 :     s->bits_sent = (s->bits_sent+7) & ~7;
; 1215 : #endif
; 1216 : }

  00056	c3		 ret	 0
_bi_windup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _copy_block
_TEXT	SEGMENT
_len$ = 8						; size = 4
_header$dead$ = 12					; size = 4
_copy_block PROC					; COMDAT
; _s$ = ecx
; _buf$ = edx

; 1227 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b fa		 mov	 edi, edx
  00008	8b f1		 mov	 esi, ecx

; 1228 :     bi_windup(s);        /* align on byte boundary */

  0000a	e8 00 00 00 00	 call	 _bi_windup

; 1229 :     s->last_eob_len = 8; /* enough lookahead for inflate */
; 1230 : 
; 1231 :     if (header) {
; 1232 :         put_short(s, (ush)len);

  0000f	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00012	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00015	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  00018	c7 86 b4 16 00
	00 08 00 00 00	 mov	 DWORD PTR [esi+5812], 8
  00022	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  00025	ff 46 14	 inc	 DWORD PTR [esi+20]
  00028	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002e	0f b7 db	 movzx	 ebx, bx
  00031	8b cb		 mov	 ecx, ebx

; 1233 :         put_short(s, (ush)~len);

  00033	f7 d3		 not	 ebx
  00035	c1 e9 08	 shr	 ecx, 8
  00038	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0003b	ff 46 14	 inc	 DWORD PTR [esi+20]
  0003e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00041	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00044	8a 4d 08	 mov	 cl, BYTE PTR _len$[ebp]
  00047	f6 d1		 not	 cl
  00049	c1 eb 08	 shr	 ebx, 8
  0004c	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0004f	ff 46 14	 inc	 DWORD PTR [esi+20]
  00052	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00055	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 1234 : #ifdef DEBUG
; 1235 :         s->bits_sent += 2*16;
; 1236 : #endif
; 1237 :     }
; 1238 : #ifdef DEBUG
; 1239 :     s->bits_sent += (ulg)len<<3;
; 1240 : #endif
; 1241 :     while (len--) {

  00058	8b 55 08	 mov	 edx, DWORD PTR _len$[ebp]
  0005b	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  0005e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00061	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00064	85 d2		 test	 edx, edx
  00066	74 1f		 je	 SHORT $LN7@copy_block
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@copy_block:

; 1242 :         put_byte(s, *buf++);

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00073	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00076	8a 47 ff	 mov	 al, BYTE PTR [edi-1]
  00079	88 04 0b	 mov	 BYTE PTR [ebx+ecx], al
  0007c	ff 46 14	 inc	 DWORD PTR [esi+20]
  0007f	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00082	83 ea 01	 sub	 edx, 1
  00085	75 e9		 jne	 SHORT $LL2@copy_block
$LN7@copy_block:
  00087	5f		 pop	 edi

; 1243 :     }
; 1244 : }

  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
_copy_block ENDP
_TEXT	ENDS
END
