; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26730.0 

	TITLE	e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0O@BNNCBLEN@out?5of?5memory@		; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
EXTRN	__imp__malloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__lseek:PROC
EXTRN	__imp__open:PROC
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNNCBLEN@out?5of?5memory@
CONST	SEGMENT
??_C@_0O@BNNCBLEN@out?5of?5memory@ DB 'out of memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@
CONST	SEGMENT
??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@ DB '<fd:%d>', 00H	; `string'
PUBLIC	_gz_error
PUBLIC	_gzclearerr@4
PUBLIC	_gzerror@8
PUBLIC	_gzeof@4
PUBLIC	_gzoffset@4
PUBLIC	_gzoffset64@4
PUBLIC	_gztell@4
PUBLIC	_gztell64@4
PUBLIC	_gzseek@12
PUBLIC	_gzseek64@12
PUBLIC	_gzrewind@4
PUBLIC	_gzbuffer@8
PUBLIC	_gzdopen@8
PUBLIC	_gzopen@8
PUBLIC	_sprintf
PUBLIC	__vsprintf_l
PUBLIC	__vsnprintf_l
PUBLIC	___local_stdio_printf_options
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__Locale$dead$ = 12					; size = 4
__ArgList$ = 16						; size = 4
__vsnprintf_l PROC					; COMDAT
; __Buffer$ = ecx
; __BufferCount$ = edx

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	ff 75 10	 push	 DWORD PTR __ArgList$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 08	 push	 DWORD PTR __Format$[ebp]
  0000b	52		 push	 edx
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	83 c9 01	 or	 ecx, 1
  0001a	51		 push	 ecx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00021	83 c9 ff	 or	 ecx, -1
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH
  00027	85 c0		 test	 eax, eax
  00029	0f 48 c1	 cmovs	 eax, ecx

; 1395 :     }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Locale$dead$ = 8					; size = 4
__ArgList$ = 12						; size = 4
__vsprintf_l PROC					; COMDAT
; __Buffer$ = ecx
; __Format$ = edx

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	ff 75 0c	 push	 DWORD PTR __ArgList$[ebp]
  00006	6a 00		 push	 0
  00008	52		 push	 edx
  00009	6a ff		 push	 -1
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	ff 70 04	 push	 DWORD PTR [eax+4]
  00016	83 c9 01	 or	 ecx, 1
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00020	83 c9 ff	 or	 ecx, -1
  00023	83 c4 1c	 add	 esp, 28			; 0000001cH
  00026	85 c0		 test	 eax, eax
  00028	0f 48 c1	 cmovs	 eax, ecx

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1463 :         #pragma warning(pop)
; 1464 :     }

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gz_reset
_TEXT	SEGMENT
_gz_reset PROC						; COMDAT
; _state$ = ecx

; 73   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 74   :     if (state->mode == GZ_READ) {   /* for reading ... */

  00003	81 3e 4f 1c 00
	00		 cmp	 DWORD PTR [esi], 7247	; 00001c4fH
  00009	75 1c		 jne	 SHORT $LN2@gz_reset

; 75   :         state->have = 0;            /* no output data available */

  0000b	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 76   :         state->eof = 0;             /* not at end of file */

  00012	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 77   :         state->how = LOOK;          /* look for gzip header */

  00019	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0

; 78   :         state->direct = 1;          /* default for empty file */

  00020	c7 46 38 01 00
	00 00		 mov	 DWORD PTR [esi+56], 1
$LN2@gz_reset:

; 79   :     }
; 80   :     state->seek = 0;                /* no seek request pending */
; 81   :     gz_error(state, Z_OK, NULL);    /* clear error */

  00027	6a 00		 push	 0
  00029	33 d2		 xor	 edx, edx
  0002b	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  00032	e8 00 00 00 00	 call	 _gz_error
  00037	83 c4 04	 add	 esp, 4

; 82   :     state->pos = 0;                 /* no uncompressed data yet */

  0003a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 83   :     state->strm.avail_in = 0;       /* no input data yet */

  00041	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00048	5e		 pop	 esi

; 84   : }

  00049	c3		 ret	 0
_gz_reset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gz_open
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_gz_open PROC						; COMDAT
; _path$ = ecx
; _fd$ = edx

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 92   :     gz_statep state;
; 93   : 
; 94   :     /* allocate gzFile structure to return */
; 95   :     state = malloc(sizeof(gz_state));

  00006	68 8c 00 00 00	 push	 140			; 0000008cH
  0000b	8b f2		 mov	 esi, edx
  0000d	8b d9		 mov	 ebx, ecx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00015	8b f8		 mov	 edi, eax
  00017	83 c4 04	 add	 esp, 4

; 96   :     if (state == NULL)

  0001a	85 ff		 test	 edi, edi
  0001c	0f 84 95 01 00
	00		 je	 $LN42@gz_open

; 97   :         return NULL;
; 98   :     state->size = 0;            /* no buffers allocated yet */
; 99   :     state->want = GZBUFSIZE;    /* requested buffer size */
; 100  :     state->msg = NULL;          /* no error message yet */
; 101  : 
; 102  :     /* interpret mode */
; 103  :     state->mode = GZ_NONE;
; 104  :     state->level = Z_DEFAULT_COMPRESSION;
; 105  :     state->strategy = Z_DEFAULT_STRATEGY;
; 106  :     while (*mode) {

  00022	8b 55 08	 mov	 edx, DWORD PTR _mode$[ebp]
  00025	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0002c	c7 47 14 00 20
	00 00		 mov	 DWORD PTR [edi+20], 8192 ; 00002000H
  00033	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0
  0003a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00040	c7 47 3c ff ff
	ff ff		 mov	 DWORD PTR [edi+60], -1
  00047	c7 47 40 00 00
	00 00		 mov	 DWORD PTR [edi+64], 0
  0004e	8a 02		 mov	 al, BYTE PTR [edx]
  00050	84 c0		 test	 al, al
  00052	0f 84 55 01 00
	00		 je	 $LN39@gz_open
$LL2@gz_open:

; 107  :         if (*mode >= '0' && *mode <= '9')

  00058	0f be c8	 movsx	 ecx, al
  0005b	2c 30		 sub	 al, 48			; 00000030H
  0005d	3c 09		 cmp	 al, 9
  0005f	77 08		 ja	 SHORT $LN7@gz_open

; 108  :             state->level = *mode - '0';

  00061	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00064	89 47 3c	 mov	 DWORD PTR [edi+60], eax
  00067	eb 50		 jmp	 SHORT $LN18@gz_open
$LN7@gz_open:

; 109  :         else
; 110  :             switch (*mode) {

  00069	8d 41 d5	 lea	 eax, DWORD PTR [ecx-43]
  0006c	83 f8 4c	 cmp	 eax, 76			; 0000004cH
  0006f	77 48		 ja	 SHORT $LN18@gz_open
  00071	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN40@gz_open[eax]
  00078	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN44@gz_open[eax*4]
$LN9@gz_open:

; 111  :             case 'r':
; 112  :                 state->mode = GZ_READ;

  0007f	c7 07 4f 1c 00
	00		 mov	 DWORD PTR [edi], 7247	; 00001c4fH

; 113  :                 break;

  00085	eb 32		 jmp	 SHORT $LN18@gz_open
$LN10@gz_open:

; 114  : #ifndef NO_GZCOMPRESS
; 115  :             case 'w':
; 116  :                 state->mode = GZ_WRITE;

  00087	c7 07 b1 79 00
	00		 mov	 DWORD PTR [edi], 31153	; 000079b1H

; 117  :                 break;

  0008d	eb 2a		 jmp	 SHORT $LN18@gz_open
$LN11@gz_open:

; 118  :             case 'a':
; 119  :                 state->mode = GZ_APPEND;

  0008f	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1

; 120  :                 break;

  00095	eb 22		 jmp	 SHORT $LN18@gz_open
$LN14@gz_open:

; 121  : #endif
; 122  :             case '+':       /* can't read and write at the same time */
; 123  :                 free(state);
; 124  :                 return NULL;
; 125  :             case 'b':       /* ignore -- will request binary anyway */
; 126  :                 break;
; 127  :             case 'f':
; 128  :                 state->strategy = Z_FILTERED;

  00097	c7 47 40 01 00
	00 00		 mov	 DWORD PTR [edi+64], 1

; 129  :                 break;

  0009e	eb 19		 jmp	 SHORT $LN18@gz_open
$LN15@gz_open:

; 130  :             case 'h':
; 131  :                 state->strategy = Z_HUFFMAN_ONLY;

  000a0	c7 47 40 02 00
	00 00		 mov	 DWORD PTR [edi+64], 2

; 132  :                 break;

  000a7	eb 10		 jmp	 SHORT $LN18@gz_open
$LN16@gz_open:

; 133  :             case 'R':
; 134  :                 state->strategy = Z_RLE;

  000a9	c7 47 40 03 00
	00 00		 mov	 DWORD PTR [edi+64], 3

; 135  :                 break;

  000b0	eb 07		 jmp	 SHORT $LN18@gz_open
$LN17@gz_open:

; 136  :             case 'F':
; 137  :                 state->strategy = Z_FIXED;

  000b2	c7 47 40 04 00
	00 00		 mov	 DWORD PTR [edi+64], 4
$LN18@gz_open:

; 97   :         return NULL;
; 98   :     state->size = 0;            /* no buffers allocated yet */
; 99   :     state->want = GZBUFSIZE;    /* requested buffer size */
; 100  :     state->msg = NULL;          /* no error message yet */
; 101  : 
; 102  :     /* interpret mode */
; 103  :     state->mode = GZ_NONE;
; 104  :     state->level = Z_DEFAULT_COMPRESSION;
; 105  :     state->strategy = Z_DEFAULT_STRATEGY;
; 106  :     while (*mode) {

  000b9	8a 42 01	 mov	 al, BYTE PTR [edx+1]

; 138  :             default:        /* could consider as an error, but just ignore */
; 139  :                 ;
; 140  :             }
; 141  :         mode++;

  000bc	42		 inc	 edx
  000bd	84 c0		 test	 al, al
  000bf	75 97		 jne	 SHORT $LL2@gz_open

; 142  :     }
; 143  : 
; 144  :     /* must provide an "r", "w", or "a" */
; 145  :     if (state->mode == GZ_NONE) {

  000c1	83 3f 00	 cmp	 DWORD PTR [edi], 0
  000c4	0f 84 e3 00 00
	00		 je	 $LN39@gz_open

; 146  :         free(state);
; 147  :         return NULL;
; 148  :     }
; 149  : 
; 150  :     /* save the path name for error messages */
; 151  :     state->path = malloc(strlen(path) + 1);

  000ca	8b cb		 mov	 ecx, ebx
  000cc	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  000cf	90		 npad	 1
$LL41@gz_open:
  000d0	8a 01		 mov	 al, BYTE PTR [ecx]
  000d2	41		 inc	 ecx
  000d3	84 c0		 test	 al, al
  000d5	75 f9		 jne	 SHORT $LL41@gz_open
  000d7	2b ca		 sub	 ecx, edx
  000d9	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000dc	50		 push	 eax
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  000e3	8b c8		 mov	 ecx, eax
  000e5	83 c4 04	 add	 esp, 4
  000e8	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 152  :     if (state->path == NULL) {

  000eb	85 c9		 test	 ecx, ecx
  000ed	0f 84 ba 00 00
	00		 je	 $LN39@gz_open

; 154  :         return NULL;
; 155  :     }
; 156  :     strcpy(state->path, path);

  000f3	8b d3		 mov	 edx, ebx
$LL26@gz_open:
  000f5	8a 02		 mov	 al, BYTE PTR [edx]
  000f7	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  000fa	88 01		 mov	 BYTE PTR [ecx], al
  000fc	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000ff	84 c0		 test	 al, al
  00101	75 f2		 jne	 SHORT $LL26@gz_open

; 157  : 
; 158  :     /* open the file with the appropriate mode (or just use fd) */
; 159  :     state->fd = fd != -1 ? fd :

  00103	83 fe ff	 cmp	 esi, -1
  00106	75 38		 jne	 SHORT $LN30@gz_open
  00108	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0010a	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00110	75 04		 jne	 SHORT $LN27@gz_open
  00112	33 c0		 xor	 eax, eax
  00114	eb 13		 jmp	 SHORT $LN28@gz_open
$LN27@gz_open:
  00116	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H
  0011c	b8 09 01 00 00	 mov	 eax, 265		; 00000109H
  00121	ba 01 03 00 00	 mov	 edx, 769		; 00000301H
  00126	0f 44 c2	 cmove	 eax, edx
$LN28@gz_open:
  00129	68 b6 01 00 00	 push	 438			; 000001b6H
  0012e	0d 00 80 00 00	 or	 eax, 32768		; 00008000H
  00133	50		 push	 eax
  00134	53		 push	 ebx
  00135	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__open
  0013b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013e	8b f0		 mov	 esi, eax
$LN30@gz_open:
  00140	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 160  :         open(path,
; 161  : #ifdef O_LARGEFILE
; 162  :             O_LARGEFILE |
; 163  : #endif
; 164  : #ifdef O_BINARY
; 165  :             O_BINARY |
; 166  : #endif
; 167  :             (state->mode == GZ_READ ?
; 168  :                 O_RDONLY :
; 169  :                 (O_WRONLY | O_CREAT | (
; 170  :                     state->mode == GZ_WRITE ?
; 171  :                         O_TRUNC :
; 172  :                         O_APPEND))),
; 173  :             0666);
; 174  :     if (state->fd == -1) {

  00143	83 fe ff	 cmp	 esi, -1
  00146	75 18		 jne	 SHORT $LN21@gz_open

; 175  :         free(state->path);

  00148	ff 77 08	 push	 DWORD PTR [edi+8]
  0014b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__free
  00151	ff d6		 call	 esi

; 176  :         free(state);

  00153	57		 push	 edi
  00154	ff d6		 call	 esi
  00156	83 c4 08	 add	 esp, 8

; 193  : }

  00159	33 c0		 xor	 eax, eax
  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	5b		 pop	 ebx
  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
$LN21@gz_open:

; 177  :         return NULL;
; 178  :     }
; 179  :     if (state->mode == GZ_APPEND)

  00160	8b 07		 mov	 eax, DWORD PTR [edi]
  00162	83 f8 01	 cmp	 eax, 1
  00165	75 14		 jne	 SHORT $LN22@gz_open

; 186  :     }
; 187  : 
; 188  :     /* initialize stream */
; 189  :     gz_reset(state);

  00167	8b cf		 mov	 ecx, edi
  00169	c7 07 b1 79 00
	00		 mov	 DWORD PTR [edi], 31153	; 000079b1H
  0016f	e8 00 00 00 00	 call	 _gz_reset

; 190  : 
; 191  :     /* return stream */
; 192  :     return (gzFile)state;

  00174	8b c7		 mov	 eax, edi
  00176	5f		 pop	 edi

; 193  : }

  00177	5e		 pop	 esi
  00178	5b		 pop	 ebx
  00179	5d		 pop	 ebp
  0017a	c3		 ret	 0
$LN22@gz_open:

; 180  :         state->mode = GZ_WRITE;         /* simplify later checks */
; 181  : 
; 182  :     /* save the current position for rewinding (only if reading) */
; 183  :     if (state->mode == GZ_READ) {

  0017b	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00180	75 1d		 jne	 SHORT $LN24@gz_open

; 184  :         state->start = LSEEK(state->fd, 0, SEEK_CUR);

  00182	6a 01		 push	 1
  00184	6a 00		 push	 0
  00186	56		 push	 esi
  00187	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lseek
  0018d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00190	89 47 2c	 mov	 DWORD PTR [edi+44], eax

; 185  :         if (state->start == -1) state->start = 0;

  00193	83 f8 ff	 cmp	 eax, -1
  00196	75 07		 jne	 SHORT $LN24@gz_open
  00198	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
$LN24@gz_open:

; 186  :     }
; 187  : 
; 188  :     /* initialize stream */
; 189  :     gz_reset(state);

  0019f	8b cf		 mov	 ecx, edi
  001a1	e8 00 00 00 00	 call	 _gz_reset

; 190  : 
; 191  :     /* return stream */
; 192  :     return (gzFile)state;

  001a6	8b c7		 mov	 eax, edi
  001a8	5f		 pop	 edi

; 193  : }

  001a9	5e		 pop	 esi
  001aa	5b		 pop	 ebx
  001ab	5d		 pop	 ebp
  001ac	c3		 ret	 0
$LN39@gz_open:

; 153  :         free(state);

  001ad	57		 push	 edi
  001ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  001b4	83 c4 04	 add	 esp, 4
$LN42@gz_open:

; 193  : }

  001b7	5f		 pop	 edi
  001b8	5e		 pop	 esi
  001b9	33 c0		 xor	 eax, eax
  001bb	5b		 pop	 ebx
  001bc	5d		 pop	 ebp
  001bd	c3		 ret	 0
  001be	66 90		 npad	 2
$LN44@gz_open:
  001c0	00 00 00 00	 DD	 $LN39@gz_open
  001c4	00 00 00 00	 DD	 $LN17@gz_open
  001c8	00 00 00 00	 DD	 $LN16@gz_open
  001cc	00 00 00 00	 DD	 $LN11@gz_open
  001d0	00 00 00 00	 DD	 $LN14@gz_open
  001d4	00 00 00 00	 DD	 $LN15@gz_open
  001d8	00 00 00 00	 DD	 $LN9@gz_open
  001dc	00 00 00 00	 DD	 $LN10@gz_open
  001e0	00 00 00 00	 DD	 $LN18@gz_open
$LN40@gz_open:
  001e4	00		 DB	 0
  001e5	08		 DB	 8
  001e6	08		 DB	 8
  001e7	08		 DB	 8
  001e8	08		 DB	 8
  001e9	08		 DB	 8
  001ea	08		 DB	 8
  001eb	08		 DB	 8
  001ec	08		 DB	 8
  001ed	08		 DB	 8
  001ee	08		 DB	 8
  001ef	08		 DB	 8
  001f0	08		 DB	 8
  001f1	08		 DB	 8
  001f2	08		 DB	 8
  001f3	08		 DB	 8
  001f4	08		 DB	 8
  001f5	08		 DB	 8
  001f6	08		 DB	 8
  001f7	08		 DB	 8
  001f8	08		 DB	 8
  001f9	08		 DB	 8
  001fa	08		 DB	 8
  001fb	08		 DB	 8
  001fc	08		 DB	 8
  001fd	08		 DB	 8
  001fe	08		 DB	 8
  001ff	01		 DB	 1
  00200	08		 DB	 8
  00201	08		 DB	 8
  00202	08		 DB	 8
  00203	08		 DB	 8
  00204	08		 DB	 8
  00205	08		 DB	 8
  00206	08		 DB	 8
  00207	08		 DB	 8
  00208	08		 DB	 8
  00209	08		 DB	 8
  0020a	08		 DB	 8
  0020b	02		 DB	 2
  0020c	08		 DB	 8
  0020d	08		 DB	 8
  0020e	08		 DB	 8
  0020f	08		 DB	 8
  00210	08		 DB	 8
  00211	08		 DB	 8
  00212	08		 DB	 8
  00213	08		 DB	 8
  00214	08		 DB	 8
  00215	08		 DB	 8
  00216	08		 DB	 8
  00217	08		 DB	 8
  00218	08		 DB	 8
  00219	08		 DB	 8
  0021a	03		 DB	 3
  0021b	08		 DB	 8
  0021c	08		 DB	 8
  0021d	08		 DB	 8
  0021e	08		 DB	 8
  0021f	04		 DB	 4
  00220	08		 DB	 8
  00221	05		 DB	 5
  00222	08		 DB	 8
  00223	08		 DB	 8
  00224	08		 DB	 8
  00225	08		 DB	 8
  00226	08		 DB	 8
  00227	08		 DB	 8
  00228	08		 DB	 8
  00229	08		 DB	 8
  0022a	08		 DB	 8
  0022b	06		 DB	 6
  0022c	08		 DB	 8
  0022d	08		 DB	 8
  0022e	08		 DB	 8
  0022f	08		 DB	 8
  00230	07		 DB	 7
_gz_open ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gzopen@8
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen@8 PROC						; COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  :     return gz_open(path, -1, mode);

  00003	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00009	83 ca ff	 or	 edx, -1
  0000c	e8 00 00 00 00	 call	 _gz_open
  00011	83 c4 04	 add	 esp, 4

; 201  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
_gzopen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gzdopen@8
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzdopen@8 PROC						; COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 216  :     char *path;         /* identifier for error messages */
; 217  :     gzFile gz;
; 218  : 
; 219  :     if (fd == -1 || (path = malloc(7 + 3 * sizeof(int))) == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _fd$[ebp]
  00007	57		 push	 edi
  00008	83 fe ff	 cmp	 esi, -1
  0000b	74 3d		 je	 SHORT $LN3@gzdopen
  0000d	6a 13		 push	 19			; 00000013H
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00015	8b f8		 mov	 edi, eax
  00017	83 c4 04	 add	 esp, 4
  0001a	85 ff		 test	 edi, edi
  0001c	74 2c		 je	 SHORT $LN3@gzdopen

; 221  :     sprintf(path, "<fd:%d>", fd);   /* for debugging */

  0001e	56		 push	 esi
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 _sprintf

; 222  :     gz = gz_open(path, fd, mode);

  0002a	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  0002d	8b d6		 mov	 edx, esi
  0002f	8b cf		 mov	 ecx, edi
  00031	e8 00 00 00 00	 call	 _gz_open

; 223  :     free(path);

  00036	57		 push	 edi
  00037	8b f0		 mov	 esi, eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0003f	83 c4 14	 add	 esp, 20			; 00000014H

; 224  :     return gz;

  00042	8b c6		 mov	 eax, esi
  00044	5f		 pop	 edi

; 225  : }

  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
$LN3@gzdopen:
  0004a	5f		 pop	 edi

; 220  :         return NULL;

  0004b	33 c0		 xor	 eax, eax

; 225  : }

  0004d	5e		 pop	 esi
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
_gzdopen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gzbuffer@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_size$ = 12						; size = 4
_gzbuffer@8 PROC					; COMDAT

; 231  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 232  :     gz_statep state;
; 233  : 
; 234  :     /* get internal structure and check integrity */
; 235  :     if (file == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 28		 je	 SHORT $LN7@gzbuffer

; 236  :         return -1;
; 237  :     state = (gz_statep)file;
; 238  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00012	74 08		 je	 SHORT $LN3@gzbuffer
  00014	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H
  0001a	75 16		 jne	 SHORT $LN7@gzbuffer
$LN3@gzbuffer:

; 239  :         return -1;
; 240  : 
; 241  :     /* make sure we haven't already allocated memory */
; 242  :     if (state->size != 0)

  0001c	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00020	75 10		 jne	 SHORT $LN7@gzbuffer

; 243  :         return -1;
; 244  : 
; 245  :     /* check and set requested size */
; 246  :     if (size == 0)

  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  00025	85 c9		 test	 ecx, ecx
  00027	74 09		 je	 SHORT $LN7@gzbuffer

; 248  :     state->want = size;

  00029	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 249  :     return 0;

  0002c	33 c0		 xor	 eax, eax

; 250  : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
$LN7@gzbuffer:

; 247  :         return -1;

  00032	83 c8 ff	 or	 eax, -1

; 250  : }

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
_gzbuffer@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gzrewind@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzrewind@4 PROC					; COMDAT

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 256  :     gz_statep state;
; 257  : 
; 258  :     /* get internal structure */
; 259  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 32		 je	 SHORT $LN4@gzrewind

; 260  :         return -1;
; 261  :     state = (gz_statep)file;
; 262  : 
; 263  :     /* check that we're reading and that there's no error */
; 264  :     if (state->mode != GZ_READ || state->err != Z_OK)

  0000b	81 3e 4f 1c 00
	00		 cmp	 DWORD PTR [esi], 7247	; 00001c4fH
  00011	75 2a		 jne	 SHORT $LN4@gzrewind
  00013	83 7e 4c 00	 cmp	 DWORD PTR [esi+76], 0
  00017	75 24		 jne	 SHORT $LN4@gzrewind

; 266  : 
; 267  :     /* back up and start over */
; 268  :     if (LSEEK(state->fd, state->start, SEEK_SET) == -1)

  00019	6a 00		 push	 0
  0001b	ff 76 2c	 push	 DWORD PTR [esi+44]
  0001e	ff 76 04	 push	 DWORD PTR [esi+4]
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lseek
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002a	83 f8 ff	 cmp	 eax, -1
  0002d	74 0e		 je	 SHORT $LN4@gzrewind

; 269  :         return -1;
; 270  :     gz_reset(state);

  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 _gz_reset

; 271  :     return 0;

  00036	33 c0		 xor	 eax, eax
  00038	5e		 pop	 esi

; 272  : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
$LN4@gzrewind:

; 265  :         return -1;

  0003d	83 c8 ff	 or	 eax, -1
  00040	5e		 pop	 esi

; 272  : }

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
_gzrewind@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gzseek64@12
_TEXT	SEGMENT
_whence$ = 8						; size = 4
_gzseek64@12 PROC					; COMDAT
; _file$ = ecx
; _offset$ = edx

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi
  00007	8b fa		 mov	 edi, edx

; 280  :     unsigned n;
; 281  :     z_off64_t ret;
; 282  :     gz_statep state;
; 283  : 
; 284  :     /* get internal structure and check integrity */
; 285  :     if (file == NULL)

  00009	85 f6		 test	 esi, esi
  0000b	0f 84 0e 01 00
	00		 je	 $LN26@gzseek64

; 286  :         return -1;
; 287  :     state = (gz_statep)file;
; 288  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00019	74 0c		 je	 SHORT $LN24@gzseek64
  0001b	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H
  00021	0f 85 f8 00 00
	00		 jne	 $LN26@gzseek64
$LN24@gzseek64:

; 289  :         return -1;
; 290  : 
; 291  :     /* check that there's no error */
; 292  :     if (state->err != Z_OK)

  00027	83 7e 4c 00	 cmp	 DWORD PTR [esi+76], 0
  0002b	0f 85 ee 00 00
	00		 jne	 $LN26@gzseek64

; 293  :         return -1;
; 294  : 
; 295  :     /* can only seek from start or relative to current position */
; 296  :     if (whence != SEEK_SET && whence != SEEK_CUR)

  00031	8b 45 08	 mov	 eax, DWORD PTR _whence$[ebp]
  00034	85 c0		 test	 eax, eax
  00036	74 14		 je	 SHORT $LN23@gzseek64
  00038	83 f8 01	 cmp	 eax, 1
  0003b	0f 85 de 00 00
	00		 jne	 $LN26@gzseek64

; 302  :     else if (state->seek)

  00041	83 7e 48 00	 cmp	 DWORD PTR [esi+72], 0
  00045	74 08		 je	 SHORT $LN8@gzseek64

; 303  :         offset += state->skip;

  00047	03 7e 44	 add	 edi, DWORD PTR [esi+68]
  0004a	eb 03		 jmp	 SHORT $LN8@gzseek64
$LN23@gzseek64:

; 297  :         return -1;
; 298  : 
; 299  :     /* normalize offset to a SEEK_CUR specification */
; 300  :     if (whence == SEEK_SET)
; 301  :         offset -= state->pos;

  0004c	2b 7e 0c	 sub	 edi, DWORD PTR [esi+12]
$LN8@gzseek64:

; 304  :     state->seek = 0;

  0004f	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0

; 305  : 
; 306  :     /* if within raw area while reading, just go there */
; 307  :     if (state->mode == GZ_READ && state->how == COPY &&

  00056	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  0005c	75 65		 jne	 SHORT $LN9@gzseek64
  0005e	83 7e 34 01	 cmp	 DWORD PTR [esi+52], 1
  00062	75 5f		 jne	 SHORT $LN9@gzseek64
  00064	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00067	03 c7		 add	 eax, edi
  00069	3b 46 30	 cmp	 eax, DWORD PTR [esi+48]
  0006c	7c 55		 jl	 SHORT $LN9@gzseek64

; 308  :         state->pos + offset >= state->raw) {
; 309  :         ret = LSEEK(state->fd, offset - state->have, SEEK_CUR);

  0006e	8b c7		 mov	 eax, edi
  00070	2b 46 24	 sub	 eax, DWORD PTR [esi+36]
  00073	6a 01		 push	 1
  00075	50		 push	 eax
  00076	ff 76 04	 push	 DWORD PTR [esi+4]
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lseek
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 310  :         if (ret == -1)

  00082	83 f8 ff	 cmp	 eax, -1
  00085	0f 84 94 00 00
	00		 je	 $LN26@gzseek64

; 311  :             return -1;
; 312  :         state->have = 0;
; 313  :         state->eof = 0;
; 314  :         state->seek = 0;
; 315  :         gz_error(state, Z_OK, NULL);

  0008b	6a 00		 push	 0
  0008d	33 d2		 xor	 edx, edx
  0008f	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  00096	8b ce		 mov	 ecx, esi
  00098	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  0009f	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  000a6	e8 00 00 00 00	 call	 _gz_error

; 316  :         state->strm.avail_in = 0;
; 317  :         state->pos += offset;

  000ab	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000ae	83 c4 04	 add	 esp, 4
  000b1	03 c7		 add	 eax, edi
  000b3	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  000ba	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000bd	5f		 pop	 edi

; 348  : }

  000be	5e		 pop	 esi
  000bf	5d		 pop	 ebp
  000c0	c2 04 00	 ret	 4
$LN9@gzseek64:

; 318  :         return state->pos;
; 319  :     }
; 320  : 
; 321  :     /* calculate skip amount, rewinding if needed for back seek when reading */
; 322  :     if (offset < 0) {

  000c3	85 ff		 test	 edi, edi
  000c5	79 18		 jns	 SHORT $LN21@gzseek64

; 323  :         if (state->mode != GZ_READ)         /* writing -- can't go backwards */

  000c7	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  000cd	75 50		 jne	 SHORT $LN26@gzseek64

; 324  :             return -1;
; 325  :         offset += state->pos;

  000cf	03 7e 0c	 add	 edi, DWORD PTR [esi+12]

; 326  :         if (offset < 0)                     /* before start of file! */

  000d2	78 4b		 js	 SHORT $LN26@gzseek64

; 327  :             return -1;
; 328  :         if (gzrewind(file) == -1)           /* rewind, then skip to offset */

  000d4	56		 push	 esi
  000d5	e8 00 00 00 00	 call	 _gzrewind@4
  000da	83 f8 ff	 cmp	 eax, -1
  000dd	74 40		 je	 SHORT $LN26@gzseek64
$LN21@gzseek64:

; 330  :     }
; 331  : 
; 332  :     /* if reading, skip what's in output buffer (one less gzgetc() check) */
; 333  :     if (state->mode == GZ_READ) {

  000df	81 3e 4f 1c 00
	00		 cmp	 DWORD PTR [esi], 7247	; 00001c4fH
  000e5	75 1f		 jne	 SHORT $LN25@gzseek64

; 334  :         n = GT_OFF(state->have) || (z_off64_t)state->have > offset ?

  000e7	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000ea	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000ef	77 06		 ja	 SHORT $LN19@gzseek64
  000f1	8b c8		 mov	 ecx, eax
  000f3	3b c7		 cmp	 eax, edi
  000f5	7e 02		 jle	 SHORT $LN20@gzseek64
$LN19@gzseek64:
  000f7	8b cf		 mov	 ecx, edi
$LN20@gzseek64:

; 335  :             (unsigned)offset : state->have;
; 336  :         state->have -= n;
; 337  :         state->next += n;

  000f9	01 4e 20	 add	 DWORD PTR [esi+32], ecx
  000fc	2b c1		 sub	 eax, ecx

; 338  :         state->pos += n;

  000fe	01 4e 0c	 add	 DWORD PTR [esi+12], ecx

; 339  :         offset -= n;

  00101	2b f9		 sub	 edi, ecx
  00103	89 46 24	 mov	 DWORD PTR [esi+36], eax
$LN25@gzseek64:

; 340  :     }
; 341  : 
; 342  :     /* request skip (if not zero) */
; 343  :     if (offset) {

  00106	85 ff		 test	 edi, edi
  00108	74 0a		 je	 SHORT $LN16@gzseek64

; 344  :         state->seek = 1;

  0010a	c7 46 48 01 00
	00 00		 mov	 DWORD PTR [esi+72], 1

; 345  :         state->skip = offset;

  00111	89 7e 44	 mov	 DWORD PTR [esi+68], edi
$LN16@gzseek64:

; 346  :     }
; 347  :     return state->pos + offset;

  00114	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00117	03 c7		 add	 eax, edi
  00119	5f		 pop	 edi

; 348  : }

  0011a	5e		 pop	 esi
  0011b	5d		 pop	 ebp
  0011c	c2 04 00	 ret	 4
$LN26@gzseek64:
  0011f	5f		 pop	 edi

; 329  :             return -1;

  00120	83 c8 ff	 or	 eax, -1

; 348  : }

  00123	5e		 pop	 esi
  00124	5d		 pop	 ebp
  00125	c2 04 00	 ret	 4
_gzseek64@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gzseek@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_offset$ = 12						; size = 4
_whence$ = 16						; size = 4
_gzseek@12 PROC						; COMDAT

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 356  :     z_off64_t ret;
; 357  : 
; 358  :     ret = gzseek64(file, (z_off64_t)offset, whence);

  00003	ff 75 10	 push	 DWORD PTR _whence$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR _offset$[ebp]
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000c	e8 00 00 00 00	 call	 _gzseek64@12

; 359  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;
; 360  : }

  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
_gzseek@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gztell64@4
_TEXT	SEGMENT
_gztell64@4 PROC					; COMDAT
; _file$ = ecx

; 366  :     gz_statep state;
; 367  : 
; 368  :     /* get internal structure and check integrity */
; 369  :     if (file == NULL)

  00000	85 c9		 test	 ecx, ecx
  00002	74 27		 je	 SHORT $LN7@gztell64

; 370  :         return -1;
; 371  :     state = (gz_statep)file;
; 372  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0000b	74 07		 je	 SHORT $LN3@gztell64
  0000d	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00012	75 17		 jne	 SHORT $LN7@gztell64
$LN3@gztell64:

; 374  : 
; 375  :     /* return position */
; 376  :     return state->pos + (state->seek ? state->skip : 0);

  00014	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  00018	74 09		 je	 SHORT $LN5@gztell64
  0001a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001d	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00020	03 c2		 add	 eax, edx

; 377  : }

  00022	c3		 ret	 0
$LN5@gztell64:

; 374  : 
; 375  :     /* return position */
; 376  :     return state->pos + (state->seek ? state->skip : 0);

  00023	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00026	33 d2		 xor	 edx, edx
  00028	03 c2		 add	 eax, edx

; 377  : }

  0002a	c3		 ret	 0
$LN7@gztell64:

; 373  :         return -1;

  0002b	83 c8 ff	 or	 eax, -1

; 377  : }

  0002e	c3		 ret	 0
_gztell64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gztell@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gztell@4 PROC						; COMDAT

; 382  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 383  :     z_off64_t ret;
; 384  : 
; 385  :     ret = gztell64(file);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	e8 00 00 00 00	 call	 _gztell64@4

; 386  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;
; 387  : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
_gztell@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gzoffset64@4
_TEXT	SEGMENT
_gzoffset64@4 PROC					; COMDAT
; _file$ = ecx

; 392  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 393  :     z_off64_t offset;
; 394  :     gz_statep state;
; 395  : 
; 396  :     /* get internal structure and check integrity */
; 397  :     if (file == NULL)

  00003	85 f6		 test	 esi, esi
  00005	74 32		 je	 SHORT $LN7@gzoffset64

; 398  :         return -1;
; 399  :     state = (gz_statep)file;
; 400  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0000e	74 07		 je	 SHORT $LN3@gzoffset64
  00010	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00015	75 22		 jne	 SHORT $LN7@gzoffset64
$LN3@gzoffset64:

; 401  :         return -1;
; 402  : 
; 403  :     /* compute and return effective offset in file */
; 404  :     offset = LSEEK(state->fd, 0, SEEK_CUR);

  00017	6a 01		 push	 1
  00019	6a 00		 push	 0
  0001b	ff 76 04	 push	 DWORD PTR [esi+4]
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lseek
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 405  :     if (offset == -1)

  00027	83 f8 ff	 cmp	 eax, -1
  0002a	74 0d		 je	 SHORT $LN7@gzoffset64

; 407  :     if (state->mode == GZ_READ)             /* reading */

  0002c	81 3e 4f 1c 00
	00		 cmp	 DWORD PTR [esi], 7247	; 00001c4fH
  00032	75 08		 jne	 SHORT $LN1@gzoffset64

; 408  :         offset -= state->strm.avail_in;     /* don't count buffered input */

  00034	2b 46 58	 sub	 eax, DWORD PTR [esi+88]
  00037	5e		 pop	 esi

; 409  :     return offset;
; 410  : }

  00038	c3		 ret	 0
$LN7@gzoffset64:

; 406  :         return -1;

  00039	83 c8 ff	 or	 eax, -1
$LN1@gzoffset64:
  0003c	5e		 pop	 esi

; 409  :     return offset;
; 410  : }

  0003d	c3		 ret	 0
_gzoffset64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gzoffset@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzoffset@4 PROC					; COMDAT

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 416  :     z_off64_t ret;
; 417  : 
; 418  :     ret = gzoffset64(file);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	e8 00 00 00 00	 call	 _gzoffset64@4

; 419  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;
; 420  : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
_gzoffset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gzeof@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzeof@4 PROC						; COMDAT

; 425  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 426  :     gz_statep state;
; 427  : 
; 428  :     /* get internal structure and check integrity */
; 429  :     if (file == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 25		 je	 SHORT $LN10@gzeof

; 430  :         return 0;
; 431  :     state = (gz_statep)file;
; 432  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00012	75 1b		 jne	 SHORT $LN10@gzeof

; 433  :         return 0;
; 434  : 
; 435  :     /* return end-of-file state */
; 436  :     return state->mode == GZ_READ ?

  00014	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00018	74 15		 je	 SHORT $LN10@gzeof
  0001a	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  0001e	75 0f		 jne	 SHORT $LN10@gzeof
  00020	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00024	75 09		 jne	 SHORT $LN10@gzeof
  00026	b8 01 00 00 00	 mov	 eax, 1

; 437  :         (state->eof && state->strm.avail_in == 0 && state->have == 0) : 0;
; 438  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN10@gzeof:
  0002f	33 c0		 xor	 eax, eax
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
_gzeof@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gzerror@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_errnum$ = 12						; size = 4
_gzerror@8 PROC						; COMDAT

; 444  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 445  :     gz_statep state;
; 446  : 
; 447  :     /* get internal structure and check integrity */
; 448  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2d		 je	 SHORT $LN8@gzerror

; 449  :         return NULL;
; 450  :     state = (gz_statep)file;
; 451  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00011	74 07		 je	 SHORT $LN3@gzerror
  00013	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00018	75 1d		 jne	 SHORT $LN8@gzerror
$LN3@gzerror:

; 453  : 
; 454  :     /* return error information */
; 455  :     if (errnum != NULL)

  0001a	8b 55 0c	 mov	 edx, DWORD PTR _errnum$[ebp]
  0001d	85 d2		 test	 edx, edx
  0001f	74 05		 je	 SHORT $LN4@gzerror

; 456  :         *errnum = state->err;

  00021	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00024	89 02		 mov	 DWORD PTR [edx], eax
$LN4@gzerror:

; 457  :     return state->msg == NULL ? "" : state->msg;

  00026	8b 49 50	 mov	 ecx, DWORD PTR [ecx+80]
  00029	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  0002e	85 c9		 test	 ecx, ecx
  00030	0f 45 c1	 cmovne	 eax, ecx

; 458  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN8@gzerror:

; 452  :         return NULL;

  00037	33 c0		 xor	 eax, eax

; 458  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
_gzerror@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gzclearerr@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclearerr@4 PROC					; COMDAT

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 464  :     gz_statep state;
; 465  : 
; 466  :     /* get internal structure and check integrity */
; 467  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 33		 je	 SHORT $LN1@gzclearerr

; 468  :         return;
; 469  :     state = (gz_statep)file;
; 470  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00011	74 17		 je	 SHORT $LN6@gzclearerr
  00013	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00018	75 23		 jne	 SHORT $LN1@gzclearerr

; 471  :         return;
; 472  : 
; 473  :     /* clear error and end-of-file */
; 474  :     if (state->mode == GZ_READ)
; 475  :         state->eof = 0;
; 476  :     gz_error(state, Z_OK, NULL);

  0001a	6a 00		 push	 0
  0001c	33 d2		 xor	 edx, edx
  0001e	e8 00 00 00 00	 call	 _gz_error
  00023	83 c4 04	 add	 esp, 4

; 477  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN6@gzclearerr:

; 471  :         return;
; 472  : 
; 473  :     /* clear error and end-of-file */
; 474  :     if (state->mode == GZ_READ)
; 475  :         state->eof = 0;
; 476  :     gz_error(state, Z_OK, NULL);

  0002a	6a 00		 push	 0
  0002c	33 d2		 xor	 edx, edx
  0002e	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  00035	e8 00 00 00 00	 call	 _gz_error
  0003a	83 c4 04	 add	 esp, 4
$LN1@gzclearerr:

; 477  : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
_gzclearerr@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\gzlib.c
;	COMDAT _gz_error
_TEXT	SEGMENT
_msg$ = 8						; size = 4
_gz_error PROC						; COMDAT
; _state$ = ecx
; _err$ = edx

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b f2		 mov	 esi, edx

; 490  :     /* free previously allocated message and clear */
; 491  :     if (state->msg != NULL) {

  0000a	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  0000d	85 c0		 test	 eax, eax
  0000f	74 17		 je	 SHORT $LN2@gz_error

; 492  :         if (state->err != Z_MEM_ERROR)

  00011	83 7f 4c fc	 cmp	 DWORD PTR [edi+76], -4	; fffffffcH
  00015	74 0a		 je	 SHORT $LN3@gz_error

; 493  :             free(state->msg);

  00017	50		 push	 eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0001e	83 c4 04	 add	 esp, 4
$LN3@gz_error:

; 494  :         state->msg = NULL;

  00021	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0
$LN2@gz_error:

; 495  :     }
; 496  : 
; 497  :     /* set error code, and if no message, then done */
; 498  :     state->err = err;
; 499  :     if (msg == NULL)

  00028	8b 5d 08	 mov	 ebx, DWORD PTR _msg$[ebp]
  0002b	89 77 4c	 mov	 DWORD PTR [edi+76], esi
  0002e	85 db		 test	 ebx, ebx
  00030	0f 84 c0 00 00
	00		 je	 $LN1@gz_error

; 500  :         return;
; 501  : 
; 502  :     /* for an out of memory error, save as static string */
; 503  :     if (err == Z_MEM_ERROR) {

  00036	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00039	75 08		 jne	 SHORT $LN5@gz_error

; 504  :         state->msg = (char *)msg;

  0003b	89 5f 50	 mov	 DWORD PTR [edi+80], ebx
  0003e	5f		 pop	 edi

; 517  :     return;
; 518  : }

  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN5@gz_error:

; 505  :         return;
; 506  :     }
; 507  : 
; 508  :     /* construct error message with path */
; 509  :     if ((state->msg = malloc(strlen(state->path) + strlen(msg) + 3)) == NULL) {

  00043	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00046	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL12@gz_error:
  00050	8a 01		 mov	 al, BYTE PTR [ecx]
  00052	41		 inc	 ecx
  00053	84 c0		 test	 al, al
  00055	75 f9		 jne	 SHORT $LL12@gz_error
  00057	2b ca		 sub	 ecx, edx
  00059	8b d3		 mov	 edx, ebx
  0005b	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
  0005e	66 90		 npad	 2
$LL13@gz_error:
  00060	8a 02		 mov	 al, BYTE PTR [edx]
  00062	42		 inc	 edx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL13@gz_error
  00067	2b d6		 sub	 edx, esi
  00069	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0006c	03 c2		 add	 eax, edx
  0006e	50		 push	 eax
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00075	8b c8		 mov	 ecx, eax
  00077	83 c4 04	 add	 esp, 4
  0007a	89 4f 50	 mov	 DWORD PTR [edi+80], ecx
  0007d	85 c9		 test	 ecx, ecx
  0007f	75 13		 jne	 SHORT $LN6@gz_error

; 510  :         state->err = Z_MEM_ERROR;

  00081	c7 47 4c fc ff
	ff ff		 mov	 DWORD PTR [edi+76], -4	; fffffffcH

; 511  :         state->msg = (char *)"out of memory";

  00088	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory@
  0008f	5f		 pop	 edi

; 517  :     return;
; 518  : }

  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
$LN6@gz_error:

; 512  :         return;
; 513  :     }
; 514  :     strcpy(state->msg, state->path);

  00094	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
$LL8@gz_error:
  00097	8a 02		 mov	 al, BYTE PTR [edx]
  00099	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0009c	88 01		 mov	 BYTE PTR [ecx], al
  0009e	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000a1	84 c0		 test	 al, al
  000a3	75 f2		 jne	 SHORT $LL8@gz_error

; 515  :     strcat(state->msg, ": ");

  000a5	8b 4f 50	 mov	 ecx, DWORD PTR [edi+80]
  000a8	49		 dec	 ecx
  000a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL14@gz_error:
  000b0	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  000b3	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000b6	84 c0		 test	 al, al
  000b8	75 f6		 jne	 SHORT $LL14@gz_error
  000ba	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02LMMGGCAJ@?3?5@

; 516  :     strcat(state->msg, msg);

  000c0	8b f3		 mov	 esi, ebx
  000c2	66 89 01	 mov	 WORD PTR [ecx], ax
  000c5	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_02LMMGGCAJ@?3?5@+2
  000ca	88 41 02	 mov	 BYTE PTR [ecx+2], al
  000cd	0f 1f 00	 npad	 3
$LL15@gz_error:
  000d0	8a 03		 mov	 al, BYTE PTR [ebx]
  000d2	43		 inc	 ebx
  000d3	84 c0		 test	 al, al
  000d5	75 f9		 jne	 SHORT $LL15@gz_error
  000d7	8b 7f 50	 mov	 edi, DWORD PTR [edi+80]
  000da	2b de		 sub	 ebx, esi
  000dc	4f		 dec	 edi
  000dd	0f 1f 00	 npad	 3
$LL16@gz_error:
  000e0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  000e3	47		 inc	 edi
  000e4	84 c0		 test	 al, al
  000e6	75 f8		 jne	 SHORT $LL16@gz_error
  000e8	8b cb		 mov	 ecx, ebx
  000ea	c1 e9 02	 shr	 ecx, 2
  000ed	f3 a5		 rep movsd
  000ef	8b cb		 mov	 ecx, ebx
  000f1	83 e1 03	 and	 ecx, 3
  000f4	f3 a4		 rep movsb
$LN1@gz_error:

; 517  :     return;
; 518  : }

  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	5d		 pop	 ebp
  000fa	c3		 ret	 0
_gz_error ENDP
_TEXT	ENDS
END
