; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26730.0 

	TITLE	e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_01JOAMLHOP@?9@				; `string'
EXTRN	__imp___time64:PROC
EXTRN	__imp__rand:PROC
EXTRN	__imp__srand:PROC
;	COMDAT ??_C@_01JOAMLHOP@?9@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9@ DB '-', 00H			; `string'
PUBLIC	_zipClose@8
PUBLIC	_Write_GlobalComment
PUBLIC	_Write_EndOfCentralDirectoryRecord
PUBLIC	_Write_Zip64EndOfCentralDirectoryRecord
PUBLIC	_Write_Zip64EndOfCentralDirectoryLocator
PUBLIC	_zipCloseFileInZip@4
PUBLIC	_zipCloseFileInZipRaw64@16
PUBLIC	_zipCloseFileInZipRaw@12
PUBLIC	_zipWriteInFileInZip@12
PUBLIC	_zipOpenNewFileInZip@40
PUBLIC	_zipOpenNewFileInZip64@44
PUBLIC	_zipOpenNewFileInZip2_64@48
PUBLIC	_zipOpenNewFileInZip2@44
PUBLIC	_zipOpenNewFileInZip3_64@68
PUBLIC	_zipOpenNewFileInZip3@64
PUBLIC	_zipOpenNewFileInZip4_64@76
PUBLIC	_Write_LocalFileHeader
PUBLIC	_zipOpen64@8
PUBLIC	_zipOpen@8
PUBLIC	_zipOpen2_64@16
PUBLIC	_zipOpen2@16
PUBLIC	_zipOpen3@16
PUBLIC	_LoadCentralDirectoryRecord
?calls@?1??crypthead@@9@9 DD 01H DUP (?)		; `crypthead'::`2'::calls
_BSS	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
_time	PROC						; COMDAT
; __Time$dead$ = ecx

; 536  :             return _time64(_Time);

  00000	6a 00		 push	 0
  00002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  00008	83 c4 04	 add	 esp, 4

; 537  :         }

  0000b	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\crypt.h
;	COMDAT _decrypt_byte
_TEXT	SEGMENT
_decrypt_byte PROC					; COMDAT
; _pkeys$ = ecx
; _pcrc_32_tab$dead$ = edx

; 37   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 38   :                      * unpredictable manner on 16-bit systems; not a problem
; 39   :                      * with any known compiler so far, though */
; 40   : 
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	81 e1 fd ff 00
	00		 and	 ecx, 65533		; 0000fffdH
  00009	83 c9 02	 or	 ecx, 2

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  0000c	8b c1		 mov	 eax, ecx
  0000e	83 f0 01	 xor	 eax, 1
  00011	0f af c1	 imul	 eax, ecx
  00014	c1 e8 08	 shr	 eax, 8
  00017	0f b6 c0	 movzx	 eax, al

; 43   : }

  0001a	c3		 ret	 0
_decrypt_byte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\crypt.h
;	COMDAT _update_keys
_TEXT	SEGMENT
_pkeys$1$ = -4						; size = 4
_c$ = 8							; size = 4
_update_keys PROC					; COMDAT
; _pkeys$ = ecx
; _pcrc_32_tab$ = edx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b da		 mov	 ebx, edx
  00007	8b d1		 mov	 edx, ecx
  00009	56		 push	 esi
  0000a	89 55 fc	 mov	 DWORD PTR _pkeys$1$[ebp], edx

; 50   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  0000d	8b 32		 mov	 esi, DWORD PTR [edx]
  0000f	8b c6		 mov	 eax, esi
  00011	33 45 08	 xor	 eax, DWORD PTR _c$[ebp]
  00014	0f b6 c0	 movzx	 eax, al
  00017	c1 ee 08	 shr	 esi, 8
  0001a	8b 04 83	 mov	 eax, DWORD PTR [ebx+eax*4]
  0001d	33 c6		 xor	 eax, esi
  0001f	89 02		 mov	 DWORD PTR [edx], eax

; 51   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;

  00021	0f b6 c0	 movzx	 eax, al

; 52   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;

  00024	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00027	69 c8 05 84 08
	08		 imul	 ecx, eax, 134775813

; 53   :     {
; 54   :       register int keyshift = (int)((*(pkeys+1)) >> 24);
; 55   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _pkeys$1$[ebp]

; 56   :     }
; 57   :     return c;

  00030	5e		 pop	 esi
  00031	41		 inc	 ecx
  00032	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00035	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00038	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0003b	33 ca		 xor	 ecx, edx
  0003d	c1 ea 08	 shr	 edx, 8
  00040	0f b6 c9	 movzx	 ecx, cl
  00043	33 14 8b	 xor	 edx, DWORD PTR [ebx+ecx*4]
  00046	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00049	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  0004c	5b		 pop	 ebx

; 58   : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_update_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\crypt.h
;	COMDAT _init_keys
_TEXT	SEGMENT
_pcrc_32_tab$ = 8					; size = 4
_init_keys PROC						; COMDAT
; _passwd$ = ecx
; _pkeys$ = edx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b fa		 mov	 edi, edx
  00007	8b f1		 mov	 esi, ecx

; 67   :     *(pkeys+0) = 305419896L;

  00009	c7 07 78 56 34
	12		 mov	 DWORD PTR [edi], 305419896 ; 12345678H

; 68   :     *(pkeys+1) = 591751049L;

  0000f	c7 47 04 89 67
	45 23		 mov	 DWORD PTR [edi+4], 591751049 ; 23456789H

; 69   :     *(pkeys+2) = 878082192L;

  00016	c7 47 08 90 78
	56 34		 mov	 DWORD PTR [edi+8], 878082192 ; 34567890H

; 70   :     while (*passwd != '\0') {

  0001d	8a 06		 mov	 al, BYTE PTR [esi]
  0001f	84 c0		 test	 al, al
  00021	74 1f		 je	 SHORT $LN3@init_keys
  00023	53		 push	 ebx
  00024	8b 5d 08	 mov	 ebx, DWORD PTR _pcrc_32_tab$[ebp]
$LL2@init_keys:

; 71   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  00027	0f be c0	 movsx	 eax, al
  0002a	8b d3		 mov	 edx, ebx
  0002c	50		 push	 eax
  0002d	8b cf		 mov	 ecx, edi
  0002f	e8 00 00 00 00	 call	 _update_keys
  00034	8a 46 01	 mov	 al, BYTE PTR [esi+1]

; 72   :         passwd++;

  00037	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  0003a	83 c4 04	 add	 esp, 4
  0003d	84 c0		 test	 al, al
  0003f	75 e6		 jne	 SHORT $LL2@init_keys
  00041	5b		 pop	 ebx
$LN3@init_keys:
  00042	5f		 pop	 edi

; 73   :     }
; 74   : }

  00043	5e		 pop	 esi
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
_init_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\crypt.h
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\time.h
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\crypt.h
;	COMDAT _crypthead
_TEXT	SEGMENT
_header$ = -28						; size = 10
tv325 = -16						; size = 4
_t$2$ = -16						; size = 4
_passwd$1$ = -16					; size = 4
tv330 = -12						; size = 4
tv326 = -12						; size = 4
_buf$1$ = -8						; size = 4
tv318 = -1						; size = 1
_bufSize$dead$ = 8					; size = 4
_pkeys$ = 12						; size = 4
_pcrc_32_tab$ = 16					; size = 4
_crcForCrypting$ = 20					; size = 4
_crypthead PROC						; COMDAT
; _passwd$ = ecx
; _buf$ = edx

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 97   :     int n;                       /* index in random header */
; 98   :     int t;                       /* temporary */
; 99   :     int c;                       /* random byte */
; 100  :     unsigned char header[RAND_HEAD_LEN-2]; /* random header */
; 101  :     static unsigned calls = 0;   /* ensure different random header each time */
; 102  : 
; 103  :     if (bufSize<RAND_HEAD_LEN)
; 104  :       return 0;
; 105  : 
; 106  :     /* First generate RAND_HEAD_LEN-2 random bytes. We encrypt the
; 107  :      * output of rand() to get less predictability, since rand() is
; 108  :      * often poorly implemented.
; 109  :      */
; 110  :     if (++calls == 1)

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?calls@?1??crypthead@@9@9
  0000b	53		 push	 ebx
  0000c	40		 inc	 eax
  0000d	89 55 f8	 mov	 DWORD PTR _buf$1$[ebp], edx
  00010	a3 00 00 00 00	 mov	 DWORD PTR ?calls@?1??crypthead@@9@9, eax
  00015	8b d9		 mov	 ebx, ecx
  00017	89 5d f0	 mov	 DWORD PTR _passwd$1$[ebp], ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	83 f8 01	 cmp	 eax, 1
  0001f	75 17		 jne	 SHORT $LN9@crypthead
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\time.h

; 536  :             return _time64(_Time);

  00021	6a 00		 push	 0
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\crypt.h

; 112  :         srand((unsigned)(time(NULL) ^ ZCR_SEED2));

  00029	35 4e e6 40 bb	 xor	 eax, -1153374642	; bb40e64eH
  0002e	50		 push	 eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__srand
  00035	83 c4 08	 add	 esp, 8
$LN9@crypthead:

; 113  :     }
; 114  :     init_keys(passwd, pkeys, pcrc_32_tab);

  00038	ff 75 10	 push	 DWORD PTR _pcrc_32_tab$[ebp]
  0003b	8b 7d 0c	 mov	 edi, DWORD PTR _pkeys$[ebp]
  0003e	8b cb		 mov	 ecx, ebx
  00040	8b d7		 mov	 edx, edi
  00042	e8 00 00 00 00	 call	 _init_keys
  00047	83 c4 04	 add	 esp, 4
  0004a	33 f6		 xor	 esi, esi
  0004c	0f 1f 40 00	 npad	 4
$LL4@crypthead:

; 115  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)
; 116  :     {
; 117  :         c = (rand() >> 7) & 0xff;

  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00056	c1 f8 07	 sar	 eax, 7

; 118  :         header[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, c, t);

  00059	8b cf		 mov	 ecx, edi
  0005b	0f b6 d0	 movzx	 edx, al
  0005e	89 55 f4	 mov	 DWORD PTR tv330[ebp], edx
  00061	e8 00 00 00 00	 call	 _decrypt_byte
  00066	52		 push	 edx
  00067	8b 55 10	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  0006a	8b cf		 mov	 ecx, edi
  0006c	8b d8		 mov	 ebx, eax
  0006e	e8 00 00 00 00	 call	 _update_keys
  00073	8b 45 f4	 mov	 eax, DWORD PTR tv330[ebp]
  00076	83 c4 04	 add	 esp, 4
  00079	32 c3		 xor	 al, bl
  0007b	88 44 35 e4	 mov	 BYTE PTR _header$[ebp+esi], al
  0007f	46		 inc	 esi
  00080	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00083	7c cb		 jl	 SHORT $LL4@crypthead

; 119  :     }
; 120  :     /* Encrypt random header (last two bytes is high word of crc) */
; 121  :     init_keys(passwd, pkeys, pcrc_32_tab);

  00085	ff 75 10	 push	 DWORD PTR _pcrc_32_tab$[ebp]
  00088	8b 4d f0	 mov	 ecx, DWORD PTR _passwd$1$[ebp]
  0008b	8b d7		 mov	 edx, edi
  0008d	e8 00 00 00 00	 call	 _init_keys
  00092	8b 75 f8	 mov	 esi, DWORD PTR _buf$1$[ebp]
  00095	8d 55 e4	 lea	 edx, DWORD PTR _header$[ebp]
  00098	83 c4 04	 add	 esp, 4
  0009b	c7 45 f4 0a 00
	00 00		 mov	 DWORD PTR tv326[ebp], 10 ; 0000000aH
  000a2	2b d6		 sub	 edx, esi
  000a4	89 55 f0	 mov	 DWORD PTR tv325[ebp], edx
$LL7@crypthead:

; 122  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)
; 123  :     {
; 124  :         buf[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, header[n], t);

  000a7	8b cf		 mov	 ecx, edi
  000a9	e8 00 00 00 00	 call	 _decrypt_byte
  000ae	8b d8		 mov	 ebx, eax
  000b0	8a 04 32	 mov	 al, BYTE PTR [edx+esi]
  000b3	8b 55 10	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  000b6	0f b6 c8	 movzx	 ecx, al
  000b9	51		 push	 ecx
  000ba	8b cf		 mov	 ecx, edi
  000bc	88 45 ff	 mov	 BYTE PTR tv318[ebp], al
  000bf	e8 00 00 00 00	 call	 _update_keys
  000c4	8a 45 ff	 mov	 al, BYTE PTR tv318[ebp]
  000c7	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  000ca	8b 55 f0	 mov	 edx, DWORD PTR tv325[ebp]
  000cd	32 c3		 xor	 al, bl
  000cf	83 c4 04	 add	 esp, 4
  000d2	88 46 ff	 mov	 BYTE PTR [esi-1], al
  000d5	83 6d f4 01	 sub	 DWORD PTR tv326[ebp], 1
  000d9	75 cc		 jne	 SHORT $LL7@crypthead

; 125  :     }
; 126  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 16) & 0xff, t);

  000db	8b cf		 mov	 ecx, edi
  000dd	e8 00 00 00 00	 call	 _decrypt_byte
  000e2	8b 75 14	 mov	 esi, DWORD PTR _crcForCrypting$[ebp]
  000e5	8b de		 mov	 ebx, esi
  000e7	8b 55 10	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  000ea	c1 eb 10	 shr	 ebx, 16			; 00000010H
  000ed	0f b6 cb	 movzx	 ecx, bl
  000f0	51		 push	 ecx
  000f1	8b cf		 mov	 ecx, edi
  000f3	89 45 f0	 mov	 DWORD PTR _t$2$[ebp], eax
  000f6	e8 00 00 00 00	 call	 _update_keys
  000fb	8b 45 f8	 mov	 eax, DWORD PTR _buf$1$[ebp]

; 127  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 24) & 0xff, t);

  000fe	8b cf		 mov	 ecx, edi
  00100	32 5d f0	 xor	 bl, BYTE PTR _t$2$[ebp]
  00103	88 58 0a	 mov	 BYTE PTR [eax+10], bl
  00106	e8 00 00 00 00	 call	 _decrypt_byte
  0010b	8b 55 10	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  0010e	8b cf		 mov	 ecx, edi
  00110	c1 ee 18	 shr	 esi, 24			; 00000018H
  00113	8b d8		 mov	 ebx, eax
  00115	56		 push	 esi
  00116	e8 00 00 00 00	 call	 _update_keys
  0011b	8b 4d f8	 mov	 ecx, DWORD PTR _buf$1$[ebp]
  0011e	83 c4 08	 add	 esp, 8
  00121	8b c6		 mov	 eax, esi
  00123	32 c3		 xor	 al, bl

; 128  :     return n;

  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	88 41 0b	 mov	 BYTE PTR [ecx+11], al
  0012a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0012f	5b		 pop	 ebx

; 129  : }

  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c3		 ret	 0
_crypthead ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _allocate_new_datablock
_TEXT	SEGMENT
_allocate_new_datablock PROC				; COMDAT

; 191  :     linkedlist_datablock_internal* ldi;
; 192  :     ldi = (linkedlist_datablock_internal*)

  00000	68 00 10 00 00	 push	 4096			; 00001000H
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0000b	83 c4 04	 add	 esp, 4

; 193  :                  ALLOC(sizeof(linkedlist_datablock_internal));
; 194  :     if (ldi!=NULL)

  0000e	85 c0		 test	 eax, eax
  00010	74 14		 je	 SHORT $LN2@allocate_n

; 195  :     {
; 196  :         ldi->next_datablock = NULL ;

  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 197  :         ldi->filled_in_this_block = 0 ;

  00018	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 198  :         ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;

  0001f	c7 40 04 f0 0f
	00 00		 mov	 DWORD PTR [eax+4], 4080	; 00000ff0H
$LN2@allocate_n:

; 199  :     }
; 200  :     return ldi;
; 201  : }

  00026	c3		 ret	 0
_allocate_new_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _free_datablock
_TEXT	SEGMENT
_free_datablock PROC					; COMDAT
; _ldi$ = ecx

; 205  :     while (ldi!=NULL)

  00000	85 c9		 test	 ecx, ecx
  00002	74 1c		 je	 SHORT $LN3@free_datab
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__free
  0000c	0f 1f 40 00	 npad	 4
$LL2@free_datab:

; 206  :     {
; 207  :         linkedlist_datablock_internal* ldinext = ldi->next_datablock;

  00010	8b 31		 mov	 esi, DWORD PTR [ecx]

; 208  :         TRYFREE(ldi);

  00012	51		 push	 ecx
  00013	ff d7		 call	 edi
  00015	83 c4 04	 add	 esp, 4

; 209  :         ldi = ldinext;

  00018	8b ce		 mov	 ecx, esi
  0001a	85 f6		 test	 esi, esi
  0001c	75 f2		 jne	 SHORT $LL2@free_datab
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
$LN3@free_datab:

; 210  :     }
; 211  : }

  00020	c3		 ret	 0
_free_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _init_linkedlist
_TEXT	SEGMENT
_init_linkedlist PROC					; COMDAT
; _ll$ = ecx

; 215  :     ll->first_block = ll->last_block = NULL;

  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00007	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 216  : }

  0000d	c3		 ret	 0
_init_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _free_linkedlist
_TEXT	SEGMENT
_free_linkedlist PROC					; COMDAT
; _ll$ = ecx

; 219  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 220  :     free_datablock(ll->first_block);

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	e8 00 00 00 00	 call	 _free_datablock

; 221  :     ll->first_block = ll->last_block = NULL;

  0000a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00017	5e		 pop	 esi

; 222  : }

  00018	c3		 ret	 0
_free_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _add_data_in_datablock
_TEXT	SEGMENT
_ll$1$ = -8						; size = 4
_from_copy$1$ = -4					; size = 4
_len$ = 8						; size = 4
_add_data_in_datablock PROC				; COMDAT
; _ll$ = ecx
; _buf$ = edx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	89 55 fc	 mov	 DWORD PTR _from_copy$1$[ebp], edx
  0000e	89 7d f8	 mov	 DWORD PTR _ll$1$[ebp], edi

; 227  :     linkedlist_datablock_internal* ldi;
; 228  :     const unsigned char* from_copy;
; 229  : 
; 230  :     if (ll==NULL)

  00011	85 ff		 test	 edi, edi
  00013	0f 84 8f 00 00
	00		 je	 $LN17@add_data_i

; 231  :         return ZIP_INTERNALERROR;
; 232  : 
; 233  :     if (ll->last_block == NULL)

  00019	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0001c	85 f6		 test	 esi, esi
  0001e	75 10		 jne	 SHORT $LN9@add_data_i

; 234  :     {
; 235  :         ll->first_block = ll->last_block = allocate_new_datablock();

  00020	e8 00 00 00 00	 call	 _allocate_new_datablock
  00025	8b f0		 mov	 esi, eax
  00027	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0002a	89 37		 mov	 DWORD PTR [edi], esi

; 236  :         if (ll->first_block == NULL)

  0002c	85 f6		 test	 esi, esi
  0002e	74 78		 je	 SHORT $LN17@add_data_i
$LN9@add_data_i:

; 237  :             return ZIP_INTERNALERROR;
; 238  :     }
; 239  : 
; 240  :     ldi = ll->last_block;
; 241  :     from_copy = (unsigned char*)buf;
; 242  : 
; 243  :     while (len>0)

  00030	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  00033	85 db		 test	 ebx, ebx
  00035	74 68		 je	 SHORT $LN3@add_data_i
$LL2@add_data_i:

; 244  :     {
; 245  :         uInt copy_this;
; 246  :         uInt i;
; 247  :         unsigned char* to_copy;
; 248  : 
; 249  :         if (ldi->avail_in_this_block==0)

  00037	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0003b	75 10		 jne	 SHORT $LN10@add_data_i

; 250  :         {
; 251  :             ldi->next_datablock = allocate_new_datablock();

  0003d	e8 00 00 00 00	 call	 _allocate_new_datablock
  00042	89 06		 mov	 DWORD PTR [esi], eax

; 252  :             if (ldi->next_datablock == NULL)

  00044	85 c0		 test	 eax, eax
  00046	74 60		 je	 SHORT $LN17@add_data_i

; 253  :                 return ZIP_INTERNALERROR;
; 254  :             ldi = ldi->next_datablock ;

  00048	8b f0		 mov	 esi, eax

; 255  :             ll->last_block = ldi;

  0004a	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN10@add_data_i:

; 256  :         }
; 257  : 
; 258  :         if (ldi->avail_in_this_block < len)

  0004d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 259  :             copy_this = (uInt)ldi->avail_in_this_block;
; 260  :         else
; 261  :             copy_this = (uInt)len;
; 262  : 
; 263  :         to_copy = &(ldi->data[ldi->filled_in_this_block]);

  00050	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00053	3b cb		 cmp	 ecx, ebx
  00055	8b f9		 mov	 edi, ecx
  00057	0f 43 fb	 cmovae	 edi, ebx
  0005a	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  0005d	03 c3		 add	 eax, ebx
  0005f	33 d2		 xor	 edx, edx

; 264  : 
; 265  :         for (i=0;i<copy_this;i++)

  00061	85 ff		 test	 edi, edi
  00063	74 1f		 je	 SHORT $LN5@add_data_i

; 256  :         }
; 257  : 
; 258  :         if (ldi->avail_in_this_block < len)

  00065	8b 5d fc	 mov	 ebx, DWORD PTR _from_copy$1$[ebp]
  00068	2b d8		 sub	 ebx, eax
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL20@add_data_i:

; 266  :             *(to_copy+i)=*(from_copy+i);

  00070	8a 0c 03	 mov	 cl, BYTE PTR [ebx+eax]
  00073	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00076	42		 inc	 edx
  00077	88 48 ff	 mov	 BYTE PTR [eax-1], cl
  0007a	3b d7		 cmp	 edx, edi
  0007c	72 f2		 jb	 SHORT $LL20@add_data_i
  0007e	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  00081	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN5@add_data_i:

; 267  : 
; 268  :         ldi->filled_in_this_block += copy_this;
; 269  :         ldi->avail_in_this_block -= copy_this;
; 270  :         from_copy += copy_this ;

  00084	01 7d fc	 add	 DWORD PTR _from_copy$1$[ebp], edi
  00087	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]

; 271  :         len -= copy_this;

  0008a	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  0008d	2b cf		 sub	 ecx, edi
  0008f	2b df		 sub	 ebx, edi
  00091	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00094	8b 7d f8	 mov	 edi, DWORD PTR _ll$1$[ebp]
  00097	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0009a	89 5d 08	 mov	 DWORD PTR _len$[ebp], ebx
  0009d	75 98		 jne	 SHORT $LL2@add_data_i
$LN3@add_data_i:
  0009f	5f		 pop	 edi

; 272  :     }
; 273  :     return ZIP_OK;
; 274  : }

  000a0	5e		 pop	 esi
  000a1	33 c0		 xor	 eax, eax
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
$LN17@add_data_i:
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
_add_data_in_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zip64local_putValue
_TEXT	SEGMENT
_filestream$1$ = -8					; size = 4
_pzlib_filefunc_def$1$ = -4				; size = 4
_buf$ = 8						; size = 8
_x$ = 8							; size = 8
_nbByte$ = 16						; size = 4
_zip64local_putValue PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 288  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 289  :     unsigned char buf[8];
; 290  :     int n;
; 291  :     for (n = 0; n < nbByte; n++)

  00006	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00009	53		 push	 ebx
  0000a	8b 5d 10	 mov	 ebx, DWORD PTR _nbByte$[ebp]
  0000d	56		 push	 esi
  0000e	89 55 f8	 mov	 DWORD PTR _filestream$1$[ebp], edx
  00011	33 f6		 xor	 esi, esi
  00013	8b d1		 mov	 edx, ecx
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00018	89 55 fc	 mov	 DWORD PTR _pzlib_filefunc_def$1$[ebp], edx
  0001b	85 db		 test	 ebx, ebx
  0001d	7e 11		 jle	 SHORT $LN3@zip64local
  0001f	90		 npad	 1
$LL16@zip64local:

; 292  :     {
; 293  :         buf[n] = (unsigned char)(x & 0xff);

  00020	88 4c 35 08	 mov	 BYTE PTR _buf$[ebp+esi], cl
  00024	46		 inc	 esi

; 294  :         x >>= 8;

  00025	0f ac c1 08	 shrd	 ecx, eax, 8
  00029	c1 e8 08	 shr	 eax, 8
  0002c	3b f3		 cmp	 esi, ebx
  0002e	7c f0		 jl	 SHORT $LL16@zip64local
$LN3@zip64local:

; 295  :     }
; 296  :     if (x != 0)

  00030	0b c8		 or	 ecx, eax
  00032	74 1f		 je	 SHORT $LN6@zip64local

; 297  :       {     /* data overflow - hack for ZIP64 (X Roche) */
; 298  :       for (n = 0; n < nbByte; n++)

  00034	85 db		 test	 ebx, ebx
  00036	7e 1b		 jle	 SHORT $LN6@zip64local
  00038	57		 push	 edi
  00039	8b cb		 mov	 ecx, ebx
  0003b	8d 7d 08	 lea	 edi, DWORD PTR _buf$[ebp]
  0003e	8b d1		 mov	 edx, ecx
  00040	83 c8 ff	 or	 eax, -1
  00043	c1 e9 02	 shr	 ecx, 2
  00046	f3 ab		 rep stosd
  00048	8b ca		 mov	 ecx, edx
  0004a	8b 55 fc	 mov	 edx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  0004d	83 e1 03	 and	 ecx, 3
  00050	f3 aa		 rep stosb
  00052	5f		 pop	 edi
$LN6@zip64local:

; 299  :         {
; 300  :           buf[n] = 0xff;
; 301  :         }
; 302  :       }
; 303  : 
; 304  :     if (ZWRITE64(*pzlib_filefunc_def,filestream,buf,nbByte)!=(uLong)nbByte)

  00053	53		 push	 ebx
  00054	8d 45 08	 lea	 eax, DWORD PTR _buf$[ebp]
  00057	50		 push	 eax
  00058	ff 75 f8	 push	 DWORD PTR _filestream$1$[ebp]
  0005b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005e	ff 72 1c	 push	 DWORD PTR [edx+28]
  00061	ff d0		 call	 eax
  00063	83 c4 10	 add	 esp, 16			; 00000010H
  00066	2b c3		 sub	 eax, ebx
  00068	f7 d8		 neg	 eax
  0006a	1b c0		 sbb	 eax, eax
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx

; 305  :         return ZIP_ERRNO;
; 306  :     else
; 307  :         return ZIP_OK;
; 308  : }

  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_zip64local_putValue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zip64local_putValue_inmemory
_TEXT	SEGMENT
_x$ = 8							; size = 8
_zip64local_putValue_inmemory PROC			; COMDAT
; _dest$ = ecx
; _nbByte$ = edx

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 313  :     unsigned char* buf=(unsigned char*)dest;
; 314  :     int n;
; 315  :     for (n = 0; n < nbByte; n++) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	33 f6		 xor	 esi, esi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000f	85 d2		 test	 edx, edx
  00011	7e 0f		 jle	 SHORT $LN3@zip64local
$LL14@zip64local:

; 316  :         buf[n] = (unsigned char)(x & 0xff);

  00013	88 0c 3e	 mov	 BYTE PTR [esi+edi], cl
  00016	46		 inc	 esi

; 317  :         x >>= 8;

  00017	0f ac c1 08	 shrd	 ecx, eax, 8
  0001b	c1 e8 08	 shr	 eax, 8
  0001e	3b f2		 cmp	 esi, edx
  00020	7c f1		 jl	 SHORT $LL14@zip64local
$LN3@zip64local:

; 318  :     }
; 319  : 
; 320  :     if (x != 0)

  00022	0b c8		 or	 ecx, eax
  00024	74 15		 je	 SHORT $LN6@zip64local

; 321  :     {     /* data overflow - hack for ZIP64 */
; 322  :        for (n = 0; n < nbByte; n++)

  00026	85 d2		 test	 edx, edx
  00028	7e 11		 jle	 SHORT $LN6@zip64local
  0002a	8b ca		 mov	 ecx, edx
  0002c	83 c8 ff	 or	 eax, -1
  0002f	c1 e9 02	 shr	 ecx, 2
  00032	f3 ab		 rep stosd
  00034	8b ca		 mov	 ecx, edx
  00036	83 e1 03	 and	 ecx, 3
  00039	f3 aa		 rep stosb
$LN6@zip64local:

; 323  :        {
; 324  :           buf[n] = 0xff;
; 325  :        }
; 326  :     }
; 327  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_zip64local_putValue_inmemory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zip64local_TmzDateToDosDate
_TEXT	SEGMENT
_zip64local_TmzDateToDosDate PROC			; COMDAT
; _ptm$ = ecx

; 333  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 334  :     uLong year = (uLong)ptm->tm_year;

  00003	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 335  :     if (year>=1980)

  00006	81 fa bc 07 00
	00		 cmp	 edx, 1980		; 000007bcH
  0000c	72 08		 jb	 SHORT $LN2@zip64local

; 336  :         year-=1980;

  0000e	81 ea bc 07 00
	00		 sub	 edx, 1980		; 000007bcH
  00014	eb 08		 jmp	 SHORT $LN4@zip64local
$LN2@zip64local:

; 337  :     else if (year>=80)

  00016	83 fa 50	 cmp	 edx, 80			; 00000050H
  00019	72 03		 jb	 SHORT $LN4@zip64local

; 338  :         year-=80;

  0001b	83 ea 50	 sub	 edx, 80			; 00000050H
$LN4@zip64local:

; 339  :     return

  0001e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00021	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00023	c1 e0 06	 shl	 eax, 6
  00026	03 46 04	 add	 eax, DWORD PTR [esi+4]
  00029	d1 e9		 shr	 ecx, 1
  0002b	c1 e0 05	 shl	 eax, 5
  0002e	03 c1		 add	 eax, ecx
  00030	c1 e2 04	 shl	 edx, 4
  00033	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00036	41		 inc	 ecx
  00037	03 ca		 add	 ecx, edx
  00039	c1 e1 05	 shl	 ecx, 5
  0003c	03 4e 0c	 add	 ecx, DWORD PTR [esi+12]
  0003f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00042	0b c1		 or	 eax, ecx
  00044	5e		 pop	 esi

; 340  :       (uLong) (((ptm->tm_mday) + (32 * (ptm->tm_mon+1)) + (512 * year)) << 16) |
; 341  :         ((ptm->tm_sec/2) + (32* ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));
; 342  : }

  00045	c3		 ret	 0
_zip64local_TmzDateToDosDate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zip64local_getByte
_TEXT	SEGMENT
_c$ = -1						; size = 1
_pi$ = 8						; size = 4
_zip64local_getByte PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 351  :     unsigned char c;
; 352  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00006	6a 01		 push	 1
  00008	8b f1		 mov	 esi, ecx
  0000a	8d 45 ff	 lea	 eax, DWORD PTR _c$[ebp]
  0000d	50		 push	 eax
  0000e	8b fa		 mov	 edi, edx
  00010	57		 push	 edi
  00011	ff 76 1c	 push	 DWORD PTR [esi+28]
  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	ff d0		 call	 eax
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 353  :     if (err==1)

  0001c	83 f8 01	 cmp	 eax, 1
  0001f	75 11		 jne	 SHORT $LN2@zip64local

; 354  :     {
; 355  :         *pi = (int)c;

  00021	8b 45 08	 mov	 eax, DWORD PTR _pi$[ebp]
  00024	0f b6 4d ff	 movzx	 ecx, BYTE PTR _c$[ebp]
  00028	5f		 pop	 edi

; 361  :             return ZIP_ERRNO;
; 362  :         else
; 363  :             return ZIP_EOF;
; 364  :     }
; 365  : }

  00029	5e		 pop	 esi
  0002a	89 08		 mov	 DWORD PTR [eax], ecx
  0002c	33 c0		 xor	 eax, eax
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN2@zip64local:

; 356  :         return ZIP_OK;
; 357  :     }
; 358  :     else
; 359  :     {
; 360  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  00032	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00035	57		 push	 edi
  00036	ff 76 1c	 push	 DWORD PTR [esi+28]
  00039	ff d0		 call	 eax
  0003b	83 c4 08	 add	 esp, 8
  0003e	f7 d8		 neg	 eax
  00040	1b c0		 sbb	 eax, eax
  00042	5f		 pop	 edi

; 361  :             return ZIP_ERRNO;
; 362  :         else
; 363  :             return ZIP_EOF;
; 364  :     }
; 365  : }

  00043	5e		 pop	 esi
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_zip64local_getByte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zip64local_getShort
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pX$ = 8						; size = 4
_zip64local_getShort PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 375  :     uLong x ;
; 376  :     int i = 0;
; 377  :     int err;
; 378  : 
; 379  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00007	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0000a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00011	50		 push	 eax
  00012	8b f2		 mov	 esi, edx
  00014	8b f9		 mov	 edi, ecx
  00016	e8 00 00 00 00	 call	 _zip64local_getByte

; 380  :     x = (uLong)i;

  0001b	8b 5d fc	 mov	 ebx, DWORD PTR _i$[ebp]
  0001e	8b d0		 mov	 edx, eax
  00020	83 c4 04	 add	 esp, 4

; 381  : 
; 382  :     if (err==ZIP_OK)

  00023	85 d2		 test	 edx, edx
  00025	75 2c		 jne	 SHORT $LN3@zip64local

; 383  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00027	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0002a	8b d6		 mov	 edx, esi
  0002c	50		 push	 eax
  0002d	8b cf		 mov	 ecx, edi
  0002f	e8 00 00 00 00	 call	 _zip64local_getByte
  00034	8b d0		 mov	 edx, eax
  00036	83 c4 04	 add	 esp, 4

; 384  :     x += ((uLong)i)<<8;
; 385  : 
; 386  :     if (err==ZIP_OK)

  00039	85 d2		 test	 edx, edx
  0003b	75 16		 jne	 SHORT $LN3@zip64local

; 387  :         *pX = x;
; 388  :     else
; 389  :         *pX = 0;
; 390  :     return err;

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00040	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00043	c1 e1 08	 shl	 ecx, 8
  00046	5f		 pop	 edi
  00047	03 cb		 add	 ecx, ebx

; 391  : }

  00049	5e		 pop	 esi
  0004a	89 08		 mov	 DWORD PTR [eax], ecx
  0004c	8b c2		 mov	 eax, edx
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN3@zip64local:

; 387  :         *pX = x;
; 388  :     else
; 389  :         *pX = 0;
; 390  :     return err;

  00053	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00056	5f		 pop	 edi

; 391  : }

  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0005f	8b c2		 mov	 eax, edx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_zip64local_getShort ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zip64local_getLong
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pX$ = 8						; size = 4
_zip64local_getLong PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 396  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 397  :     uLong x ;
; 398  :     int i = 0;
; 399  :     int err;
; 400  : 
; 401  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00007	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0000a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00011	50		 push	 eax
  00012	8b fa		 mov	 edi, edx
  00014	8b d9		 mov	 ebx, ecx
  00016	e8 00 00 00 00	 call	 _zip64local_getByte

; 402  :     x = (uLong)i;

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0001e	8b d0		 mov	 edx, eax
  00020	83 c4 04	 add	 esp, 4
  00023	8b f1		 mov	 esi, ecx

; 403  : 
; 404  :     if (err==ZIP_OK)

  00025	85 d2		 test	 edx, edx
  00027	75 15		 jne	 SHORT $LN2@zip64local

; 405  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00029	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0002c	8b d7		 mov	 edx, edi
  0002e	50		 push	 eax
  0002f	8b cb		 mov	 ecx, ebx
  00031	e8 00 00 00 00	 call	 _zip64local_getByte
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00039	83 c4 04	 add	 esp, 4
  0003c	8b d0		 mov	 edx, eax
$LN2@zip64local:

; 406  :     x += ((uLong)i)<<8;

  0003e	8b c1		 mov	 eax, ecx
  00040	c1 e0 08	 shl	 eax, 8
  00043	03 f0		 add	 esi, eax

; 407  : 
; 408  :     if (err==ZIP_OK)

  00045	85 d2		 test	 edx, edx
  00047	75 15		 jne	 SHORT $LN3@zip64local

; 409  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00049	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0004c	8b d7		 mov	 edx, edi
  0004e	50		 push	 eax
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 _zip64local_getByte
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00059	83 c4 04	 add	 esp, 4
  0005c	8b d0		 mov	 edx, eax
$LN3@zip64local:

; 410  :     x += ((uLong)i)<<16;

  0005e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00061	03 f1		 add	 esi, ecx

; 411  : 
; 412  :     if (err==ZIP_OK)

  00063	85 d2		 test	 edx, edx
  00065	75 2c		 jne	 SHORT $LN5@zip64local

; 413  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00067	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0006a	8b d7		 mov	 edx, edi
  0006c	50		 push	 eax
  0006d	8b cb		 mov	 ecx, ebx
  0006f	e8 00 00 00 00	 call	 _zip64local_getByte
  00074	8b d0		 mov	 edx, eax
  00076	83 c4 04	 add	 esp, 4

; 414  :     x += ((uLong)i)<<24;
; 415  : 
; 416  :     if (err==ZIP_OK)

  00079	85 d2		 test	 edx, edx
  0007b	75 16		 jne	 SHORT $LN5@zip64local

; 417  :         *pX = x;
; 418  :     else
; 419  :         *pX = 0;
; 420  :     return err;

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00080	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00083	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00086	5f		 pop	 edi
  00087	03 ce		 add	 ecx, esi

; 421  : }

  00089	5e		 pop	 esi
  0008a	89 08		 mov	 DWORD PTR [eax], ecx
  0008c	8b c2		 mov	 eax, edx
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN5@zip64local:

; 417  :         *pX = x;
; 418  :     else
; 419  :         *pX = 0;
; 420  :     return err;

  00093	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00096	5f		 pop	 edi

; 421  : }

  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0009f	8b c2		 mov	 eax, edx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_zip64local_getLong ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zip64local_getLong64
_TEXT	SEGMENT
$T1 = -20						; size = 8
_pzlib_filefunc_def$1$ = -16				; size = 4
_filestream$1$ = -12					; size = 4
_i$ = -8						; size = 4
_pX$ = 8						; size = 4
_zip64local_getLong64 PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	8b c2		 mov	 eax, edx
  00009	89 4d f0	 mov	 DWORD PTR _pzlib_filefunc_def$1$[ebp], ecx
  0000c	56		 push	 esi

; 428  :   ZPOS64_T x;
; 429  :   int i = 0;
; 430  :   int err;
; 431  : 
; 432  :   err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0000d	8d 55 f8	 lea	 edx, DWORD PTR _i$[ebp]
  00010	89 45 f4	 mov	 DWORD PTR _filestream$1$[ebp], eax
  00013	57		 push	 edi
  00014	52		 push	 edx
  00015	8b d0		 mov	 edx, eax
  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001e	e8 00 00 00 00	 call	 _zip64local_getByte

; 433  :   x = (ZPOS64_T)i;

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00026	8b f0		 mov	 esi, eax
  00028	8b c1		 mov	 eax, ecx
  0002a	83 c4 04	 add	 esp, 4
  0002d	99		 cdq
  0002e	8b f8		 mov	 edi, eax
  00030	8b da		 mov	 ebx, edx

; 434  : 
; 435  :   if (err==ZIP_OK)

  00032	85 f6		 test	 esi, esi
  00034	75 17		 jne	 SHORT $LN2@zip64local

; 436  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00036	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  00039	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _zip64local_getByte
  00045	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00048	83 c4 04	 add	 esp, 4
  0004b	8b f0		 mov	 esi, eax
$LN2@zip64local:

; 437  :   x += ((ZPOS64_T)i)<<8;

  0004d	8b c1		 mov	 eax, ecx
  0004f	99		 cdq
  00050	0f a4 c2 08	 shld	 edx, eax, 8
  00054	c1 e0 08	 shl	 eax, 8
  00057	03 f8		 add	 edi, eax
  00059	13 da		 adc	 ebx, edx

; 438  : 
; 439  :   if (err==ZIP_OK)

  0005b	85 f6		 test	 esi, esi
  0005d	75 17		 jne	 SHORT $LN3@zip64local

; 440  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0005f	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  00062	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _zip64local_getByte
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00071	83 c4 04	 add	 esp, 4
  00074	8b f0		 mov	 esi, eax
$LN3@zip64local:

; 441  :   x += ((ZPOS64_T)i)<<16;

  00076	8b c1		 mov	 eax, ecx
  00078	99		 cdq
  00079	0f a4 c2 10	 shld	 edx, eax, 16
  0007d	c1 e0 10	 shl	 eax, 16			; 00000010H
  00080	03 f8		 add	 edi, eax
  00082	13 da		 adc	 ebx, edx

; 442  : 
; 443  :   if (err==ZIP_OK)

  00084	85 f6		 test	 esi, esi
  00086	75 17		 jne	 SHORT $LN4@zip64local

; 444  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00088	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  0008b	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  0008e	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _zip64local_getByte
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0009a	83 c4 04	 add	 esp, 4
  0009d	8b f0		 mov	 esi, eax
$LN4@zip64local:

; 445  :   x += ((ZPOS64_T)i)<<24;

  0009f	8b c1		 mov	 eax, ecx
  000a1	99		 cdq
  000a2	0f a4 c2 18	 shld	 edx, eax, 24
  000a6	c1 e0 18	 shl	 eax, 24			; 00000018H
  000a9	03 f8		 add	 edi, eax
  000ab	13 da		 adc	 ebx, edx

; 446  : 
; 447  :   if (err==ZIP_OK)

  000ad	85 f6		 test	 esi, esi
  000af	75 17		 jne	 SHORT $LN5@zip64local

; 448  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000b1	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000b4	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  000b7	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _zip64local_getByte
  000c0	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000c3	83 c4 04	 add	 esp, 4
  000c6	8b f0		 mov	 esi, eax
$LN5@zip64local:

; 449  :   x += ((ZPOS64_T)i)<<32;

  000c8	8b c1		 mov	 eax, ecx
  000ca	83 c7 00	 add	 edi, 0
  000cd	99		 cdq
  000ce	13 d8		 adc	 ebx, eax

; 450  : 
; 451  :   if (err==ZIP_OK)

  000d0	85 f6		 test	 esi, esi
  000d2	75 17		 jne	 SHORT $LN6@zip64local

; 452  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000d4	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000d7	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  000da	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _zip64local_getByte
  000e3	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000e6	83 c4 04	 add	 esp, 4
  000e9	8b f0		 mov	 esi, eax
$LN6@zip64local:

; 453  :   x += ((ZPOS64_T)i)<<40;

  000eb	8b c1		 mov	 eax, ecx
  000ed	99		 cdq
  000ee	c1 e0 08	 shl	 eax, 8
  000f1	83 c7 00	 add	 edi, 0
  000f4	13 d8		 adc	 ebx, eax

; 454  : 
; 455  :   if (err==ZIP_OK)

  000f6	85 f6		 test	 esi, esi
  000f8	75 17		 jne	 SHORT $LN7@zip64local

; 456  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000fa	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000fd	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00100	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _zip64local_getByte
  00109	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0010c	83 c4 04	 add	 esp, 4
  0010f	8b f0		 mov	 esi, eax
$LN7@zip64local:

; 457  :   x += ((ZPOS64_T)i)<<48;

  00111	8b c1		 mov	 eax, ecx
  00113	99		 cdq
  00114	c1 e0 10	 shl	 eax, 16			; 00000010H
  00117	83 c7 00	 add	 edi, 0
  0011a	13 d8		 adc	 ebx, eax

; 458  : 
; 459  :   if (err==ZIP_OK)

  0011c	85 f6		 test	 esi, esi
  0011e	75 38		 jne	 SHORT $LN9@zip64local

; 460  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00120	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  00123	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00126	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 _zip64local_getByte
  0012f	8b f0		 mov	 esi, eax
  00131	83 c4 04	 add	 esp, 4

; 462  : 
; 463  :   if (err==ZIP_OK)

  00134	85 f6		 test	 esi, esi
  00136	75 20		 jne	 SHORT $LN9@zip64local

; 461  :   x += ((ZPOS64_T)i)<<56;

  00138	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0013b	99		 cdq
  0013c	8b c8		 mov	 ecx, eax
  0013e	33 d2		 xor	 edx, edx

; 464  :     *pX = x;
; 465  :   else
; 466  :     *pX = 0;
; 467  : 
; 468  :   return err;

  00140	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00143	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00146	03 d7		 add	 edx, edi
  00148	13 cb		 adc	 ecx, ebx
  0014a	89 10		 mov	 DWORD PTR [eax], edx
  0014c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0014f	8b c6		 mov	 eax, esi

; 469  : }

  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c3		 ret	 0
$LN9@zip64local:

; 464  :     *pX = x;
; 465  :   else
; 466  :     *pX = 0;
; 467  : 
; 468  :   return err;

  00158	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  0015b	0f 57 c0	 xorps	 xmm0, xmm0
  0015e	66 0f 13 45 ec	 movlpd	 QWORD PTR $T1[ebp], xmm0
  00163	8b 55 ec	 mov	 edx, DWORD PTR $T1[ebp]
  00166	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp+4]
  00169	89 10		 mov	 DWORD PTR [eax], edx

; 469  : }

  0016b	5f		 pop	 edi
  0016c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0016f	8b c6		 mov	 eax, esi
  00171	5e		 pop	 esi
  00172	5b		 pop	 ebx
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
_zip64local_getLong64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zip64local_SearchCentralDir
_TEXT	SEGMENT
_uPosFound$ = -48					; size = 8
_uReadPos$2$ = -44					; size = 4
_uReadPos$1$ = -40					; size = 4
_uSizeFile$2$ = -36					; size = 4
_uSizeFile$1$ = -32					; size = 4
_uBackRead$2$ = -28					; size = 4
_pzlib_filefunc_def$1$ = -24				; size = 4
_filestream$1$ = -20					; size = 4
_uPosFound$1$ = -16					; size = 4
_uPosFound$2$ = -12					; size = 4
_uMaxBack$1$ = -8					; size = 4
_uMaxBack$2$ = -4					; size = 4
_zip64local_SearchCentralDir PROC			; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 482  :   unsigned char* buf;
; 483  :   ZPOS64_T uSizeFile;
; 484  :   ZPOS64_T uBackRead;
; 485  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00009	33 c0		 xor	 eax, eax
  0000b	8b f2		 mov	 esi, edx

; 486  :   ZPOS64_T uPosFound=0;
; 487  : 
; 488  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  0000d	6a 02		 push	 2
  0000f	50		 push	 eax
  00010	8b d9		 mov	 ebx, ecx
  00012	89 75 ec	 mov	 DWORD PTR _filestream$1$[ebp], esi
  00015	0f 57 c0	 xorps	 xmm0, xmm0
  00018	89 5d e8	 mov	 DWORD PTR _pzlib_filefunc_def$1$[ebp], ebx
  0001b	bf ff ff 00 00	 mov	 edi, 65535		; 0000ffffH
  00020	89 45 fc	 mov	 DWORD PTR _uMaxBack$2$[ebp], eax
  00023	50		 push	 eax
  00024	89 7d f8	 mov	 DWORD PTR _uMaxBack$1$[ebp], edi
  00027	66 0f 13 45 d0	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0
  0002c	e8 00 00 00 00	 call	 _call_zseek64
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	85 c0		 test	 eax, eax
  00036	0f 85 58 01 00
	00		 jne	 $LN32@zip64local

; 489  :     return 0;
; 490  : 
; 491  : 
; 492  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  0003c	8b d6		 mov	 edx, esi
  0003e	8b cb		 mov	 ecx, ebx
  00040	e8 00 00 00 00	 call	 _call_ztell64
  00045	8b ca		 mov	 ecx, edx
  00047	89 45 e0	 mov	 DWORD PTR _uSizeFile$1$[ebp], eax
  0004a	89 4d dc	 mov	 DWORD PTR _uSizeFile$2$[ebp], ecx

; 493  : 
; 494  :   if (uMaxBack>uSizeFile)

  0004d	85 c9		 test	 ecx, ecx
  0004f	77 0e		 ja	 SHORT $LN8@zip64local
  00051	72 04		 jb	 SHORT $LN34@zip64local
  00053	3b c7		 cmp	 eax, edi
  00055	73 08		 jae	 SHORT $LN8@zip64local
$LN34@zip64local:

; 495  :     uMaxBack = uSizeFile;

  00057	8b f8		 mov	 edi, eax
  00059	89 4d fc	 mov	 DWORD PTR _uMaxBack$2$[ebp], ecx
  0005c	89 7d f8	 mov	 DWORD PTR _uMaxBack$1$[ebp], edi
$LN8@zip64local:

; 496  : 
; 497  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  0005f	68 04 04 00 00	 push	 1028			; 00000404H
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0006a	8b f0		 mov	 esi, eax
  0006c	83 c4 04	 add	 esp, 4

; 498  :   if (buf==NULL)

  0006f	85 f6		 test	 esi, esi
  00071	0f 84 1d 01 00
	00		 je	 $LN32@zip64local

; 499  :     return 0;
; 500  : 
; 501  :   uBackRead = 4;
; 502  :   while (uBackRead<uMaxBack)

  00077	8b 4d fc	 mov	 ecx, DWORD PTR _uMaxBack$2$[ebp]
  0007a	33 c0		 xor	 eax, eax
  0007c	bb 04 00 00 00	 mov	 ebx, 4
  00081	3b c1		 cmp	 eax, ecx
  00083	0f 87 e8 00 00
	00		 ja	 $LN43@zip64local
  00089	72 08		 jb	 SHORT $LN41@zip64local
  0008b	3b df		 cmp	 ebx, edi
  0008d	0f 83 de 00 00
	00		 jae	 $LN43@zip64local
$LN41@zip64local:
  00093	8b 55 d4	 mov	 edx, DWORD PTR _uPosFound$[ebp+4]
  00096	89 55 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], edx
  00099	8b 55 d0	 mov	 edx, DWORD PTR _uPosFound$[ebp]
  0009c	89 55 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], edx
  0009f	90		 npad	 1
$LL2@zip64local:

; 503  :   {
; 504  :     uLong uReadSize;
; 505  :     ZPOS64_T uReadPos ;
; 506  :     int i;
; 507  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000a0	81 c3 00 04 00
	00		 add	 ebx, 1024		; 00000400H
  000a6	83 d0 00	 adc	 eax, 0
  000a9	89 45 e4	 mov	 DWORD PTR _uBackRead$2$[ebp], eax
  000ac	3b c1		 cmp	 eax, ecx
  000ae	72 0d		 jb	 SHORT $LN11@zip64local
  000b0	77 04		 ja	 SHORT $LN36@zip64local
  000b2	3b df		 cmp	 ebx, edi
  000b4	76 07		 jbe	 SHORT $LN11@zip64local
$LN36@zip64local:

; 508  :       uBackRead = uMaxBack;

  000b6	8b df		 mov	 ebx, edi
  000b8	89 4d e4	 mov	 DWORD PTR _uBackRead$2$[ebp], ecx
  000bb	8b c1		 mov	 eax, ecx
$LN11@zip64local:

; 509  :     else
; 510  :       uBackRead+=BUFREADCOMMENT;
; 511  :     uReadPos = uSizeFile-uBackRead ;

  000bd	8b 7d e0	 mov	 edi, DWORD PTR _uSizeFile$1$[ebp]
  000c0	8b cf		 mov	 ecx, edi
  000c2	8b 55 dc	 mov	 edx, DWORD PTR _uSizeFile$2$[ebp]
  000c5	2b cb		 sub	 ecx, ebx
  000c7	89 4d d8	 mov	 DWORD PTR _uReadPos$1$[ebp], ecx
  000ca	1b d0		 sbb	 edx, eax
  000cc	89 55 d4	 mov	 DWORD PTR _uReadPos$2$[ebp], edx

; 512  : 
; 513  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  000cf	85 c0		 test	 eax, eax
  000d1	72 11		 jb	 SHORT $LN18@zip64local
  000d3	77 08		 ja	 SHORT $LN37@zip64local
  000d5	81 fb 04 04 00
	00		 cmp	 ebx, 1028		; 00000404H
  000db	76 07		 jbe	 SHORT $LN18@zip64local
$LN37@zip64local:
  000dd	bf 04 04 00 00	 mov	 edi, 1028		; 00000404H
  000e2	eb 02		 jmp	 SHORT $LN19@zip64local
$LN18@zip64local:
  000e4	2b f9		 sub	 edi, ecx
$LN19@zip64local:

; 514  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 515  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000e6	6a 00		 push	 0
  000e8	52		 push	 edx
  000e9	8b 55 ec	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000ec	51		 push	 ecx
  000ed	8b 4d e8	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  000f0	e8 00 00 00 00	 call	 _call_zseek64
  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f8	85 c0		 test	 eax, eax
  000fa	0f 85 7d 00 00
	00		 jne	 $LN38@zip64local

; 516  :       break;
; 517  : 
; 518  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00100	8b 45 e8	 mov	 eax, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00103	57		 push	 edi
  00104	56		 push	 esi
  00105	ff 75 ec	 push	 DWORD PTR _filestream$1$[ebp]
  00108	ff 70 1c	 push	 DWORD PTR [eax+28]
  0010b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010e	ff d0		 call	 eax
  00110	83 c4 10	 add	 esp, 16			; 00000010H
  00113	3b c7		 cmp	 eax, edi
  00115	75 66		 jne	 SHORT $LN38@zip64local

; 519  :       break;
; 520  : 
; 521  :     for (i=(int)uReadSize-3; (i--)>0;)

  00117	8d 47 fd	 lea	 eax, DWORD PTR [edi-3]
  0011a	85 c0		 test	 eax, eax
  0011c	7e 36		 jle	 SHORT $LN33@zip64local
  0011e	66 90		 npad	 2
$LL4@zip64local:
  00120	8b c8		 mov	 ecx, eax
  00122	48		 dec	 eax

; 522  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 523  :         ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  00123	80 3c 30 50	 cmp	 BYTE PTR [eax+esi], 80	; 00000050H
  00127	75 14		 jne	 SHORT $LN14@zip64local
  00129	80 3c 31 4b	 cmp	 BYTE PTR [ecx+esi], 75	; 0000004bH
  0012d	75 0e		 jne	 SHORT $LN14@zip64local
  0012f	80 7c 30 02 05	 cmp	 BYTE PTR [eax+esi+2], 5
  00134	75 07		 jne	 SHORT $LN14@zip64local
  00136	80 7c 30 03 06	 cmp	 BYTE PTR [eax+esi+3], 6
  0013b	74 06		 je	 SHORT $LN22@zip64local
$LN14@zip64local:

; 519  :       break;
; 520  : 
; 521  :     for (i=(int)uReadSize-3; (i--)>0;)

  0013d	85 c0		 test	 eax, eax
  0013f	7f df		 jg	 SHORT $LL4@zip64local
  00141	eb 11		 jmp	 SHORT $LN33@zip64local
$LN22@zip64local:

; 524  :       {
; 525  :         uPosFound = uReadPos+i;

  00143	99		 cdq
  00144	03 45 d8	 add	 eax, DWORD PTR _uReadPos$1$[ebp]
  00147	89 45 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
  0014a	13 55 d4	 adc	 edx, DWORD PTR _uReadPos$2$[ebp]

; 526  :         break;
; 527  :       }
; 528  : 
; 529  :       if (uPosFound!=0)

  0014d	0b c2		 or	 eax, edx
  0014f	89 55 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], edx
  00152	75 29		 jne	 SHORT $LN38@zip64local
$LN33@zip64local:

; 499  :     return 0;
; 500  : 
; 501  :   uBackRead = 4;
; 502  :   while (uBackRead<uMaxBack)

  00154	8b 45 e4	 mov	 eax, DWORD PTR _uBackRead$2$[ebp]
  00157	8b 4d fc	 mov	 ecx, DWORD PTR _uMaxBack$2$[ebp]
  0015a	8b 7d f8	 mov	 edi, DWORD PTR _uMaxBack$1$[ebp]
  0015d	3b c1		 cmp	 eax, ecx
  0015f	0f 82 3b ff ff
	ff		 jb	 $LL2@zip64local
  00165	77 16		 ja	 SHORT $LN38@zip64local
  00167	3b df		 cmp	 ebx, edi
  00169	0f 82 31 ff ff
	ff		 jb	 $LL2@zip64local
  0016f	eb 0c		 jmp	 SHORT $LN38@zip64local
$LN43@zip64local:
  00171	8b 45 d4	 mov	 eax, DWORD PTR _uPosFound$[ebp+4]
  00174	89 45 f0	 mov	 DWORD PTR _uPosFound$1$[ebp], eax
  00177	8b 45 d0	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  0017a	89 45 f4	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
$LN38@zip64local:

; 530  :         break;
; 531  :   }
; 532  :   TRYFREE(buf);

  0017d	56		 push	 esi
  0017e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free

; 533  :   return uPosFound;

  00184	8b 45 f4	 mov	 eax, DWORD PTR _uPosFound$2$[ebp]
  00187	83 c4 04	 add	 esp, 4
  0018a	8b 55 f0	 mov	 edx, DWORD PTR _uPosFound$1$[ebp]

; 534  : }

  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	5b		 pop	 ebx
  00190	8b e5		 mov	 esp, ebp
  00192	5d		 pop	 ebp
  00193	c3		 ret	 0
$LN32@zip64local:
  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	33 c0		 xor	 eax, eax
  00198	33 d2		 xor	 edx, edx
  0019a	5b		 pop	 ebx
  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
_zip64local_SearchCentralDir ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zip64local_SearchCentralDir64
_TEXT	SEGMENT
_relativeOffset$ = -48					; size = 8
_uPosFound$ = -48					; size = 8
_uReadPos$2$ = -44					; size = 4
_uReadPos$1$ = -40					; size = 4
_uSizeFile$2$ = -36					; size = 4
_uSizeFile$1$ = -32					; size = 4
_uBackRead$2$ = -28					; size = 4
_uPosFound$1$ = -24					; size = 4
_uPosFound$2$ = -20					; size = 4
_uMaxBack$2$ = -16					; size = 4
_filestream$1$ = -12					; size = 4
_uMaxBack$1$ = -8					; size = 4
_uL$ = -8						; size = 4
_pzlib_filefunc_def$1$ = -4				; size = 4
_zip64local_SearchCentralDir64 PROC			; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 543  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 544  :   unsigned char* buf;
; 545  :   ZPOS64_T uSizeFile;
; 546  :   ZPOS64_T uBackRead;
; 547  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  00009	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0000e	8b da		 mov	 ebx, edx
  00010	89 45 f8	 mov	 DWORD PTR _uMaxBack$1$[ebp], eax
  00013	8b f9		 mov	 edi, ecx
  00015	33 c0		 xor	 eax, eax
  00017	89 5d f4	 mov	 DWORD PTR _filestream$1$[ebp], ebx

; 548  :   ZPOS64_T uPosFound=0;
; 549  :   uLong uL;
; 550  :   ZPOS64_T relativeOffset;
; 551  : 
; 552  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  0001a	6a 02		 push	 2
  0001c	50		 push	 eax
  0001d	0f 57 c0	 xorps	 xmm0, xmm0
  00020	89 7d fc	 mov	 DWORD PTR _pzlib_filefunc_def$1$[ebp], edi
  00023	50		 push	 eax
  00024	89 45 f0	 mov	 DWORD PTR _uMaxBack$2$[ebp], eax
  00027	66 0f 13 45 d0	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0
  0002c	e8 00 00 00 00	 call	 _call_zseek64
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	85 c0		 test	 eax, eax
  00036	0f 85 2c 02 00
	00		 jne	 $LN43@zip64local

; 553  :     return 0;
; 554  : 
; 555  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  0003c	8b d3		 mov	 edx, ebx
  0003e	8b cf		 mov	 ecx, edi
  00040	e8 00 00 00 00	 call	 _call_ztell64
  00045	8b ca		 mov	 ecx, edx
  00047	89 45 e0	 mov	 DWORD PTR _uSizeFile$1$[ebp], eax
  0004a	89 4d dc	 mov	 DWORD PTR _uSizeFile$2$[ebp], ecx

; 556  : 
; 557  :   if (uMaxBack>uSizeFile)

  0004d	85 c9		 test	 ecx, ecx
  0004f	77 0f		 ja	 SHORT $LN8@zip64local
  00051	72 07		 jb	 SHORT $LN45@zip64local
  00053	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00058	73 06		 jae	 SHORT $LN8@zip64local
$LN45@zip64local:

; 558  :     uMaxBack = uSizeFile;

  0005a	89 45 f8	 mov	 DWORD PTR _uMaxBack$1$[ebp], eax
  0005d	89 4d f0	 mov	 DWORD PTR _uMaxBack$2$[ebp], ecx
$LN8@zip64local:

; 559  : 
; 560  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00060	68 04 04 00 00	 push	 1028			; 00000404H
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0006b	8b f0		 mov	 esi, eax
  0006d	83 c4 04	 add	 esp, 4

; 561  :   if (buf==NULL)

  00070	85 f6		 test	 esi, esi
  00072	0f 84 f0 01 00
	00		 je	 $LN43@zip64local

; 562  :     return 0;
; 563  : 
; 564  :   uBackRead = 4;
; 565  :   while (uBackRead<uMaxBack)

  00078	8b 55 f0	 mov	 edx, DWORD PTR _uMaxBack$2$[ebp]
  0007b	33 c0		 xor	 eax, eax
  0007d	bb 04 00 00 00	 mov	 ebx, 4
  00082	3b c2		 cmp	 eax, edx
  00084	0f 87 cd 01 00
	00		 ja	 $LN54@zip64local
  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _uMaxBack$1$[ebp]
  0008d	72 08		 jb	 SHORT $LN52@zip64local
  0008f	3b d9		 cmp	 ebx, ecx
  00091	0f 83 c0 01 00
	00		 jae	 $LN54@zip64local
$LN52@zip64local:
  00097	8b 7d d4	 mov	 edi, DWORD PTR _uPosFound$[ebp+4]
  0009a	89 7d e8	 mov	 DWORD PTR _uPosFound$1$[ebp], edi
  0009d	8b 7d d0	 mov	 edi, DWORD PTR _uPosFound$[ebp]
  000a0	89 7d ec	 mov	 DWORD PTR _uPosFound$2$[ebp], edi
$LL2@zip64local:

; 566  :   {
; 567  :     uLong uReadSize;
; 568  :     ZPOS64_T uReadPos;
; 569  :     int i;
; 570  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000a3	81 c3 00 04 00
	00		 add	 ebx, 1024		; 00000400H
  000a9	83 d0 00	 adc	 eax, 0
  000ac	89 45 e4	 mov	 DWORD PTR _uBackRead$2$[ebp], eax
  000af	3b c2		 cmp	 eax, edx
  000b1	72 0d		 jb	 SHORT $LN11@zip64local
  000b3	77 04		 ja	 SHORT $LN47@zip64local
  000b5	3b d9		 cmp	 ebx, ecx
  000b7	76 07		 jbe	 SHORT $LN11@zip64local
$LN47@zip64local:

; 571  :       uBackRead = uMaxBack;

  000b9	8b d9		 mov	 ebx, ecx
  000bb	89 55 e4	 mov	 DWORD PTR _uBackRead$2$[ebp], edx
  000be	8b c2		 mov	 eax, edx
$LN11@zip64local:

; 572  :     else
; 573  :       uBackRead+=BUFREADCOMMENT;
; 574  :     uReadPos = uSizeFile-uBackRead ;

  000c0	8b 7d e0	 mov	 edi, DWORD PTR _uSizeFile$1$[ebp]
  000c3	8b cf		 mov	 ecx, edi
  000c5	8b 55 dc	 mov	 edx, DWORD PTR _uSizeFile$2$[ebp]
  000c8	2b cb		 sub	 ecx, ebx
  000ca	89 4d d8	 mov	 DWORD PTR _uReadPos$1$[ebp], ecx
  000cd	1b d0		 sbb	 edx, eax
  000cf	89 55 d4	 mov	 DWORD PTR _uReadPos$2$[ebp], edx

; 575  : 
; 576  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  000d2	85 c0		 test	 eax, eax
  000d4	72 11		 jb	 SHORT $LN29@zip64local
  000d6	77 08		 ja	 SHORT $LN48@zip64local
  000d8	81 fb 04 04 00
	00		 cmp	 ebx, 1028		; 00000404H
  000de	76 07		 jbe	 SHORT $LN29@zip64local
$LN48@zip64local:
  000e0	bf 04 04 00 00	 mov	 edi, 1028		; 00000404H
  000e5	eb 02		 jmp	 SHORT $LN30@zip64local
$LN29@zip64local:
  000e7	2b f9		 sub	 edi, ecx
$LN30@zip64local:

; 577  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 578  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000e9	6a 00		 push	 0
  000eb	52		 push	 edx
  000ec	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000ef	51		 push	 ecx
  000f0	8b 4d fc	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  000f3	e8 00 00 00 00	 call	 _call_zseek64
  000f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fb	85 c0		 test	 eax, eax
  000fd	75 74		 jne	 SHORT $LN58@zip64local

; 579  :       break;
; 580  : 
; 581  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  000ff	8b 45 fc	 mov	 eax, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00102	57		 push	 edi
  00103	56		 push	 esi
  00104	ff 75 f4	 push	 DWORD PTR _filestream$1$[ebp]
  00107	ff 70 1c	 push	 DWORD PTR [eax+28]
  0010a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010d	ff d0		 call	 eax
  0010f	83 c4 10	 add	 esp, 16			; 00000010H
  00112	3b c7		 cmp	 eax, edi
  00114	75 5d		 jne	 SHORT $LN58@zip64local

; 582  :       break;
; 583  : 
; 584  :     for (i=(int)uReadSize-3; (i--)>0;)

  00116	8d 47 fd	 lea	 eax, DWORD PTR [edi-3]
  00119	85 c0		 test	 eax, eax
  0011b	7e 3b		 jle	 SHORT $LN44@zip64local
  0011d	0f 1f 00	 npad	 3
$LL4@zip64local:
  00120	8b c8		 mov	 ecx, eax
  00122	48		 dec	 eax

; 585  :     {
; 586  :       // Signature "0x07064b50" Zip64 end of central directory locater
; 587  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) && ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  00123	80 3c 30 50	 cmp	 BYTE PTR [eax+esi], 80	; 00000050H
  00127	75 14		 jne	 SHORT $LN14@zip64local
  00129	80 3c 31 4b	 cmp	 BYTE PTR [ecx+esi], 75	; 0000004bH
  0012d	75 0e		 jne	 SHORT $LN14@zip64local
  0012f	80 7c 30 02 06	 cmp	 BYTE PTR [eax+esi+2], 6
  00134	75 07		 jne	 SHORT $LN14@zip64local
  00136	80 7c 30 03 07	 cmp	 BYTE PTR [eax+esi+3], 7
  0013b	74 06		 je	 SHORT $LN33@zip64local
$LN14@zip64local:

; 582  :       break;
; 583  : 
; 584  :     for (i=(int)uReadSize-3; (i--)>0;)

  0013d	85 c0		 test	 eax, eax
  0013f	7f df		 jg	 SHORT $LL4@zip64local
  00141	eb 15		 jmp	 SHORT $LN44@zip64local
$LN33@zip64local:

; 588  :       {
; 589  :         uPosFound = uReadPos+i;

  00143	99		 cdq
  00144	03 45 d8	 add	 eax, DWORD PTR _uReadPos$1$[ebp]
  00147	8b fa		 mov	 edi, edx

; 590  :         break;
; 591  :       }
; 592  :     }
; 593  : 
; 594  :       if (uPosFound!=0)

  00149	8b c8		 mov	 ecx, eax
  0014b	89 45 ec	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
  0014e	13 7d d4	 adc	 edi, DWORD PTR _uReadPos$2$[ebp]
  00151	0b cf		 or	 ecx, edi
  00153	89 7d e8	 mov	 DWORD PTR _uPosFound$1$[ebp], edi
  00156	75 1b		 jne	 SHORT $LN58@zip64local
$LN44@zip64local:

; 562  :     return 0;
; 563  : 
; 564  :   uBackRead = 4;
; 565  :   while (uBackRead<uMaxBack)

  00158	8b 45 e4	 mov	 eax, DWORD PTR _uBackRead$2$[ebp]
  0015b	8b 55 f0	 mov	 edx, DWORD PTR _uMaxBack$2$[ebp]
  0015e	8b 4d f8	 mov	 ecx, DWORD PTR _uMaxBack$1$[ebp]
  00161	3b c2		 cmp	 eax, edx
  00163	0f 82 3a ff ff
	ff		 jb	 $LL2@zip64local
  00169	77 08		 ja	 SHORT $LN58@zip64local
  0016b	3b d9		 cmp	 ebx, ecx
  0016d	0f 82 30 ff ff
	ff		 jb	 $LL2@zip64local
$LN58@zip64local:

; 595  :         break;
; 596  :   }
; 597  : 
; 598  :   TRYFREE(buf);

  00173	8b 7d fc	 mov	 edi, DWORD PTR _pzlib_filefunc_def$1$[ebp]
$LN49@zip64local:
  00176	56		 push	 esi
  00177	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free

; 599  :   if (uPosFound == 0)

  0017d	8b 55 ec	 mov	 edx, DWORD PTR _uPosFound$2$[ebp]
  00180	83 c4 04	 add	 esp, 4
  00183	8b 4d e8	 mov	 ecx, DWORD PTR _uPosFound$1$[ebp]
  00186	8b c2		 mov	 eax, edx
  00188	0b c1		 or	 eax, ecx
  0018a	0f 84 d8 00 00
	00		 je	 $LN43@zip64local

; 600  :     return 0;
; 601  : 
; 602  :   /* Zip64 end of central directory locator */
; 603  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00190	8b 5d f4	 mov	 ebx, DWORD PTR _filestream$1$[ebp]
  00193	6a 00		 push	 0
  00195	51		 push	 ecx
  00196	52		 push	 edx
  00197	8b d3		 mov	 edx, ebx
  00199	8b cf		 mov	 ecx, edi
  0019b	e8 00 00 00 00	 call	 _call_zseek64
  001a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a3	85 c0		 test	 eax, eax
  001a5	0f 85 bd 00 00
	00		 jne	 $LN43@zip64local

; 604  :     return 0;
; 605  : 
; 606  :   /* the signature, already checked */
; 607  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  001ab	8d 45 f8	 lea	 eax, DWORD PTR _uL$[ebp]
  001ae	8b d3		 mov	 edx, ebx
  001b0	50		 push	 eax
  001b1	8b cf		 mov	 ecx, edi
  001b3	e8 00 00 00 00	 call	 _zip64local_getLong
  001b8	83 c4 04	 add	 esp, 4
  001bb	85 c0		 test	 eax, eax
  001bd	0f 85 a5 00 00
	00		 jne	 $LN43@zip64local

; 608  :     return 0;
; 609  : 
; 610  :   /* number of the disk with the start of the zip64 end of  central directory */
; 611  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  001c3	8d 45 f8	 lea	 eax, DWORD PTR _uL$[ebp]
  001c6	8b d3		 mov	 edx, ebx
  001c8	50		 push	 eax
  001c9	8b cf		 mov	 ecx, edi
  001cb	e8 00 00 00 00	 call	 _zip64local_getLong
  001d0	83 c4 04	 add	 esp, 4
  001d3	85 c0		 test	 eax, eax
  001d5	0f 85 8d 00 00
	00		 jne	 $LN43@zip64local

; 612  :     return 0;
; 613  :   if (uL != 0)

  001db	39 45 f8	 cmp	 DWORD PTR _uL$[ebp], eax
  001de	0f 85 84 00 00
	00		 jne	 $LN43@zip64local

; 614  :     return 0;
; 615  : 
; 616  :   /* relative offset of the zip64 end of central directory record */
; 617  :   if (zip64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=ZIP_OK)

  001e4	8d 45 d0	 lea	 eax, DWORD PTR _relativeOffset$[ebp]
  001e7	8b d3		 mov	 edx, ebx
  001e9	50		 push	 eax
  001ea	8b cf		 mov	 ecx, edi
  001ec	e8 00 00 00 00	 call	 _zip64local_getLong64
  001f1	83 c4 04	 add	 esp, 4
  001f4	85 c0		 test	 eax, eax
  001f6	75 70		 jne	 SHORT $LN43@zip64local

; 618  :     return 0;
; 619  : 
; 620  :   /* total number of disks */
; 621  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  001f8	8d 45 f8	 lea	 eax, DWORD PTR _uL$[ebp]
  001fb	8b d3		 mov	 edx, ebx
  001fd	50		 push	 eax
  001fe	8b cf		 mov	 ecx, edi
  00200	e8 00 00 00 00	 call	 _zip64local_getLong
  00205	83 c4 04	 add	 esp, 4
  00208	85 c0		 test	 eax, eax
  0020a	75 5c		 jne	 SHORT $LN43@zip64local

; 622  :     return 0;
; 623  :   if (uL != 1)

  0020c	83 7d f8 01	 cmp	 DWORD PTR _uL$[ebp], 1
  00210	75 56		 jne	 SHORT $LN43@zip64local

; 624  :     return 0;
; 625  : 
; 626  :   /* Goto Zip64 end of central directory record */
; 627  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00212	8b 75 d4	 mov	 esi, DWORD PTR _relativeOffset$[ebp+4]
  00215	8b d3		 mov	 edx, ebx
  00217	8b 7d d0	 mov	 edi, DWORD PTR _relativeOffset$[ebp]
  0021a	8b 5d fc	 mov	 ebx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  0021d	8b cb		 mov	 ecx, ebx
  0021f	50		 push	 eax
  00220	56		 push	 esi
  00221	57		 push	 edi
  00222	e8 00 00 00 00	 call	 _call_zseek64
  00227	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022a	85 c0		 test	 eax, eax
  0022c	75 3a		 jne	 SHORT $LN43@zip64local

; 628  :     return 0;
; 629  : 
; 630  :   /* the signature */
; 631  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  0022e	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  00231	8d 45 f8	 lea	 eax, DWORD PTR _uL$[ebp]
  00234	50		 push	 eax
  00235	8b cb		 mov	 ecx, ebx
  00237	e8 00 00 00 00	 call	 _zip64local_getLong
  0023c	83 c4 04	 add	 esp, 4
  0023f	85 c0		 test	 eax, eax
  00241	75 25		 jne	 SHORT $LN43@zip64local

; 632  :     return 0;
; 633  : 
; 634  :   if (uL != 0x06064b50) // signature of 'Zip64 end of central directory'

  00243	81 7d f8 50 4b
	06 06		 cmp	 DWORD PTR _uL$[ebp], 101075792 ; 06064b50H
  0024a	75 1c		 jne	 SHORT $LN43@zip64local

; 635  :     return 0;
; 636  : 
; 637  :   return relativeOffset;

  0024c	8b c7		 mov	 eax, edi
  0024e	8b d6		 mov	 edx, esi

; 638  : }

  00250	5f		 pop	 edi
  00251	5e		 pop	 esi
  00252	5b		 pop	 ebx
  00253	8b e5		 mov	 esp, ebp
  00255	5d		 pop	 ebp
  00256	c3		 ret	 0
$LN54@zip64local:

; 562  :     return 0;
; 563  : 
; 564  :   uBackRead = 4;
; 565  :   while (uBackRead<uMaxBack)

  00257	8b 45 d4	 mov	 eax, DWORD PTR _uPosFound$[ebp+4]
  0025a	89 45 e8	 mov	 DWORD PTR _uPosFound$1$[ebp], eax
  0025d	8b 45 d0	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  00260	89 45 ec	 mov	 DWORD PTR _uPosFound$2$[ebp], eax

; 579  :       break;
; 580  : 
; 581  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00263	e9 0e ff ff ff	 jmp	 $LN49@zip64local
$LN43@zip64local:

; 638  : }

  00268	5f		 pop	 edi
  00269	5e		 pop	 esi
  0026a	33 c0		 xor	 eax, eax
  0026c	33 d2		 xor	 edx, edx
  0026e	5b		 pop	 ebx
  0026f	8b e5		 mov	 esp, ebp
  00271	5d		 pop	 ebp
  00272	c3		 ret	 0
_zip64local_SearchCentralDir64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _LoadCentralDirectoryRecord
_TEXT	SEGMENT
$T1 = -48						; size = 8
_size_central_dir$ = -48				; size = 8
_number_entry_CD$ = -48					; size = 8
_sizeEndOfCentralDirectory$2 = -48			; size = 8
tv128 = -44						; size = 4
_VersionNeeded$ = -44					; size = 4
_VersionMadeBy$ = -44					; size = 4
$T3 = -40						; size = 8
_offset_central_dir$ = -40				; size = 8
_number_entry$ = -40					; size = 8
tv263 = -36						; size = 4
tv89 = -36						; size = 4
_number_entry_CD$1$ = -32				; size = 4
_number_entry_CD$2$ = -28				; size = 4
$T4 = -24						; size = 4
_buf_read$1$ = -24					; size = 4
_size_comment$1$ = -24					; size = 4
_size_comment$ = -24					; size = 4
_read_this$2$ = -20					; size = 4
_offset_central_dir$1$ = -20				; size = 4
_number_disk_with_CD$ = -20				; size = 4
_byte_before_the_zipfile$2$ = -16			; size = 4
_byte_before_the_zipfile$1$ = -12			; size = 4
_size_central_dir_to_read$2$ = -8			; size = 4
_number_disk$ = -8					; size = 4
_offset_central_dir$2$ = -4				; size = 4
_read_this$1$ = -4					; size = 4
_uL$ = -4						; size = 4
_LoadCentralDirectoryRecord PROC			; COMDAT
; _pziinit$ = ecx

; 641  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 642  :   int err=ZIP_OK;

  0000b	33 ff		 xor	 edi, edi

; 643  :   ZPOS64_T byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
; 644  : 
; 645  :   ZPOS64_T size_central_dir;     /* size of the central directory  */
; 646  :   ZPOS64_T offset_central_dir;   /* offset of start of central directory */
; 647  :   ZPOS64_T central_pos;
; 648  :   uLong uL;
; 649  : 
; 650  :   uLong number_disk;          /* number of the current dist, used for
; 651  :                               spaning ZIP, unsupported, always 0*/
; 652  :   uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 653  :                               for spaning ZIP, unsupported, always 0*/
; 654  :   ZPOS64_T number_entry;
; 655  :   ZPOS64_T number_entry_CD;      /* total number of entries in
; 656  :                                 the central dir
; 657  :                                 (same than number_entry on nospan) */
; 658  :   uLong VersionMadeBy;
; 659  :   uLong VersionNeeded;
; 660  :   uLong size_comment;
; 661  : 
; 662  :   int hasZIP64Record = 0;
; 663  : 
; 664  :   // check first if we find a ZIP64 record
; 665  :   central_pos = zip64local_SearchCentralDir64(&pziinit->z_filefunc,pziinit->filestream);

  0000d	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00010	e8 00 00 00 00	 call	 _zip64local_SearchCentralDir64
  00015	89 55 f4	 mov	 DWORD PTR _byte_before_the_zipfile$1$[ebp], edx
  00018	8b c8		 mov	 ecx, eax
  0001a	89 4d f0	 mov	 DWORD PTR _byte_before_the_zipfile$2$[ebp], ecx

; 666  :   if(central_pos > 0)

  0001d	85 d2		 test	 edx, edx
  0001f	0f 87 a5 01 00
	00		 ja	 $LN55@LoadCentra
  00025	72 08		 jb	 SHORT $LN56@LoadCentra
  00027	85 c9		 test	 ecx, ecx
  00029	0f 85 9b 01 00
	00		 jne	 $LN55@LoadCentra
$LN56@LoadCentra:

; 667  :   {
; 668  :     hasZIP64Record = 1;
; 669  :   }
; 670  :   else if(central_pos == 0)

  0002f	0b c2		 or	 eax, edx
  00031	75 12		 jne	 SHORT $LN7@LoadCentra

; 671  :   {
; 672  :     central_pos = zip64local_SearchCentralDir(&pziinit->z_filefunc,pziinit->filestream);

  00033	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 _zip64local_SearchCentralDir
  0003d	8b c8		 mov	 ecx, eax
  0003f	89 45 f0	 mov	 DWORD PTR _byte_before_the_zipfile$2$[ebp], eax
  00042	89 55 f4	 mov	 DWORD PTR _byte_before_the_zipfile$1$[ebp], edx
$LN7@LoadCentra:

; 733  :   }
; 734  :   else
; 735  :   {
; 736  :     // Read End of central Directory info
; 737  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00045	6a 00		 push	 0
  00047	52		 push	 edx
  00048	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0004b	51		 push	 ecx
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 _call_zseek64

; 738  :       err=ZIP_ERRNO;
; 739  : 
; 740  :     /* the signature, already checked */
; 741  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  00053	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	83 cb ff	 or	 ebx, -1
  0005c	8b ce		 mov	 ecx, esi
  0005e	85 c0		 test	 eax, eax
  00060	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  00063	50		 push	 eax
  00064	0f 45 fb	 cmovne	 edi, ebx
  00067	e8 00 00 00 00	 call	 _zip64local_getLong

; 742  :       err=ZIP_ERRNO;
; 743  : 
; 744  :     /* number of this disk */
; 745  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  0006c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0006f	83 c4 04	 add	 esp, 4
  00072	85 c0		 test	 eax, eax
  00074	8b ce		 mov	 ecx, esi
  00076	8d 45 f8	 lea	 eax, DWORD PTR _number_disk$[ebp]
  00079	0f 45 fb	 cmovne	 edi, ebx
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _zip64local_getShort

; 746  :       err=ZIP_ERRNO;
; 747  : 
; 748  :     /* number of the disk with the start of the central directory */
; 749  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  00082	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00085	83 c4 04	 add	 esp, 4
  00088	85 c0		 test	 eax, eax
  0008a	8b ce		 mov	 ecx, esi
  0008c	8d 45 ec	 lea	 eax, DWORD PTR _number_disk_with_CD$[ebp]
  0008f	0f 45 fb	 cmovne	 edi, ebx
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _zip64local_getShort

; 750  :       err=ZIP_ERRNO;
; 751  : 
; 752  :     /* total number of entries in the central dir on this disk */
; 753  :     number_entry = 0;
; 754  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00098	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0009b	83 c4 04	 add	 esp, 4
  0009e	85 c0		 test	 eax, eax
  000a0	8b ce		 mov	 ecx, esi
  000a2	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  000a5	0f 45 fb	 cmovne	 edi, ebx
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _zip64local_getShort
  000ae	83 c4 04	 add	 esp, 4
  000b1	85 c0		 test	 eax, eax
  000b3	74 12		 je	 SHORT $LN26@LoadCentra

; 755  :       err=ZIP_ERRNO;

  000b5	0f 57 c0	 xorps	 xmm0, xmm0
  000b8	0b fb		 or	 edi, ebx
  000ba	66 0f 13 45 d0	 movlpd	 QWORD PTR $T1[ebp], xmm0
  000bf	8b 5d d4	 mov	 ebx, DWORD PTR $T1[ebp+4]
  000c2	8b 45 d0	 mov	 eax, DWORD PTR $T1[ebp]
  000c5	eb 05		 jmp	 SHORT $LN67@LoadCentra
$LN26@LoadCentra:

; 756  :     else
; 757  :       number_entry = uL;

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _uL$[ebp]
  000ca	33 db		 xor	 ebx, ebx
$LN67@LoadCentra:

; 758  : 
; 759  :     /* total number of entries in the central dir */
; 760  :     number_entry_CD = 0;
; 761  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  000cc	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000cf	0f 57 c0	 xorps	 xmm0, xmm0
  000d2	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
  000d5	8b ce		 mov	 ecx, esi
  000d7	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  000da	66 0f 13 45 d0	 movlpd	 QWORD PTR _number_entry_CD$[ebp], xmm0
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 _zip64local_getShort
  000e5	83 c4 04	 add	 esp, 4
  000e8	85 c0		 test	 eax, eax
  000ea	74 1f		 je	 SHORT $LN28@LoadCentra

; 762  :       err=ZIP_ERRNO;

  000ec	8b 45 d4	 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  000ef	0f 57 c0	 xorps	 xmm0, xmm0
  000f2	89 45 e0	 mov	 DWORD PTR _number_entry_CD$1$[ebp], eax
  000f5	83 cf ff	 or	 edi, -1
  000f8	8b 45 d0	 mov	 eax, DWORD PTR _number_entry_CD$[ebp]
  000fb	66 0f 13 45 d8	 movlpd	 QWORD PTR $T3[ebp], xmm0
  00100	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
  00103	89 45 e4	 mov	 DWORD PTR _number_entry_CD$2$[ebp], eax
  00106	8b 45 dc	 mov	 eax, DWORD PTR $T3[ebp+4]
  00109	eb 0f		 jmp	 SHORT $LN29@LoadCentra
$LN28@LoadCentra:

; 763  :     else
; 764  :       number_entry_CD = uL;

  0010b	8b 45 fc	 mov	 eax, DWORD PTR _uL$[ebp]
  0010e	33 d2		 xor	 edx, edx
  00110	89 45 e4	 mov	 DWORD PTR _number_entry_CD$2$[ebp], eax
  00113	8b c8		 mov	 ecx, eax
  00115	89 55 e0	 mov	 DWORD PTR _number_entry_CD$1$[ebp], edx
  00118	8b c2		 mov	 eax, edx
$LN29@LoadCentra:

; 765  : 
; 766  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  0011a	3b 4d e8	 cmp	 ecx, DWORD PTR $T4[ebp]
  0011d	75 10		 jne	 SHORT $LN31@LoadCentra
  0011f	3b c3		 cmp	 eax, ebx
  00121	75 0c		 jne	 SHORT $LN31@LoadCentra
  00123	83 7d ec 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  00127	75 06		 jne	 SHORT $LN31@LoadCentra
  00129	83 7d f8 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  0012d	74 05		 je	 SHORT $LN30@LoadCentra
$LN31@LoadCentra:

; 767  :       err=ZIP_BADZIPFILE;

  0012f	bf 99 ff ff ff	 mov	 edi, -103		; ffffff99H
$LN30@LoadCentra:

; 768  : 
; 769  :     /* size of the central directory */
; 770  :     size_central_dir = 0;
; 771  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00134	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00137	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  0013a	0f 57 c0	 xorps	 xmm0, xmm0
  0013d	8b ce		 mov	 ecx, esi
  0013f	50		 push	 eax
  00140	66 0f 13 45 d0	 movlpd	 QWORD PTR _size_central_dir$[ebp], xmm0
  00145	e8 00 00 00 00	 call	 _zip64local_getLong
  0014a	83 c4 04	 add	 esp, 4
  0014d	85 c0		 test	 eax, eax
  0014f	74 0e		 je	 SHORT $LN32@LoadCentra

; 772  :       err=ZIP_ERRNO;

  00151	8b 45 d4	 mov	 eax, DWORD PTR _size_central_dir$[ebp+4]
  00154	83 cf ff	 or	 edi, -1
  00157	8b 5d d0	 mov	 ebx, DWORD PTR _size_central_dir$[ebp]
  0015a	89 45 f8	 mov	 DWORD PTR _size_central_dir_to_read$2$[ebp], eax
  0015d	eb 0a		 jmp	 SHORT $LN33@LoadCentra
$LN32@LoadCentra:

; 773  :     else
; 774  :       size_central_dir = uL;

  0015f	8b 5d fc	 mov	 ebx, DWORD PTR _uL$[ebp]
  00162	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _size_central_dir_to_read$2$[ebp], 0
$LN33@LoadCentra:

; 775  : 
; 776  :     /* offset of start of central directory with respect to the starting disk number */
; 777  :     offset_central_dir = 0;
; 778  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00169	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0016c	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  0016f	0f 57 c0	 xorps	 xmm0, xmm0
  00172	8b ce		 mov	 ecx, esi
  00174	50		 push	 eax
  00175	66 0f 13 45 d8	 movlpd	 QWORD PTR _offset_central_dir$[ebp], xmm0
  0017a	e8 00 00 00 00	 call	 _zip64local_getLong
  0017f	83 c4 04	 add	 esp, 4
  00182	85 c0		 test	 eax, eax
  00184	74 0e		 je	 SHORT $LN34@LoadCentra

; 779  :       err=ZIP_ERRNO;

  00186	8b 45 dc	 mov	 eax, DWORD PTR _offset_central_dir$[ebp+4]
  00189	83 cf ff	 or	 edi, -1
  0018c	89 45 ec	 mov	 DWORD PTR _offset_central_dir$1$[ebp], eax
  0018f	8b 45 d8	 mov	 eax, DWORD PTR _offset_central_dir$[ebp]
  00192	eb 0a		 jmp	 SHORT $LN68@LoadCentra
$LN34@LoadCentra:

; 780  :     else
; 781  :       offset_central_dir = uL;

  00194	8b 45 fc	 mov	 eax, DWORD PTR _uL$[ebp]
  00197	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _offset_central_dir$1$[ebp], 0
$LN68@LoadCentra:

; 782  : 
; 783  : 
; 784  :     /* zipfile global comment length */
; 785  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &size_comment)!=ZIP_OK)

  0019e	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  001a1	8b ce		 mov	 ecx, esi
  001a3	89 45 fc	 mov	 DWORD PTR _offset_central_dir$2$[ebp], eax
  001a6	8d 45 e8	 lea	 eax, DWORD PTR _size_comment$[ebp]
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 _zip64local_getShort
  001af	8b 55 e8	 mov	 edx, DWORD PTR _size_comment$[ebp]
  001b2	83 c4 04	 add	 esp, 4
  001b5	8b 4d fc	 mov	 ecx, DWORD PTR _offset_central_dir$2$[ebp]
  001b8	85 c0		 test	 eax, eax
  001ba	b8 ff ff ff ff	 mov	 eax, -1
  001bf	0f 45 f8	 cmovne	 edi, eax
  001c2	8b 45 ec	 mov	 eax, DWORD PTR _offset_central_dir$1$[ebp]
  001c5	e9 33 01 00 00	 jmp	 $LN69@LoadCentra
$LN55@LoadCentra:

; 673  :   }
; 674  : 
; 675  : /* disable to allow appending to empty ZIP archive
; 676  :         if (central_pos==0)
; 677  :             err=ZIP_ERRNO;
; 678  : */
; 679  : 
; 680  :   if(hasZIP64Record)
; 681  :   {
; 682  :     ZPOS64_T sizeEndOfCentralDirectory;
; 683  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos, ZLIB_FILEFUNC_SEEK_SET) != 0)

  001ca	6a 00		 push	 0
  001cc	52		 push	 edx
  001cd	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  001d0	51		 push	 ecx
  001d1	8b ce		 mov	 ecx, esi
  001d3	e8 00 00 00 00	 call	 _call_zseek64

; 684  :       err=ZIP_ERRNO;
; 685  : 
; 686  :     /* the signature, already checked */
; 687  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  001d8	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  001db	83 c4 0c	 add	 esp, 12			; 0000000cH
  001de	83 cb ff	 or	 ebx, -1
  001e1	8b ce		 mov	 ecx, esi
  001e3	85 c0		 test	 eax, eax
  001e5	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  001e8	50		 push	 eax
  001e9	0f 45 fb	 cmovne	 edi, ebx
  001ec	e8 00 00 00 00	 call	 _zip64local_getLong

; 688  :       err=ZIP_ERRNO;
; 689  : 
; 690  :     /* size of zip64 end of central directory record */
; 691  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &sizeEndOfCentralDirectory)!=ZIP_OK)

  001f1	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  001f4	83 c4 04	 add	 esp, 4
  001f7	85 c0		 test	 eax, eax
  001f9	8b ce		 mov	 ecx, esi
  001fb	8d 45 d0	 lea	 eax, DWORD PTR _sizeEndOfCentralDirectory$2[ebp]
  001fe	0f 45 fb	 cmovne	 edi, ebx
  00201	50		 push	 eax
  00202	e8 00 00 00 00	 call	 _zip64local_getLong64

; 692  :       err=ZIP_ERRNO;
; 693  : 
; 694  :     /* version made by */
; 695  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionMadeBy)!=ZIP_OK)

  00207	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0020a	83 c4 04	 add	 esp, 4
  0020d	85 c0		 test	 eax, eax
  0020f	8b ce		 mov	 ecx, esi
  00211	8d 45 d4	 lea	 eax, DWORD PTR _VersionMadeBy$[ebp]
  00214	0f 45 fb	 cmovne	 edi, ebx
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 _zip64local_getShort

; 696  :       err=ZIP_ERRNO;
; 697  : 
; 698  :     /* version needed to extract */
; 699  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionNeeded)!=ZIP_OK)

  0021d	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00220	83 c4 04	 add	 esp, 4
  00223	85 c0		 test	 eax, eax
  00225	8b ce		 mov	 ecx, esi
  00227	8d 45 d4	 lea	 eax, DWORD PTR _VersionNeeded$[ebp]
  0022a	0f 45 fb	 cmovne	 edi, ebx
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 _zip64local_getShort

; 700  :       err=ZIP_ERRNO;
; 701  : 
; 702  :     /* number of this disk */
; 703  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  00233	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00236	83 c4 04	 add	 esp, 4
  00239	85 c0		 test	 eax, eax
  0023b	8b ce		 mov	 ecx, esi
  0023d	8d 45 f8	 lea	 eax, DWORD PTR _number_disk$[ebp]
  00240	0f 45 fb	 cmovne	 edi, ebx
  00243	50		 push	 eax
  00244	e8 00 00 00 00	 call	 _zip64local_getLong

; 704  :       err=ZIP_ERRNO;
; 705  : 
; 706  :     /* number of the disk with the start of the central directory */
; 707  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  00249	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0024c	83 c4 04	 add	 esp, 4
  0024f	85 c0		 test	 eax, eax
  00251	8b ce		 mov	 ecx, esi
  00253	8d 45 ec	 lea	 eax, DWORD PTR _number_disk_with_CD$[ebp]
  00256	0f 45 fb	 cmovne	 edi, ebx
  00259	50		 push	 eax
  0025a	e8 00 00 00 00	 call	 _zip64local_getLong

; 708  :       err=ZIP_ERRNO;
; 709  : 
; 710  :     /* total number of entries in the central directory on this disk */
; 711  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &number_entry)!=ZIP_OK)

  0025f	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00262	83 c4 04	 add	 esp, 4
  00265	85 c0		 test	 eax, eax
  00267	8b ce		 mov	 ecx, esi
  00269	8d 45 d8	 lea	 eax, DWORD PTR _number_entry$[ebp]
  0026c	0f 45 fb	 cmovne	 edi, ebx
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 _zip64local_getLong64

; 712  :       err=ZIP_ERRNO;
; 713  : 
; 714  :     /* total number of entries in the central directory */
; 715  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&number_entry_CD)!=ZIP_OK)

  00275	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00278	83 c4 04	 add	 esp, 4
  0027b	85 c0		 test	 eax, eax
  0027d	8b ce		 mov	 ecx, esi
  0027f	8d 45 d0	 lea	 eax, DWORD PTR _number_entry_CD$[ebp]
  00282	0f 45 fb	 cmovne	 edi, ebx
  00285	50		 push	 eax
  00286	e8 00 00 00 00	 call	 _zip64local_getLong64
  0028b	83 c4 04	 add	 esp, 4
  0028e	85 c0		 test	 eax, eax

; 716  :       err=ZIP_ERRNO;
; 717  : 
; 718  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  00290	8b 45 d0	 mov	 eax, DWORD PTR _number_entry_CD$[ebp]
  00293	0f 45 fb	 cmovne	 edi, ebx
  00296	89 45 e4	 mov	 DWORD PTR _number_entry_CD$2$[ebp], eax
  00299	3b 45 d8	 cmp	 eax, DWORD PTR _number_entry$[ebp]
  0029c	8b 45 d4	 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  0029f	89 45 e0	 mov	 DWORD PTR _number_entry_CD$1$[ebp], eax
  002a2	75 11		 jne	 SHORT $LN19@LoadCentra
  002a4	3b 45 dc	 cmp	 eax, DWORD PTR _number_entry$[ebp+4]
  002a7	75 0c		 jne	 SHORT $LN19@LoadCentra
  002a9	83 7d ec 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  002ad	75 06		 jne	 SHORT $LN19@LoadCentra
  002af	83 7d f8 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  002b3	74 05		 je	 SHORT $LN18@LoadCentra
$LN19@LoadCentra:

; 719  :       err=ZIP_BADZIPFILE;

  002b5	bf 99 ff ff ff	 mov	 edi, -103		; ffffff99H
$LN18@LoadCentra:

; 720  : 
; 721  :     /* size of the central directory */
; 722  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&size_central_dir)!=ZIP_OK)

  002ba	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  002bd	8d 45 d0	 lea	 eax, DWORD PTR _size_central_dir$[ebp]
  002c0	50		 push	 eax
  002c1	8b ce		 mov	 ecx, esi
  002c3	e8 00 00 00 00	 call	 _zip64local_getLong64

; 723  :       err=ZIP_ERRNO;
; 724  : 
; 725  :     /* offset of start of central directory with respect to the
; 726  :     starting disk number */
; 727  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&offset_central_dir)!=ZIP_OK)

  002c8	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  002cb	83 c4 04	 add	 esp, 4
  002ce	85 c0		 test	 eax, eax
  002d0	8b ce		 mov	 ecx, esi
  002d2	8d 45 d8	 lea	 eax, DWORD PTR _offset_central_dir$[ebp]
  002d5	0f 45 fb	 cmovne	 edi, ebx
  002d8	50		 push	 eax
  002d9	e8 00 00 00 00	 call	 _zip64local_getLong64

; 728  :       err=ZIP_ERRNO;
; 729  : 
; 730  :     // TODO..
; 731  :     // read the comment from the standard central header.
; 732  :     size_comment = 0;

  002de	8b 4d d8	 mov	 ecx, DWORD PTR _offset_central_dir$[ebp]
  002e1	83 c4 04	 add	 esp, 4
  002e4	85 c0		 test	 eax, eax
  002e6	89 4d fc	 mov	 DWORD PTR _offset_central_dir$2$[ebp], ecx
  002e9	8b 45 d4	 mov	 eax, DWORD PTR _size_central_dir$[ebp+4]
  002ec	0f 45 fb	 cmovne	 edi, ebx
  002ef	89 45 f8	 mov	 DWORD PTR _size_central_dir_to_read$2$[ebp], eax
  002f2	8b 45 dc	 mov	 eax, DWORD PTR _offset_central_dir$[ebp+4]
  002f5	33 d2		 xor	 edx, edx
  002f7	8b 5d d0	 mov	 ebx, DWORD PTR _size_central_dir$[ebp]
  002fa	89 45 ec	 mov	 DWORD PTR _offset_central_dir$1$[ebp], eax
$LN69@LoadCentra:

; 786  :       err=ZIP_ERRNO;
; 787  :   }
; 788  : 
; 789  :   if ((central_pos<offset_central_dir+size_central_dir) &&

  002fd	03 cb		 add	 ecx, ebx
  002ff	89 55 e8	 mov	 DWORD PTR _size_comment$1$[ebp], edx
  00302	89 4d dc	 mov	 DWORD PTR tv263[ebp], ecx
  00305	13 45 f8	 adc	 eax, DWORD PTR _size_central_dir_to_read$2$[ebp]
  00308	8b 4d f4	 mov	 ecx, DWORD PTR _byte_before_the_zipfile$1$[ebp]
  0030b	3b c8		 cmp	 ecx, eax
  0030d	0f 82 88 01 00
	00		 jb	 $LN53@LoadCentra
  00313	77 0c		 ja	 SHORT $LN57@LoadCentra
  00315	8b 45 dc	 mov	 eax, DWORD PTR tv263[ebp]
  00318	39 45 f0	 cmp	 DWORD PTR _byte_before_the_zipfile$2$[ebp], eax
  0031b	0f 82 7a 01 00
	00		 jb	 $LN53@LoadCentra
$LN57@LoadCentra:

; 790  :     (err==ZIP_OK))
; 791  :     err=ZIP_BADZIPFILE;
; 792  : 
; 793  :   if (err!=ZIP_OK)

  00321	85 ff		 test	 edi, edi
  00323	0f 85 72 01 00
	00		 jne	 $LN53@LoadCentra

; 797  :   }
; 798  : 
; 799  :   if (size_comment>0)

  00329	85 d2		 test	 edx, edx
  0032b	74 36		 je	 SHORT $LN40@LoadCentra

; 800  :   {
; 801  :     pziinit->globalcomment = (char*)ALLOC(size_comment+1);

  0032d	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00330	50		 push	 eax
  00331	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00337	83 c4 04	 add	 esp, 4
  0033a	89 86 00 01 01
	00		 mov	 DWORD PTR [esi+65792], eax

; 802  :     if (pziinit->globalcomment)

  00340	85 c0		 test	 eax, eax
  00342	74 1c		 je	 SHORT $LN66@LoadCentra

; 803  :     {
; 804  :       size_comment = ZREAD64(pziinit->z_filefunc, pziinit->filestream, pziinit->globalcomment,size_comment);

  00344	ff 75 e8	 push	 DWORD PTR _size_comment$1$[ebp]
  00347	50		 push	 eax
  00348	ff 76 2c	 push	 DWORD PTR [esi+44]
  0034b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0034e	ff 76 1c	 push	 DWORD PTR [esi+28]
  00351	ff d0		 call	 eax

; 805  :       pziinit->globalcomment[size_comment]=0;

  00353	8b 8e 00 01 01
	00		 mov	 ecx, DWORD PTR [esi+65792]
  00359	83 c4 10	 add	 esp, 16			; 00000010H
  0035c	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
$LN66@LoadCentra:

; 806  :     }
; 807  :   }
; 808  : 
; 809  :   byte_before_the_zipfile = central_pos - (offset_central_dir+size_central_dir);

  00360	8b 4d f4	 mov	 ecx, DWORD PTR _byte_before_the_zipfile$1$[ebp]
$LN40@LoadCentra:
  00363	8b 45 f0	 mov	 eax, DWORD PTR _byte_before_the_zipfile$2$[ebp]
  00366	2b 45 fc	 sub	 eax, DWORD PTR _offset_central_dir$2$[ebp]

; 810  :   pziinit->add_position_when_writting_offset = byte_before_the_zipfile;
; 811  : 
; 812  :   {
; 813  :     ZPOS64_T size_central_dir_to_read = size_central_dir;
; 814  :     size_t buf_size = SIZEDATA_INDATABLOCK;
; 815  :     void* buf_read = (void*)ALLOC(buf_size);

  00369	68 f0 0f 00 00	 push	 4080			; 00000ff0H
  0036e	1b 4d ec	 sbb	 ecx, DWORD PTR _offset_central_dir$1$[ebp]
  00371	2b c3		 sub	 eax, ebx
  00373	89 45 f0	 mov	 DWORD PTR _byte_before_the_zipfile$2$[ebp], eax
  00376	1b 4d f8	 sbb	 ecx, DWORD PTR _size_central_dir_to_read$2$[ebp]
  00379	89 4d f4	 mov	 DWORD PTR _byte_before_the_zipfile$1$[ebp], ecx
  0037c	89 86 f0 00 01
	00		 mov	 DWORD PTR [esi+65776], eax
  00382	89 8e f4 00 01
	00		 mov	 DWORD PTR [esi+65780], ecx
  00388	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc

; 816  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir + byte_before_the_zipfile, ZLIB_FILEFUNC_SEEK_SET) != 0)

  0038e	8b 4d f0	 mov	 ecx, DWORD PTR _byte_before_the_zipfile$2$[ebp]
  00391	83 c4 04	 add	 esp, 4
  00394	03 4d fc	 add	 ecx, DWORD PTR _offset_central_dir$2$[ebp]
  00397	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0039a	89 45 e8	 mov	 DWORD PTR _buf_read$1$[ebp], eax
  0039d	8b 45 f4	 mov	 eax, DWORD PTR _byte_before_the_zipfile$1$[ebp]
  003a0	13 45 ec	 adc	 eax, DWORD PTR _offset_central_dir$1$[ebp]
  003a3	6a 00		 push	 0
  003a5	50		 push	 eax
  003a6	89 4d d4	 mov	 DWORD PTR tv128[ebp], ecx
  003a9	51		 push	 ecx
  003aa	8b ce		 mov	 ecx, esi
  003ac	89 45 dc	 mov	 DWORD PTR tv89[ebp], eax
  003af	e8 00 00 00 00	 call	 _call_zseek64
  003b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  003b7	85 c0		 test	 eax, eax
  003b9	b8 ff ff ff ff	 mov	 eax, -1
  003be	0f 45 f8	 cmovne	 edi, eax

; 817  :       err=ZIP_ERRNO;
; 818  : 
; 819  :     while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  003c1	8b 45 f8	 mov	 eax, DWORD PTR _size_central_dir_to_read$2$[ebp]
  003c4	85 c0		 test	 eax, eax
  003c6	75 08		 jne	 SHORT $LL2@LoadCentra
  003c8	85 db		 test	 ebx, ebx
  003ca	74 72		 je	 SHORT $LN61@LoadCentra
  003cc	0f 1f 40 00	 npad	 4
$LL2@LoadCentra:
  003d0	85 ff		 test	 edi, edi
  003d2	75 6a		 jne	 SHORT $LN61@LoadCentra

; 820  :     {
; 821  :       ZPOS64_T read_this = SIZEDATA_INDATABLOCK;

  003d4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _read_this$2$[ebp], 0
  003db	bf f0 0f 00 00	 mov	 edi, 4080		; 00000ff0H
  003e0	89 7d fc	 mov	 DWORD PTR _read_this$1$[ebp], edi

; 822  :       if (read_this > size_central_dir_to_read)

  003e3	85 c0		 test	 eax, eax
  003e5	77 0e		 ja	 SHORT $LN42@LoadCentra
  003e7	72 04		 jb	 SHORT $LN59@LoadCentra
  003e9	3b df		 cmp	 ebx, edi
  003eb	73 08		 jae	 SHORT $LN42@LoadCentra
$LN59@LoadCentra:

; 823  :         read_this = size_central_dir_to_read;

  003ed	8b fb		 mov	 edi, ebx
  003ef	89 5d fc	 mov	 DWORD PTR _read_this$1$[ebp], ebx
  003f2	89 45 ec	 mov	 DWORD PTR _read_this$2$[ebp], eax
$LN42@LoadCentra:

; 824  : 
; 825  :       if (ZREAD64(pziinit->z_filefunc, pziinit->filestream,buf_read,(uLong)read_this) != read_this)

  003f5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  003f8	57		 push	 edi
  003f9	ff 75 e8	 push	 DWORD PTR _buf_read$1$[ebp]
  003fc	ff 76 2c	 push	 DWORD PTR [esi+44]
  003ff	ff 76 1c	 push	 DWORD PTR [esi+28]
  00402	ff d0		 call	 eax
  00404	83 c4 10	 add	 esp, 16			; 00000010H
  00407	33 c9		 xor	 ecx, ecx
  00409	3b c7		 cmp	 eax, edi
  0040b	75 18		 jne	 SHORT $LN60@LoadCentra
  0040d	3b 4d ec	 cmp	 ecx, DWORD PTR _read_this$2$[ebp]
  00410	75 13		 jne	 SHORT $LN60@LoadCentra

; 827  : 
; 828  :       if (err==ZIP_OK)
; 829  :         err = add_data_in_datablock(&pziinit->central_dir,buf_read, (uLong)read_this);

  00412	8b 55 e8	 mov	 edx, DWORD PTR _buf_read$1$[ebp]
  00415	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00418	57		 push	 edi
  00419	e8 00 00 00 00	 call	 _add_data_in_datablock
  0041e	83 c4 04	 add	 esp, 4
  00421	8b f8		 mov	 edi, eax
  00423	eb 03		 jmp	 SHORT $LN51@LoadCentra
$LN60@LoadCentra:

; 826  :         err=ZIP_ERRNO;

  00425	83 cf ff	 or	 edi, -1
$LN51@LoadCentra:

; 830  : 
; 831  :       size_central_dir_to_read-=read_this;

  00428	2b 5d fc	 sub	 ebx, DWORD PTR _read_this$1$[ebp]
  0042b	8b 45 f8	 mov	 eax, DWORD PTR _size_central_dir_to_read$2$[ebp]
  0042e	1b 45 ec	 sbb	 eax, DWORD PTR _read_this$2$[ebp]
  00431	89 45 f8	 mov	 DWORD PTR _size_central_dir_to_read$2$[ebp], eax
  00434	85 c0		 test	 eax, eax
  00436	77 98		 ja	 SHORT $LL2@LoadCentra

; 817  :       err=ZIP_ERRNO;
; 818  : 
; 819  :     while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  00438	72 04		 jb	 SHORT $LN61@LoadCentra
  0043a	85 db		 test	 ebx, ebx
  0043c	75 92		 jne	 SHORT $LL2@LoadCentra
$LN61@LoadCentra:

; 832  :     }
; 833  :     TRYFREE(buf_read);

  0043e	8b 45 e8	 mov	 eax, DWORD PTR _buf_read$1$[ebp]
  00441	85 c0		 test	 eax, eax
  00443	74 0a		 je	 SHORT $LN45@LoadCentra
  00445	50		 push	 eax
  00446	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0044c	83 c4 04	 add	 esp, 4
$LN45@LoadCentra:

; 834  :   }
; 835  :   pziinit->begin_pos = byte_before_the_zipfile;

  0044f	8b 45 f0	 mov	 eax, DWORD PTR _byte_before_the_zipfile$2$[ebp]

; 836  :   pziinit->number_entry = number_entry_CD;
; 837  : 
; 838  :   if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir+byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET) != 0)

  00452	8b ce		 mov	 ecx, esi
  00454	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00457	89 86 e8 00 01
	00		 mov	 DWORD PTR [esi+65768], eax
  0045d	8b 45 f4	 mov	 eax, DWORD PTR _byte_before_the_zipfile$1$[ebp]
  00460	6a 00		 push	 0
  00462	ff 75 dc	 push	 DWORD PTR tv89[ebp]
  00465	89 86 ec 00 01
	00		 mov	 DWORD PTR [esi+65772], eax
  0046b	8b 45 e4	 mov	 eax, DWORD PTR _number_entry_CD$2$[ebp]
  0046e	ff 75 d4	 push	 DWORD PTR tv128[ebp]
  00471	89 86 f8 00 01
	00		 mov	 DWORD PTR [esi+65784], eax
  00477	8b 45 e0	 mov	 eax, DWORD PTR _number_entry_CD$1$[ebp]
  0047a	89 86 fc 00 01
	00		 mov	 DWORD PTR [esi+65788], eax
  00480	e8 00 00 00 00	 call	 _call_zseek64
  00485	83 c4 0c	 add	 esp, 12			; 0000000cH
  00488	85 c0		 test	 eax, eax
  0048a	b8 ff ff ff ff	 mov	 eax, -1
  0048f	0f 45 f8	 cmovne	 edi, eax

; 839  :     err=ZIP_ERRNO;
; 840  : 
; 841  :   return err;

  00492	8b c7		 mov	 eax, edi

; 842  : }

  00494	5f		 pop	 edi
  00495	5e		 pop	 esi
  00496	5b		 pop	 ebx
  00497	8b e5		 mov	 esp, ebp
  00499	5d		 pop	 ebp
  0049a	c3		 ret	 0
$LN53@LoadCentra:

; 794  :   {
; 795  :     ZCLOSE64(pziinit->z_filefunc, pziinit->filestream);

  0049b	ff 76 2c	 push	 DWORD PTR [esi+44]
  0049e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  004a1	ff 76 1c	 push	 DWORD PTR [esi+28]
  004a4	ff d1		 call	 ecx
  004a6	83 c4 08	 add	 esp, 8

; 796  :     return ZIP_ERRNO;

  004a9	83 c8 ff	 or	 eax, -1

; 842  : }

  004ac	5f		 pop	 edi
  004ad	5e		 pop	 esi
  004ae	5b		 pop	 ebx
  004af	8b e5		 mov	 esp, ebp
  004b1	5d		 pop	 ebp
  004b2	c3		 ret	 0
_LoadCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipOpen3@16
_TEXT	SEGMENT
_ziinit$ = -65800					; size = 65800
_globalcomment$ = 8					; size = 4
_pzlib_filefunc64_32_def$ = 12				; size = 4
_zipOpen3@16 PROC					; COMDAT
; _pathname$ = ecx
; _append$ = edx

; 850  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	b8 0c 01 01 00	 mov	 eax, 65804		; 0001010cH
  0000b	e8 00 00 00 00	 call	 __chkstk

; 851  :     zip64_internal ziinit;
; 852  :     zip64_internal* zi;
; 853  :     int err=ZIP_OK;
; 854  : 
; 855  :     ziinit.z_filefunc.zseek32_file = NULL;
; 856  :     ziinit.z_filefunc.ztell32_file = NULL;
; 857  :     if (pzlib_filefunc64_32_def==NULL)

  00010	8b 45 0c	 mov	 eax, DWORD PTR _pzlib_filefunc64_32_def$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	33 db		 xor	 ebx, ebx
  00017	89 5c 24 34	 mov	 DWORD PTR _ziinit$[esp+65852], ebx
  0001b	89 5c 24 30	 mov	 DWORD PTR _ziinit$[esp+65848], ebx
  0001f	57		 push	 edi
  00020	8b fa		 mov	 edi, edx
  00022	8b d1		 mov	 edx, ecx
  00024	85 c0		 test	 eax, eax
  00026	75 0b		 jne	 SHORT $LN2@zipOpen3

; 858  :         fill_fopen64_filefunc(&ziinit.z_filefunc.zfile_func64);

  00028	8d 4c 24 10	 lea	 ecx, DWORD PTR _ziinit$[esp+65816]
  0002c	e8 00 00 00 00	 call	 _fill_fopen64_filefunc
  00031	eb 23		 jmp	 SHORT $LN3@zipOpen3
$LN2@zipOpen3:

; 859  :     else
; 860  :         ziinit.z_filefunc = *pzlib_filefunc64_32_def;

  00033	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00036	0f 11 44 24 10	 movups	 XMMWORD PTR _ziinit$[esp+65816], xmm0
  0003b	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0003f	0f 11 44 24 20	 movups	 XMMWORD PTR _ziinit$[esp+65832], xmm0
  00044	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00049	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0004c	66 0f d6 44 24
	30		 movq	 QWORD PTR _ziinit$[esp+65848], xmm0
  00052	89 44 24 38	 mov	 DWORD PTR _ziinit$[esp+65856], eax
$LN3@zipOpen3:

; 861  : 
; 862  :     ziinit.filestream = ZOPEN64(ziinit.z_filefunc,

  00056	33 c0		 xor	 eax, eax
  00058	8d 4c 24 10	 lea	 ecx, DWORD PTR _ziinit$[esp+65816]
  0005c	85 ff		 test	 edi, edi
  0005e	0f 94 c0	 sete	 al
  00061	8d 04 85 07 00
	00 00		 lea	 eax, DWORD PTR [eax*4+7]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _call_zopen64
  0006e	8b f0		 mov	 esi, eax
  00070	83 c4 04	 add	 esp, 4
  00073	89 74 24 3c	 mov	 DWORD PTR _ziinit$[esp+65860], esi

; 863  :                   pathname,
; 864  :                   (append == APPEND_STATUS_CREATE) ?
; 865  :                   (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_CREATE) :
; 866  :                     (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_EXISTING));
; 867  : 
; 868  :     if (ziinit.filestream == NULL)

  00077	85 f6		 test	 esi, esi
  00079	74 7e		 je	 SHORT $LN14@zipOpen3

; 869  :         return NULL;
; 870  : 
; 871  :     if (append == APPEND_STATUS_CREATEAFTER)

  0007b	83 ff 01	 cmp	 edi, 1
  0007e	75 14		 jne	 SHORT $LN5@zipOpen3

; 872  :         ZSEEK64(ziinit.z_filefunc,ziinit.filestream,0,SEEK_END);

  00080	6a 02		 push	 2
  00082	6a 00		 push	 0
  00084	6a 00		 push	 0
  00086	8b d6		 mov	 edx, esi
  00088	8d 4c 24 1c	 lea	 ecx, DWORD PTR _ziinit$[esp+65828]
  0008c	e8 00 00 00 00	 call	 _call_zseek64
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@zipOpen3:

; 873  : 
; 874  :     ziinit.begin_pos = ZTELL64(ziinit.z_filefunc,ziinit.filestream);

  00094	8b d6		 mov	 edx, esi
  00096	8d 4c 24 10	 lea	 ecx, DWORD PTR _ziinit$[esp+65816]
  0009a	e8 00 00 00 00	 call	 _call_ztell64
  0009f	0f 57 c0	 xorps	 xmm0, xmm0
  000a2	89 84 24 f8 00
	01 00		 mov	 DWORD PTR _ziinit$[esp+131584], eax

; 875  :     ziinit.in_opened_file_inzip = 0;
; 876  :     ziinit.ci.stream_initialised = 0;
; 877  :     ziinit.number_entry = 0;
; 878  :     ziinit.add_position_when_writting_offset = 0;
; 879  :     init_linkedlist(&(ziinit.central_dir));

  000a9	8d 4c 24 40	 lea	 ecx, DWORD PTR _ziinit$[esp+65864]
  000ad	89 94 24 fc 00
	01 00		 mov	 DWORD PTR _ziinit$[esp+131588], edx
  000b4	89 5c 24 48	 mov	 DWORD PTR _ziinit$[esp+65872], ebx
  000b8	89 9c 24 88 00
	00 00		 mov	 DWORD PTR _ziinit$[esp+65936], ebx
  000bf	66 0f 13 84 24
	08 01 01 00	 movlpd	 QWORD PTR _ziinit$[esp+131600], xmm0
  000c8	66 0f 13 84 24
	00 01 01 00	 movlpd	 QWORD PTR _ziinit$[esp+131592], xmm0
  000d1	e8 00 00 00 00	 call	 _init_linkedlist

; 880  : 
; 881  : 
; 882  : 
; 883  :     zi = (zip64_internal*)ALLOC(sizeof(zip64_internal));

  000d6	68 08 01 01 00	 push	 65800			; 00010108H
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  000e1	8b f0		 mov	 esi, eax
  000e3	83 c4 04	 add	 esp, 4

; 884  :     if (zi==NULL)

  000e6	85 f6		 test	 esi, esi
  000e8	75 1a		 jne	 SHORT $LN6@zipOpen3

; 885  :     {
; 886  :         ZCLOSE64(ziinit.z_filefunc,ziinit.filestream);

  000ea	ff 74 24 3c	 push	 DWORD PTR _ziinit$[esp+65860]
  000ee	ff 74 24 30	 push	 DWORD PTR _ziinit$[esp+65848]
  000f2	ff 54 24 2c	 call	 DWORD PTR _ziinit$[esp+65844]
  000f6	83 c4 08	 add	 esp, 8
$LN14@zipOpen3:

; 917  :     }
; 918  : }

  000f9	33 c0		 xor	 eax, eax
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 08 00	 ret	 8
$LN6@zipOpen3:

; 887  :         return NULL;
; 888  :     }
; 889  : 
; 890  :     /* now we add file in a zipfile */
; 891  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 892  :     ziinit.globalcomment = NULL;

  00104	33 c0		 xor	 eax, eax
  00106	89 84 24 10 01
	01 00		 mov	 DWORD PTR _ziinit$[esp+131608], eax

; 893  :     if (append == APPEND_STATUS_ADDINZIP)

  0010d	83 ff 02	 cmp	 edi, 2
  00110	75 12		 jne	 SHORT $LN7@zipOpen3

; 894  :     {
; 895  :       // Read and Cache Central Directory Records
; 896  :       err = LoadCentralDirectoryRecord(&ziinit);

  00112	8d 4c 24 10	 lea	 ecx, DWORD PTR _ziinit$[esp+65816]
  00116	e8 00 00 00 00	 call	 _LoadCentralDirectoryRecord
  0011b	8b d8		 mov	 ebx, eax
  0011d	8b 84 24 10 01
	01 00		 mov	 eax, DWORD PTR _ziinit$[esp+131608]
$LN7@zipOpen3:

; 897  :     }
; 898  : 
; 899  :     if (globalcomment)

  00124	8b 4d 08	 mov	 ecx, DWORD PTR _globalcomment$[ebp]
  00127	85 c9		 test	 ecx, ecx
  00129	74 02		 je	 SHORT $LN8@zipOpen3

; 900  :     {
; 901  :       *globalcomment = ziinit.globalcomment;

  0012b	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@zipOpen3:

; 902  :     }
; 903  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 904  : 
; 905  :     if (err != ZIP_OK)

  0012d	85 db		 test	 ebx, ebx
  0012f	74 21		 je	 SHORT $LN9@zipOpen3

; 906  :     {
; 907  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 908  :         TRYFREE(ziinit.globalcomment);

  00131	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__free
  00137	85 c0		 test	 eax, eax
  00139	74 06		 je	 SHORT $LN11@zipOpen3
  0013b	50		 push	 eax
  0013c	ff d7		 call	 edi
  0013e	83 c4 04	 add	 esp, 4
$LN11@zipOpen3:

; 909  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 910  :         TRYFREE(zi);

  00141	56		 push	 esi
  00142	ff d7		 call	 edi
  00144	83 c4 04	 add	 esp, 4

; 911  :         return NULL;

  00147	33 c0		 xor	 eax, eax

; 917  :     }
; 918  : }

  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN9@zipOpen3:

; 912  :     }
; 913  :     else
; 914  :     {
; 915  :         *zi = ziinit;

  00152	68 08 01 01 00	 push	 65800			; 00010108H
  00157	8d 44 24 14	 lea	 eax, DWORD PTR _ziinit$[esp+65820]
  0015b	50		 push	 eax
  0015c	56		 push	 esi
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	83 c4 0c	 add	 esp, 12			; 0000000cH

; 916  :         return (zipFile)zi;

  00165	8b c6		 mov	 eax, esi

; 917  :     }
; 918  : }

  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	5b		 pop	 ebx
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c2 08 00	 ret	 8
_zipOpen3@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipOpen2@16
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -44			; size = 44
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc32_def$ = 20				; size = 4
_zipOpen2@16 PROC					; COMDAT

; 921  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 922  :     if (pzlib_filefunc32_def != NULL)

  00006	8b 55 14	 mov	 edx, DWORD PTR _pzlib_filefunc32_def$[ebp]
  00009	83 ec 30	 sub	 esp, 48			; 00000030H
  0000c	85 d2		 test	 edx, edx
  0000e	74 20		 je	 SHORT $LN2@zipOpen2

; 923  :     {
; 924  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 925  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  00010	8d 4c 24 04	 lea	 ecx, DWORD PTR _zlib_filefunc64_32_def_fill$1[esp+48]
  00014	e8 00 00 00 00	 call	 _fill_zlib_filefunc64_32_def_from_filefunc32

; 926  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);
; 927  :     }
; 928  :     else
; 929  :         return zipOpen3(pathname, append, globalcomment, NULL);
; 930  : }

  00019	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  0001c	8b c1		 mov	 eax, ecx
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  00021	50		 push	 eax
  00022	ff 75 10	 push	 DWORD PTR _globalcomment$[ebp]
  00025	e8 00 00 00 00	 call	 _zipOpen3@16
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
$LN2@zipOpen2:
  00030	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  00036	6a 00		 push	 0
  00038	ff 75 10	 push	 DWORD PTR _globalcomment$[ebp]
  0003b	e8 00 00 00 00	 call	 _zipOpen3@16
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 10 00	 ret	 16			; 00000010H
_zipOpen2@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipOpen2_64@16
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -44			; size = 44
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc_def$ = 20				; size = 4
_zipOpen2_64@16 PROC					; COMDAT

; 933  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 934  :     if (pzlib_filefunc_def != NULL)

  00006	8b 45 14	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00009	83 ec 30	 sub	 esp, 48			; 00000030H
  0000c	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  00012	85 c0		 test	 eax, eax
  00014	74 34		 je	 SHORT $LN2@zipOpen2_6

; 935  :     {
; 936  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 937  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  00016	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 938  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  00019	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[esp+84], 0

; 939  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  00021	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[esp+88], 0
  00029	0f 11 44 24 04	 movups	 XMMWORD PTR _zlib_filefunc64_32_def_fill$1[esp+48], xmm0
  0002e	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]

; 940  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00032	8d 44 24 04	 lea	 eax, DWORD PTR _zlib_filefunc64_32_def_fill$1[esp+48]
  00036	50		 push	 eax

; 944  : }

  00037	ff 75 10	 push	 DWORD PTR _globalcomment$[ebp]
  0003a	0f 11 44 24 1c	 movups	 XMMWORD PTR _zlib_filefunc64_32_def_fill$1[esp+72], xmm0
  0003f	e8 00 00 00 00	 call	 _zipOpen3@16
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 10 00	 ret	 16			; 00000010H
$LN2@zipOpen2_6:

; 941  :     }
; 942  :     else
; 943  :         return zipOpen3(pathname, append, globalcomment, NULL);

  0004a	6a 00		 push	 0

; 944  : }

  0004c	ff 75 10	 push	 DWORD PTR _globalcomment$[ebp]
  0004f	e8 00 00 00 00	 call	 _zipOpen3@16
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 10 00	 ret	 16			; 00000010H
_zipOpen2_64@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipOpen@8
_TEXT	SEGMENT
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_zipOpen@8 PROC						; COMDAT

; 949  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 950  :     return zipOpen3((const void*)pathname,append,NULL,NULL);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	e8 00 00 00 00	 call	 _zipOpen3@16

; 951  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
_zipOpen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipOpen64@8
_TEXT	SEGMENT
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_zipOpen64@8 PROC					; COMDAT

; 954  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 955  :     return zipOpen3(pathname,append,NULL,NULL);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	e8 00 00 00 00	 call	 _zipOpen3@16

; 956  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
_zipOpen64@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _Write_LocalFileHeader
_TEXT	SEGMENT
$T1 = -16						; size = 8
$T2 = -16						; size = 8
_filename$1$ = -4					; size = 4
_err$4$ = 8						; size = 4
_size_extrafield_local$ = 8				; size = 4
_extrafield_local$ = 12					; size = 4
_Write_LocalFileHeader PROC				; COMDAT
; _zi$ = ecx
; _filename$ = edx

; 959  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b c2		 mov	 eax, edx
  0000a	8b f1		 mov	 esi, ecx
  0000c	57		 push	 edi

; 960  :   /* write the local header */
; 961  :   int err;
; 962  :   uInt size_filename = (uInt)strlen(filename);

  0000d	8b f8		 mov	 edi, eax
  0000f	89 45 fc	 mov	 DWORD PTR _filename$1$[ebp], eax
  00012	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL26@Write_Loca:
  00015	8a 07		 mov	 al, BYTE PTR [edi]
  00017	47		 inc	 edi
  00018	84 c0		 test	 al, al
  0001a	75 f9		 jne	 SHORT $LL26@Write_Loca

; 963  :   uInt size_extrafield = size_extrafield_local;
; 964  : 
; 965  :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)LOCALHEADERMAGIC, 4);

  0001c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0001f	2b f9		 sub	 edi, ecx
  00021	6a 04		 push	 4
  00023	6a 00		 push	 0
  00025	68 50 4b 03 04	 push	 67324752		; 04034b50H
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 _zip64local_putValue
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 966  : 
; 967  :   if (err==ZIP_OK)

  00034	85 c0		 test	 eax, eax
  00036	0f 85 fb 01 00
	00		 jne	 $LN22@Write_Loca

; 968  :   {
; 969  :     if(zi->ci.zip64)

  0003c	39 86 b0 00 01
	00		 cmp	 DWORD PTR [esi+65712], eax

; 970  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);/* version needed to extract */

  00042	b8 2d 00 00 00	 mov	 eax, 45			; 0000002dH
  00047	75 05		 jne	 SHORT $LN4@Write_Loca

; 971  :     else
; 972  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)20,2);/* version needed to extract */

  00049	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
$LN4@Write_Loca:

; 973  :   }
; 974  : 
; 975  :   if (err==ZIP_OK)

  0004e	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00051	8b ce		 mov	 ecx, esi
  00053	6a 02		 push	 2
  00055	6a 00		 push	 0
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _zip64local_putValue
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	85 c0		 test	 eax, eax
  00062	0f 85 cf 01 00
	00		 jne	 $LN22@Write_Loca

; 976  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.flag,2);

  00068	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0006b	8b ce		 mov	 ecx, esi
  0006d	6a 02		 push	 2
  0006f	50		 push	 eax
  00070	ff b6 98 00 00
	00		 push	 DWORD PTR [esi+152]
  00076	e8 00 00 00 00	 call	 _zip64local_putValue
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 977  : 
; 978  :   if (err==ZIP_OK)

  0007e	85 c0		 test	 eax, eax
  00080	0f 85 b1 01 00
	00		 jne	 $LN22@Write_Loca

; 979  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.method,2);

  00086	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00089	8b ce		 mov	 ecx, esi
  0008b	6a 02		 push	 2
  0008d	50		 push	 eax
  0008e	ff b6 9c 00 00
	00		 push	 DWORD PTR [esi+156]
  00094	e8 00 00 00 00	 call	 _zip64local_putValue
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH

; 980  : 
; 981  :   if (err==ZIP_OK)

  0009c	85 c0		 test	 eax, eax
  0009e	0f 85 93 01 00
	00		 jne	 $LN22@Write_Loca

; 982  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.dosDate,4);

  000a4	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000a7	8b ce		 mov	 ecx, esi
  000a9	6a 04		 push	 4
  000ab	50		 push	 eax
  000ac	ff b6 a4 00 01
	00		 push	 DWORD PTR [esi+65700]
  000b2	e8 00 00 00 00	 call	 _zip64local_putValue
  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 983  : 
; 984  :   // CRC / Compressed size / Uncompressed size will be filled in later and rewritten later
; 985  :   if (err==ZIP_OK)

  000ba	85 c0		 test	 eax, eax
  000bc	0f 85 75 01 00
	00		 jne	 $LN22@Write_Loca

; 986  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* crc 32, unknown */

  000c2	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000c5	8b ce		 mov	 ecx, esi
  000c7	6a 04		 push	 4
  000c9	50		 push	 eax
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _zip64local_putValue
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 987  :   if (err==ZIP_OK)

  000d3	85 c0		 test	 eax, eax
  000d5	0f 85 5c 01 00
	00		 jne	 $LN22@Write_Loca

; 988  :   {
; 989  :     if(zi->ci.zip64)

  000db	39 86 b0 00 01
	00		 cmp	 DWORD PTR [esi+65712], eax
  000e1	74 07		 je	 SHORT $LN10@Write_Loca

; 990  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* compressed size, unknown */

  000e3	83 c8 ff	 or	 eax, -1
  000e6	33 c9		 xor	 ecx, ecx
  000e8	eb 0e		 jmp	 SHORT $LN11@Write_Loca
$LN10@Write_Loca:
  000ea	0f 57 c0	 xorps	 xmm0, xmm0

; 991  :     else
; 992  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* compressed size, unknown */

  000ed	66 0f 13 45 f0	 movlpd	 QWORD PTR $T1[ebp], xmm0
  000f2	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp+4]
  000f5	8b 45 f0	 mov	 eax, DWORD PTR $T1[ebp]
$LN11@Write_Loca:

; 993  :   }
; 994  :   if (err==ZIP_OK)

  000f8	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000fb	6a 04		 push	 4
  000fd	51		 push	 ecx
  000fe	50		 push	 eax
  000ff	8b ce		 mov	 ecx, esi
  00101	e8 00 00 00 00	 call	 _zip64local_putValue
  00106	83 c4 0c	 add	 esp, 12			; 0000000cH
  00109	85 c0		 test	 eax, eax
  0010b	0f 85 26 01 00
	00		 jne	 $LN22@Write_Loca

; 995  :   {
; 996  :     if(zi->ci.zip64)

  00111	39 86 b0 00 01
	00		 cmp	 DWORD PTR [esi+65712], eax
  00117	74 07		 je	 SHORT $LN13@Write_Loca

; 997  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* uncompressed size, unknown */

  00119	83 c8 ff	 or	 eax, -1
  0011c	33 c9		 xor	 ecx, ecx
  0011e	eb 0e		 jmp	 SHORT $LN14@Write_Loca
$LN13@Write_Loca:
  00120	0f 57 c0	 xorps	 xmm0, xmm0

; 998  :     else
; 999  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* uncompressed size, unknown */

  00123	66 0f 13 45 f0	 movlpd	 QWORD PTR $T2[ebp], xmm0
  00128	8b 4d f4	 mov	 ecx, DWORD PTR $T2[ebp+4]
  0012b	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
$LN14@Write_Loca:

; 1000 :   }
; 1001 : 
; 1002 :   if (err==ZIP_OK)

  0012e	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00131	6a 04		 push	 4
  00133	51		 push	 ecx
  00134	50		 push	 eax
  00135	8b ce		 mov	 ecx, esi
  00137	e8 00 00 00 00	 call	 _zip64local_putValue
  0013c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013f	85 c0		 test	 eax, eax
  00141	0f 85 f0 00 00
	00		 jne	 $LN22@Write_Loca

; 1003 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_filename,2);

  00147	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0014a	8b ce		 mov	 ecx, esi
  0014c	6a 02		 push	 2
  0014e	50		 push	 eax
  0014f	57		 push	 edi
  00150	e8 00 00 00 00	 call	 _zip64local_putValue
  00155	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1004 : 
; 1005 :   if(zi->ci.zip64)
; 1006 :   {
; 1007 :     size_extrafield += 20;
; 1008 :   }
; 1009 : 
; 1010 :   if (err==ZIP_OK)

  00158	85 c0		 test	 eax, eax
  0015a	0f 85 d7 00 00
	00		 jne	 $LN22@Write_Loca
  00160	8b 5d 08	 mov	 ebx, DWORD PTR _size_extrafield_local$[ebp]

; 1011 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_extrafield,2);

  00163	8b ce		 mov	 ecx, esi
  00165	83 be b0 00 01
	00 00		 cmp	 DWORD PTR [esi+65712], 0
  0016c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0016f	6a 02		 push	 2
  00171	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  00174	0f 44 c3	 cmove	 eax, ebx
  00177	6a 00		 push	 0
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 _zip64local_putValue
  0017f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00182	89 45 08	 mov	 DWORD PTR _err$4$[ebp], eax

; 1012 : 
; 1013 :   if ((err==ZIP_OK) && (size_filename > 0))

  00185	85 c0		 test	 eax, eax
  00187	0f 85 aa 00 00
	00		 jne	 $LN22@Write_Loca
  0018d	85 ff		 test	 edi, edi
  0018f	74 20		 je	 SHORT $LN24@Write_Loca

; 1014 :   {
; 1015 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,filename,size_filename)!=size_filename)

  00191	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00194	57		 push	 edi
  00195	ff 75 fc	 push	 DWORD PTR _filename$1$[ebp]
  00198	ff 76 2c	 push	 DWORD PTR [esi+44]
  0019b	ff 76 1c	 push	 DWORD PTR [esi+28]
  0019e	ff d0		 call	 eax
  001a0	83 c4 10	 add	 esp, 16			; 00000010H
  001a3	3b c7		 cmp	 eax, edi
  001a5	74 0a		 je	 SHORT $LN24@Write_Loca
$LN31@Write_Loca:

; 1045 : }

  001a7	83 c8 ff	 or	 eax, -1
  001aa	5f		 pop	 edi
  001ab	5e		 pop	 esi
  001ac	5b		 pop	 ebx
  001ad	8b e5		 mov	 esp, ebp
  001af	5d		 pop	 ebp
  001b0	c3		 ret	 0
$LN24@Write_Loca:

; 1016 :       err = ZIP_ERRNO;
; 1017 :   }
; 1018 : 
; 1019 :   if ((err==ZIP_OK) && (size_extrafield_local > 0))

  001b1	85 db		 test	 ebx, ebx
  001b3	74 16		 je	 SHORT $LN25@Write_Loca

; 1020 :   {
; 1021 :     if (ZWRITE64(zi->z_filefunc, zi->filestream, extrafield_local, size_extrafield_local) != size_extrafield_local)

  001b5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001b8	53		 push	 ebx
  001b9	ff 75 0c	 push	 DWORD PTR _extrafield_local$[ebp]
  001bc	ff 76 2c	 push	 DWORD PTR [esi+44]
  001bf	ff 76 1c	 push	 DWORD PTR [esi+28]
  001c2	ff d0		 call	 eax
  001c4	83 c4 10	 add	 esp, 16			; 00000010H
  001c7	3b c3		 cmp	 eax, ebx
  001c9	75 dc		 jne	 SHORT $LN31@Write_Loca
$LN25@Write_Loca:

; 1022 :       err = ZIP_ERRNO;
; 1023 :   }
; 1024 : 
; 1025 : 
; 1026 :   if ((err==ZIP_OK) && (zi->ci.zip64))

  001cb	83 be b0 00 01
	00 00		 cmp	 DWORD PTR [esi+65712], 0
  001d2	74 60		 je	 SHORT $LN27@Write_Loca

; 1027 :   {
; 1028 :       // write the Zip64 extended info
; 1029 :       short HeaderID = 1;
; 1030 :       short DataSize = 16;
; 1031 :       ZPOS64_T CompressedSize = 0;
; 1032 :       ZPOS64_T UncompressedSize = 0;
; 1033 : 
; 1034 :       // Remember position of Zip64 extended info for the local file header. (needed when we update size after done with file)
; 1035 :       zi->ci.pos_zip64extrainfo = ZTELL64(zi->z_filefunc,zi->filestream);

  001d4	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  001d7	8b ce		 mov	 ecx, esi
  001d9	e8 00 00 00 00	 call	 _call_ztell64

; 1036 : 
; 1037 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)HeaderID,2);

  001de	6a 02		 push	 2
  001e0	89 96 bc 00 01
	00		 mov	 DWORD PTR [esi+65724], edx
  001e6	8b ce		 mov	 ecx, esi
  001e8	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  001eb	6a 00		 push	 0
  001ed	6a 01		 push	 1
  001ef	89 86 b8 00 01
	00		 mov	 DWORD PTR [esi+65720], eax
  001f5	e8 00 00 00 00	 call	 _zip64local_putValue

; 1038 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)DataSize,2);

  001fa	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  001fd	8b ce		 mov	 ecx, esi
  001ff	6a 02		 push	 2
  00201	6a 00		 push	 0
  00203	6a 10		 push	 16			; 00000010H
  00205	e8 00 00 00 00	 call	 _zip64local_putValue

; 1039 : 
; 1040 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)UncompressedSize,8);

  0020a	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0020d	8b ce		 mov	 ecx, esi
  0020f	6a 08		 push	 8
  00211	6a 00		 push	 0
  00213	6a 00		 push	 0
  00215	e8 00 00 00 00	 call	 _zip64local_putValue

; 1041 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)CompressedSize,8);

  0021a	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0021d	8b ce		 mov	 ecx, esi
  0021f	6a 08		 push	 8
  00221	6a 00		 push	 0
  00223	6a 00		 push	 0
  00225	e8 00 00 00 00	 call	 _zip64local_putValue
  0022a	83 c4 30	 add	 esp, 48			; 00000030H

; 1045 : }

  0022d	5f		 pop	 edi
  0022e	5e		 pop	 esi
  0022f	5b		 pop	 ebx
  00230	8b e5		 mov	 esp, ebp
  00232	5d		 pop	 ebp
  00233	c3		 ret	 0
$LN27@Write_Loca:

; 1042 :   }
; 1043 : 
; 1044 :   return err;

  00234	8b 45 08	 mov	 eax, DWORD PTR _err$4$[ebp]
$LN22@Write_Loca:

; 1045 : }

  00237	5f		 pop	 edi
  00238	5e		 pop	 esi
  00239	5b		 pop	 ebx
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c3		 ret	 0
_Write_LocalFileHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip4_64@76
_TEXT	SEGMENT
_size_comment$1$ = -28					; size = 4
_i$3$ = -24						; size = 4
$T1 = -24						; size = 8
$T2 = -24						; size = 8
_bufHead$3 = -24					; size = 12
tv1180 = -4						; size = 4
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_versionMadeBy$ = 72					; size = 4
_flagBase$ = 76						; size = 4
_zip64$ = 80						; size = 4
_zipOpenNewFileInZip4_64@76 PROC			; COMDAT

; 1062 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1063 :     zip64_internal* zi;
; 1064 :     uInt size_filename;
; 1065 :     uInt size_comment;
; 1066 :     uInt i;
; 1067 :     int err = ZIP_OK;
; 1068 : 
; 1069 : #    ifdef NOCRYPT
; 1070 :     if (password != NULL)
; 1071 :         return ZIP_PARAMERROR;
; 1072 : #    endif
; 1073 : 
; 1074 :     if (file == NULL)

  0000b	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000e	57		 push	 edi
  0000f	85 f6		 test	 esi, esi
  00011	0f 84 00 05 00
	00		 je	 $LN57@zipOpenNew

; 1075 :         return ZIP_PARAMERROR;
; 1076 : 
; 1077 : #ifdef HAVE_BZIP2
; 1078 :     if ((method!=0) && (method!=Z_DEFLATED) && (method!=Z_BZIP2ED))
; 1079 :       return ZIP_PARAMERROR;
; 1080 : #else
; 1081 :     if ((method!=0) && (method!=Z_DEFLATED))

  00017	8b 45 28	 mov	 eax, DWORD PTR _method$[ebp]
  0001a	85 c0		 test	 eax, eax
  0001c	74 09		 je	 SHORT $LN12@zipOpenNew
  0001e	83 f8 08	 cmp	 eax, 8
  00021	0f 85 f0 04 00
	00		 jne	 $LN57@zipOpenNew
$LN12@zipOpenNew:

; 1083 : #endif
; 1084 : 
; 1085 :     zi = (zip64_internal*)file;
; 1086 : 
; 1087 :     if (zi->in_opened_file_inzip == 1)

  00027	83 7e 38 01	 cmp	 DWORD PTR [esi+56], 1
  0002b	75 0e		 jne	 SHORT $LN14@zipOpenNew

; 1088 :     {
; 1089 :         err = zipCloseFileInZip (file);

  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 _zipCloseFileInZip@4

; 1090 :         if (err != ZIP_OK)

  00033	85 c0		 test	 eax, eax
  00035	0f 85 e1 04 00
	00		 jne	 $LN1@zipOpenNew
$LN14@zipOpenNew:

; 1091 :             return err;
; 1092 :     }
; 1093 : 
; 1094 :     if (filename==NULL)
; 1095 :         filename="-";
; 1096 : 
; 1097 :     if (comment==NULL)

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01JOAMLHOP@?9@
  00043	85 c0		 test	 eax, eax
  00045	0f 45 c8	 cmovne	 ecx, eax
  00048	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  0004b	89 4c 24 24	 mov	 DWORD PTR tv1180[esp+40], ecx
  0004f	85 c0		 test	 eax, eax
  00051	75 04		 jne	 SHORT $LN16@zipOpenNew

; 1098 :         size_comment = 0;

  00053	33 db		 xor	 ebx, ebx
  00055	eb 12		 jmp	 SHORT $LN61@zipOpenNew
$LN16@zipOpenNew:

; 1099 :     else
; 1100 :         size_comment = (uInt)strlen(comment);

  00057	8b d8		 mov	 ebx, eax
  00059	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
  0005c	0f 1f 40 00	 npad	 4
$LL58@zipOpenNew:
  00060	8a 03		 mov	 al, BYTE PTR [ebx]
  00062	43		 inc	 ebx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL58@zipOpenNew
  00067	2b da		 sub	 ebx, edx
$LN61@zipOpenNew:

; 1101 : 
; 1102 :     size_filename = (uInt)strlen(filename);

  00069	8b f9		 mov	 edi, ecx
  0006b	89 5c 24 0c	 mov	 DWORD PTR _size_comment$1$[esp+40], ebx
  0006f	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL59@zipOpenNew:
  00072	8a 07		 mov	 al, BYTE PTR [edi]
  00074	47		 inc	 edi
  00075	84 c0		 test	 al, al
  00077	75 f9		 jne	 SHORT $LL59@zipOpenNew

; 1103 : 
; 1104 :     if (zipfi == NULL)

  00079	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  0007c	2b f9		 sub	 edi, ecx
  0007e	85 c0		 test	 eax, eax
  00080	75 04		 jne	 SHORT $LN18@zipOpenNew

; 1105 :         zi->ci.dosDate = 0;

  00082	33 c9		 xor	 ecx, ecx
  00084	eb 10		 jmp	 SHORT $LN21@zipOpenNew
$LN18@zipOpenNew:

; 1106 :     else
; 1107 :     {
; 1108 :         if (zipfi->dosDate != 0)

  00086	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00089	85 c9		 test	 ecx, ecx
  0008b	75 09		 jne	 SHORT $LN21@zipOpenNew

; 1109 :             zi->ci.dosDate = zipfi->dosDate;
; 1110 :         else
; 1111 :           zi->ci.dosDate = zip64local_TmzDateToDosDate(&zipfi->tmz_date);

  0008d	8b c8		 mov	 ecx, eax
  0008f	e8 00 00 00 00	 call	 _zip64local_TmzDateToDosDate
  00094	8b c8		 mov	 ecx, eax
$LN21@zipOpenNew:

; 1112 :     }
; 1113 : 
; 1114 :     zi->ci.flag = flagBase;

  00096	8b 45 4c	 mov	 eax, DWORD PTR _flagBase$[ebp]
  00099	89 8e a4 00 01
	00		 mov	 DWORD PTR [esi+65700], ecx

; 1115 :     if ((level==8) || (level==9))

  0009f	8b 4d 2c	 mov	 ecx, DWORD PTR _level$[ebp]
  000a2	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
  000a8	83 f9 08	 cmp	 ecx, 8
  000ab	74 05		 je	 SHORT $LN23@zipOpenNew
  000ad	83 f9 09	 cmp	 ecx, 9
  000b0	75 09		 jne	 SHORT $LN22@zipOpenNew
$LN23@zipOpenNew:

; 1116 :       zi->ci.flag |= 2;

  000b2	83 c8 02	 or	 eax, 2
  000b5	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN22@zipOpenNew:

; 1117 :     if ((level==2))

  000bb	83 f9 02	 cmp	 ecx, 2
  000be	75 09		 jne	 SHORT $LN24@zipOpenNew

; 1118 :       zi->ci.flag |= 4;

  000c0	83 c8 04	 or	 eax, 4
  000c3	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN24@zipOpenNew:

; 1119 :     if ((level==1))

  000c9	83 f9 01	 cmp	 ecx, 1
  000cc	75 09		 jne	 SHORT $LN25@zipOpenNew

; 1120 :       zi->ci.flag |= 6;

  000ce	83 c8 06	 or	 eax, 6
  000d1	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN25@zipOpenNew:

; 1121 :     if (password != NULL)

  000d7	83 7d 40 00	 cmp	 DWORD PTR _password$[ebp], 0
  000db	74 09		 je	 SHORT $LN26@zipOpenNew

; 1122 :       zi->ci.flag |= 1;

  000dd	83 c8 01	 or	 eax, 1
  000e0	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN26@zipOpenNew:

; 1123 : 
; 1124 :     zi->ci.crc32 = 0;
; 1125 :     zi->ci.method = method;

  000e6	8b 45 28	 mov	 eax, DWORD PTR _method$[ebp]

; 1126 :     zi->ci.encrypt = 0;
; 1127 :     zi->ci.stream_initialised = 0;
; 1128 :     zi->ci.pos_in_buffered_data = 0;
; 1129 :     zi->ci.raw = raw;
; 1130 :     zi->ci.pos_local_header = ZTELL64(zi->z_filefunc,zi->filestream);

  000e9	8b ce		 mov	 ecx, esi
  000eb	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000ee	89 86 9c 00 00
	00		 mov	 DWORD PTR [esi+156], eax
  000f4	8b 45 30	 mov	 eax, DWORD PTR _raw$[ebp]
  000f7	c7 86 a8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65704], 0
  00101	c7 86 ac 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65708], 0
  0010b	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  00112	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  00119	89 86 a0 00 00
	00		 mov	 DWORD PTR [esi+160], eax
  0011f	e8 00 00 00 00	 call	 _call_ztell64

; 1131 : 
; 1132 :     zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename + size_extrafield_global + size_comment;

  00124	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00127	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  0012d	83 c1 2e	 add	 ecx, 46			; 0000002eH
  00130	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00133	89 96 84 00 00
	00		 mov	 DWORD PTR [esi+132], edx
  00139	03 c1		 add	 eax, ecx

; 1133 :     zi->ci.size_centralExtraFree = 32; // Extra space we have reserved in case we need to add ZIP64 extra info data

  0013b	c7 86 94 00 00
	00 20 00 00 00	 mov	 DWORD PTR [esi+148], 32	; 00000020H
  00145	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 1134 : 
; 1135 :     zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader + zi->ci.size_centralExtraFree);

  0014b	83 c0 20	 add	 eax, 32			; 00000020H
  0014e	50		 push	 eax
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc

; 1136 : 
; 1137 :     zi->ci.size_centralExtra = size_extrafield_global;

  00155	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00158	83 c4 04	 add	 esp, 4
  0015b	89 8e 8c 00 00
	00		 mov	 DWORD PTR [esi+140], ecx

; 1138 :     zip64local_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);

  00161	ba 04 00 00 00	 mov	 edx, 4
  00166	8b c8		 mov	 ecx, eax
  00168	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  0016e	6a 00		 push	 0
  00170	68 50 4b 01 02	 push	 33639248		; 02014b50H
  00175	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1139 :     /* version info */
; 1140 :     zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)versionMadeBy,2);

  0017a	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00180	6a 00		 push	 0
  00182	ff 75 48	 push	 DWORD PTR _versionMadeBy$[ebp]
  00185	03 ca		 add	 ecx, edx
  00187	ba 02 00 00 00	 mov	 edx, 2
  0018c	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1141 :     zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);

  00191	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00197	6a 00		 push	 0
  00199	6a 14		 push	 20			; 00000014H
  0019b	83 c1 06	 add	 ecx, 6
  0019e	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1142 :     zip64local_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);

  001a3	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  001a9	6a 00		 push	 0
  001ab	ff b6 98 00 00
	00		 push	 DWORD PTR [esi+152]
  001b1	83 c1 08	 add	 ecx, 8
  001b4	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1143 :     zip64local_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);

  001b9	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  001bf	6a 00		 push	 0
  001c1	ff b6 9c 00 00
	00		 push	 DWORD PTR [esi+156]
  001c7	83 c1 0a	 add	 ecx, 10			; 0000000aH
  001ca	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1144 :     zip64local_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);

  001cf	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  001d5	ba 04 00 00 00	 mov	 edx, 4
  001da	6a 00		 push	 0
  001dc	ff b6 a4 00 01
	00		 push	 DWORD PTR [esi+65700]
  001e2	83 c1 0c	 add	 ecx, 12			; 0000000cH
  001e5	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1145 :     zip64local_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/

  001ea	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  001f0	6a 00		 push	 0
  001f2	6a 00		 push	 0
  001f4	83 c1 10	 add	 ecx, 16			; 00000010H
  001f7	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1146 :     zip64local_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/

  001fc	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00202	6a 00		 push	 0
  00204	6a 00		 push	 0
  00206	83 c1 14	 add	 ecx, 20			; 00000014H
  00209	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1147 :     zip64local_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/

  0020e	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00214	83 c4 40	 add	 esp, 64			; 00000040H
  00217	83 c1 18	 add	 ecx, 24			; 00000018H
  0021a	6a 00		 push	 0
  0021c	6a 00		 push	 0
  0021e	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1148 :     zip64local_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);

  00223	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00229	ba 02 00 00 00	 mov	 edx, 2
  0022e	6a 00		 push	 0
  00230	57		 push	 edi
  00231	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00234	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1149 :     zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);

  00239	6a 00		 push	 0
  0023b	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00241	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00244	83 c1 1e	 add	 ecx, 30			; 0000001eH
  00247	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1150 :     zip64local_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);

  0024c	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00252	6a 00		 push	 0
  00254	53		 push	 ebx
  00255	83 c1 20	 add	 ecx, 32			; 00000020H
  00258	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1151 :     zip64local_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/

  0025d	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00263	6a 00		 push	 0
  00265	6a 00		 push	 0
  00267	83 c1 22	 add	 ecx, 34			; 00000022H
  0026a	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1152 : 
; 1153 :     if (zipfi==NULL)

  0026f	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  00272	83 c4 28	 add	 esp, 40			; 00000028H
  00275	85 c0		 test	 eax, eax
  00277	75 13		 jne	 SHORT $LN27@zipOpenNew

; 1154 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2);

  00279	0f 57 c0	 xorps	 xmm0, xmm0
  0027c	66 0f 13 44 24
	10		 movlpd	 QWORD PTR $T2[esp+40], xmm0
  00282	8b 44 24 14	 mov	 eax, DWORD PTR $T2[esp+44]
  00286	8b 4c 24 10	 mov	 ecx, DWORD PTR $T2[esp+40]
  0028a	eb 05		 jmp	 SHORT $LN28@zipOpenNew
$LN27@zipOpenNew:

; 1155 :     else
; 1156 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2);

  0028c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0028f	33 c0		 xor	 eax, eax
$LN28@zipOpenNew:

; 1157 : 
; 1158 :     if (zipfi==NULL)

  00291	50		 push	 eax
  00292	51		 push	 ecx
  00293	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00299	83 c1 24	 add	 ecx, 36			; 00000024H
  0029c	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002a1	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  002a4	83 c4 08	 add	 esp, 8
  002a7	85 c0		 test	 eax, eax
  002a9	75 13		 jne	 SHORT $LN29@zipOpenNew

; 1159 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4);

  002ab	0f 57 c0	 xorps	 xmm0, xmm0
  002ae	66 0f 13 44 24
	10		 movlpd	 QWORD PTR $T1[esp+40], xmm0
  002b4	8b 44 24 14	 mov	 eax, DWORD PTR $T1[esp+44]
  002b8	8b 4c 24 10	 mov	 ecx, DWORD PTR $T1[esp+40]
  002bc	eb 05		 jmp	 SHORT $LN30@zipOpenNew
$LN29@zipOpenNew:

; 1160 :     else
; 1161 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);

  002be	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  002c1	33 c0		 xor	 eax, eax
$LN30@zipOpenNew:

; 1162 : 
; 1163 :     if(zi->ci.pos_local_header >= 0xffffffff)

  002c3	50		 push	 eax
  002c4	51		 push	 ecx
  002c5	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  002cb	ba 04 00 00 00	 mov	 edx, 4
  002d0	83 c1 26	 add	 ecx, 38			; 00000026H
  002d3	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002d8	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  002de	83 c4 08	 add	 esp, 8
  002e1	83 be 84 00 00
	00 00		 cmp	 DWORD PTR [esi+132], 0
  002e8	8b 96 88 00 00
	00		 mov	 edx, DWORD PTR [esi+136]
  002ee	77 15		 ja	 SHORT $LN60@zipOpenNew
  002f0	83 f8 ff	 cmp	 eax, -1
  002f3	73 10		 jae	 SHORT $LN60@zipOpenNew

; 1165 :     else
; 1166 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header - zi->add_position_when_writting_offset,4);

  002f5	33 c9		 xor	 ecx, ecx
  002f7	2b 86 f0 00 01
	00		 sub	 eax, DWORD PTR [esi+65776]
  002fd	1b 8e f4 00 01
	00		 sbb	 ecx, DWORD PTR [esi+65780]
  00303	eb 05		 jmp	 SHORT $LN32@zipOpenNew
$LN60@zipOpenNew:

; 1164 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)0xffffffff,4);

  00305	83 c8 ff	 or	 eax, -1
  00308	33 c9		 xor	 ecx, ecx
$LN32@zipOpenNew:

; 1167 : 
; 1168 :     for (i=0;i<size_filename;i++)

  0030a	51		 push	 ecx
  0030b	8d 4a 2a	 lea	 ecx, DWORD PTR [edx+42]
  0030e	ba 04 00 00 00	 mov	 edx, 4
  00313	50		 push	 eax
  00314	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00319	83 c4 08	 add	 esp, 8
  0031c	33 d2		 xor	 edx, edx
  0031e	85 ff		 test	 edi, edi
  00320	74 24		 je	 SHORT $LN3@zipOpenNew
  00322	8b 5c 24 24	 mov	 ebx, DWORD PTR tv1180[esp+40]
  00326	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@zipOpenNew:

; 1169 :         *(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);

  00330	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00336	8a 04 13	 mov	 al, BYTE PTR [ebx+edx]
  00339	88 44 0a 2e	 mov	 BYTE PTR [edx+ecx+46], al
  0033d	42		 inc	 edx
  0033e	3b d7		 cmp	 edx, edi
  00340	72 ee		 jb	 SHORT $LL4@zipOpenNew
  00342	8b 5c 24 0c	 mov	 ebx, DWORD PTR _size_comment$1$[esp+40]
$LN3@zipOpenNew:

; 1170 : 
; 1171 :     for (i=0;i<size_extrafield_global;i++)

  00346	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00349	85 c9		 test	 ecx, ecx
  0034b	74 22		 je	 SHORT $LN6@zipOpenNew
  0034d	33 db		 xor	 ebx, ebx
  0034f	90		 npad	 1
$LL7@zipOpenNew:

; 1172 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =

  00350	8b 45 1c	 mov	 eax, DWORD PTR _extrafield_global$[ebp]
  00353	8d 14 3b	 lea	 edx, DWORD PTR [ebx+edi]
  00356	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  0035c	8a 04 03	 mov	 al, BYTE PTR [ebx+eax]
  0035f	43		 inc	 ebx
  00360	88 44 0a 2e	 mov	 BYTE PTR [edx+ecx+46], al
  00364	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00367	3b d9		 cmp	 ebx, ecx
  00369	72 e5		 jb	 SHORT $LL7@zipOpenNew
  0036b	8b 5c 24 0c	 mov	 ebx, DWORD PTR _size_comment$1$[esp+40]
$LN6@zipOpenNew:

; 1173 :               *(((const char*)extrafield_global)+i);
; 1174 : 
; 1175 :     for (i=0;i<size_comment;i++)

  0036f	33 c0		 xor	 eax, eax
  00371	89 44 24 10	 mov	 DWORD PTR _i$3$[esp+40], eax
  00375	85 db		 test	 ebx, ebx
  00377	74 2e		 je	 SHORT $LN9@zipOpenNew
  00379	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@zipOpenNew:

; 1176 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+
; 1177 :               size_extrafield_global+i) = *(comment+i);

  00380	8b 5d 24	 mov	 ebx, DWORD PTR _comment$[ebp]
  00383	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  00386	03 d1		 add	 edx, ecx
  00388	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  0038e	8a 04 18	 mov	 al, BYTE PTR [eax+ebx]
  00391	88 44 0a 2e	 mov	 BYTE PTR [edx+ecx+46], al
  00395	8b 44 24 10	 mov	 eax, DWORD PTR _i$3$[esp+40]
  00399	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  0039c	40		 inc	 eax
  0039d	89 44 24 10	 mov	 DWORD PTR _i$3$[esp+40], eax
  003a1	3b 44 24 0c	 cmp	 eax, DWORD PTR _size_comment$1$[esp+40]
  003a5	72 d9		 jb	 SHORT $LL10@zipOpenNew
$LN9@zipOpenNew:

; 1178 :     if (zi->ci.central_header == NULL)

  003a7	83 be 88 00 00
	00 00		 cmp	 DWORD PTR [esi+136], 0
  003ae	75 0e		 jne	 SHORT $LN33@zipOpenNew

; 1179 :         return ZIP_INTERNALERROR;

  003b0	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H

; 1262 : }

  003b5	5f		 pop	 edi
  003b6	5e		 pop	 esi
  003b7	5b		 pop	 ebx
  003b8	8b e5		 mov	 esp, ebp
  003ba	5d		 pop	 ebp
  003bb	c2 4c 00	 ret	 76			; 0000004cH
$LN33@zipOpenNew:

; 1180 : 
; 1181 :     zi->ci.zip64 = zip64;
; 1182 :     zi->ci.totalCompressedData = 0;
; 1183 :     zi->ci.totalUncompressedData = 0;
; 1184 :     zi->ci.pos_zip64extrainfo = 0;
; 1185 : 
; 1186 :     err = Write_LocalFileHeader(zi, filename, size_extrafield_local, extrafield_local);

  003be	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  003c1	8b 45 50	 mov	 eax, DWORD PTR _zip64$[ebp]
  003c4	8b ce		 mov	 ecx, esi
  003c6	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  003c9	8b 54 24 2c	 mov	 edx, DWORD PTR tv1180[esp+48]
  003cd	89 86 b0 00 01
	00		 mov	 DWORD PTR [esi+65712], eax
  003d3	c7 86 c0 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65728], 0
  003dd	c7 86 c4 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65732], 0
  003e7	c7 86 c8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65736], 0
  003f1	c7 86 cc 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65740], 0
  003fb	c7 86 b8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65720], 0
  00405	c7 86 bc 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65724], 0
  0040f	e8 00 00 00 00	 call	 _Write_LocalFileHeader
  00414	8b d8		 mov	 ebx, eax

; 1187 : 
; 1188 : #ifdef HAVE_BZIP2
; 1189 :     zi->ci.bstream.avail_in = (uInt)0;
; 1190 :     zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1191 :     zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1192 :     zi->ci.bstream.total_in_hi32 = 0;
; 1193 :     zi->ci.bstream.total_in_lo32 = 0;
; 1194 :     zi->ci.bstream.total_out_hi32 = 0;
; 1195 :     zi->ci.bstream.total_out_lo32 = 0;
; 1196 : #endif
; 1197 : 
; 1198 :     zi->ci.stream.avail_in = (uInt)0;

  00416	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  0041d	83 c4 08	 add	 esp, 8

; 1199 :     zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  00420	c7 46 50 00 00
	01 00		 mov	 DWORD PTR [esi+80], 65536 ; 00010000H

; 1200 :     zi->ci.stream.next_out = zi->ci.buffered_data;
; 1201 :     zi->ci.stream.total_in = 0;

  00427	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  0042e	8d 8e a4 00 00
	00		 lea	 ecx, DWORD PTR [esi+164]
  00434	89 4e 4c	 mov	 DWORD PTR [esi+76], ecx

; 1202 :     zi->ci.stream.total_out = 0;

  00437	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0

; 1203 :     zi->ci.stream.data_type = Z_BINARY;

  0043e	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1204 : 
; 1205 : #ifdef HAVE_BZIP2
; 1206 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED || zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1207 : #else
; 1208 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00445	85 db		 test	 ebx, ebx
  00447	75 4d		 jne	 SHORT $LN38@zipOpenNew
  00449	83 be 9c 00 00
	00 08		 cmp	 DWORD PTR [esi+156], 8
  00450	75 44		 jne	 SHORT $LN38@zipOpenNew
  00452	39 86 a0 00 00
	00		 cmp	 DWORD PTR [esi+160], eax
  00458	75 3c		 jne	 SHORT $LN38@zipOpenNew

; 1209 : #endif
; 1210 :     {
; 1211 :         if(zi->ci.method == Z_DEFLATED)
; 1212 :         {
; 1213 :           zi->ci.stream.zalloc = (alloc_func)0;

  0045a	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1214 :           zi->ci.stream.zfree = (free_func)0;

  0045d	89 46 64	 mov	 DWORD PTR [esi+100], eax

; 1215 :           zi->ci.stream.opaque = (voidpf)0;

  00460	89 46 68	 mov	 DWORD PTR [esi+104], eax

; 1216 : 
; 1217 :           if (windowBits>0)
; 1218 :               windowBits = -windowBits;
; 1219 : 
; 1220 :           err = deflateInit2(&zi->ci.stream, level, Z_DEFLATED, windowBits, memLevel, strategy);

  00463	8b 45 34	 mov	 eax, DWORD PTR _windowBits$[ebp]
  00466	6a 38		 push	 56			; 00000038H
  00468	68 00 00 00 00	 push	 OFFSET ??_C@_05DFCKICEH@1?42?45@
  0046d	ff 75 3c	 push	 DWORD PTR _strategy$[ebp]
  00470	99		 cdq
  00471	ff 75 38	 push	 DWORD PTR _memLevel$[ebp]
  00474	33 c2		 xor	 eax, edx
  00476	2b c2		 sub	 eax, edx
  00478	f7 d8		 neg	 eax
  0047a	50		 push	 eax
  0047b	6a 08		 push	 8
  0047d	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  00480	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  00483	50		 push	 eax
  00484	e8 00 00 00 00	 call	 _deflateInit2_@32
  00489	8b d8		 mov	 ebx, eax

; 1221 : 
; 1222 :           if (err==Z_OK)

  0048b	85 db		 test	 ebx, ebx
  0048d	75 07		 jne	 SHORT $LN38@zipOpenNew

; 1223 :               zi->ci.stream_initialised = Z_DEFLATED;

  0048f	c7 46 78 08 00
	00 00		 mov	 DWORD PTR [esi+120], 8
$LN38@zipOpenNew:

; 1224 :         }
; 1225 :         else if(zi->ci.method == Z_BZIP2ED)
; 1226 :         {
; 1227 : #ifdef HAVE_BZIP2
; 1228 :             // Init BZip stuff here
; 1229 :           zi->ci.bstream.bzalloc = 0;
; 1230 :           zi->ci.bstream.bzfree = 0;
; 1231 :           zi->ci.bstream.opaque = (voidpf)0;
; 1232 : 
; 1233 :           err = BZ2_bzCompressInit(&zi->ci.bstream, level, 0,35);
; 1234 :           if(err == BZ_OK)
; 1235 :             zi->ci.stream_initialised = Z_BZIP2ED;
; 1236 : #endif
; 1237 :         }
; 1238 : 
; 1239 :     }
; 1240 : 
; 1241 : #    ifndef NOCRYPT
; 1242 :     zi->ci.crypt_header_size = 0;

  00496	c7 86 e0 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65760], 0

; 1243 :     if ((err==Z_OK) && (password != NULL))

  004a0	85 db		 test	 ebx, ebx
  004a2	75 68		 jne	 SHORT $LN42@zipOpenNew
  004a4	8b 7d 40	 mov	 edi, DWORD PTR _password$[ebp]
  004a7	85 ff		 test	 edi, edi
  004a9	74 5a		 je	 SHORT $LN56@zipOpenNew

; 1244 :     {
; 1245 :         unsigned char bufHead[RAND_HEAD_LEN];
; 1246 :         unsigned int sizeHead;
; 1247 :         zi->ci.encrypt = 1;

  004ab	c7 86 ac 00 01
	00 01 00 00 00	 mov	 DWORD PTR [esi+65708], 1

; 1248 :         zi->ci.pcrc_32_tab = get_crc_table();

  004b5	e8 00 00 00 00	 call	 _get_crc_table@0

; 1249 :         /*init_keys(password,zi->ci.keys,zi->ci.pcrc_32_tab);*/
; 1250 : 
; 1251 :         sizeHead=crypthead(password,bufHead,RAND_HEAD_LEN,zi->ci.keys,zi->ci.pcrc_32_tab,crcForCrypting);

  004ba	ff 75 44	 push	 DWORD PTR _crcForCrypting$[ebp]
  004bd	89 86 dc 00 01
	00		 mov	 DWORD PTR [esi+65756], eax
  004c3	8d 54 24 14	 lea	 edx, DWORD PTR _bufHead$3[esp+44]
  004c7	50		 push	 eax
  004c8	8d 86 d0 00 01
	00		 lea	 eax, DWORD PTR [esi+65744]
  004ce	50		 push	 eax
  004cf	51		 push	 ecx
  004d0	8b cf		 mov	 ecx, edi
  004d2	e8 00 00 00 00	 call	 _crypthead

; 1252 :         zi->ci.crypt_header_size = sizeHead;
; 1253 : 
; 1254 :         if (ZWRITE64(zi->z_filefunc,zi->filestream,bufHead,sizeHead) != sizeHead)

  004d7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  004da	8b f8		 mov	 edi, eax
  004dc	57		 push	 edi
  004dd	8d 44 24 24	 lea	 eax, DWORD PTR _bufHead$3[esp+60]
  004e1	89 be e0 00 01
	00		 mov	 DWORD PTR [esi+65760], edi
  004e7	50		 push	 eax
  004e8	ff 76 2c	 push	 DWORD PTR [esi+44]
  004eb	ff 76 1c	 push	 DWORD PTR [esi+28]
  004ee	ff d1		 call	 ecx
  004f0	83 c4 20	 add	 esp, 32			; 00000020H
  004f3	3b c7		 cmp	 eax, edi
  004f5	74 0e		 je	 SHORT $LN56@zipOpenNew

; 1255 :                 err = ZIP_ERRNO;

  004f7	83 cb ff	 or	 ebx, -1

; 1261 :     return err;

  004fa	8b c3		 mov	 eax, ebx

; 1262 : }

  004fc	5f		 pop	 edi
  004fd	5e		 pop	 esi
  004fe	5b		 pop	 ebx
  004ff	8b e5		 mov	 esp, ebp
  00501	5d		 pop	 ebp
  00502	c2 4c 00	 ret	 76			; 0000004cH
$LN56@zipOpenNew:

; 1256 :     }
; 1257 : #    endif
; 1258 : 
; 1259 :     if (err==Z_OK)
; 1260 :         zi->in_opened_file_inzip = 1;

  00505	c7 46 38 01 00
	00 00		 mov	 DWORD PTR [esi+56], 1
$LN42@zipOpenNew:

; 1261 :     return err;

  0050c	8b c3		 mov	 eax, ebx

; 1262 : }

  0050e	5f		 pop	 edi
  0050f	5e		 pop	 esi
  00510	5b		 pop	 ebx
  00511	8b e5		 mov	 esp, ebp
  00513	5d		 pop	 ebp
  00514	c2 4c 00	 ret	 76			; 0000004cH
$LN57@zipOpenNew:

; 1082 :       return ZIP_PARAMERROR;

  00517	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
$LN1@zipOpenNew:

; 1262 : }

  0051c	5f		 pop	 edi
  0051d	5e		 pop	 esi
  0051e	5b		 pop	 ebx
  0051f	8b e5		 mov	 esp, ebp
  00521	5d		 pop	 ebp
  00522	c2 4c 00	 ret	 76			; 0000004cH
_zipOpenNewFileInZip4_64@76 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip3@64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_zipOpenNewFileInZip3@64 PROC				; COMDAT

; 1286 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1287 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	ff 75 44	 push	 DWORD PTR _crcForCrypting$[ebp]
  0000c	ff 75 40	 push	 DWORD PTR _password$[ebp]
  0000f	ff 75 3c	 push	 DWORD PTR _strategy$[ebp]
  00012	ff 75 38	 push	 DWORD PTR _memLevel$[ebp]
  00015	ff 75 34	 push	 DWORD PTR _windowBits$[ebp]
  00018	ff 75 30	 push	 DWORD PTR _raw$[ebp]
  0001b	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  0001e	ff 75 28	 push	 DWORD PTR _method$[ebp]
  00021	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  00024	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00027	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  0002a	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  0002d	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  00030	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  00033	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00036	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00039	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1288 :                                  extrafield_local, size_extrafield_local,
; 1289 :                                  extrafield_global, size_extrafield_global,
; 1290 :                                  comment, method, level, raw,
; 1291 :                                  windowBits, memLevel, strategy,
; 1292 :                                  password, crcForCrypting, VERSIONMADEBY, 0, 0);
; 1293 : }

  0003e	5d		 pop	 ebp
  0003f	c2 40 00	 ret	 64			; 00000040H
_zipOpenNewFileInZip3@64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip3_64@68
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_zip64$ = 72						; size = 4
_zipOpenNewFileInZip3_64@68 PROC			; COMDAT

; 1301 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1302 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  00003	ff 75 48	 push	 DWORD PTR _zip64$[ebp]
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	ff 75 44	 push	 DWORD PTR _crcForCrypting$[ebp]
  0000d	ff 75 40	 push	 DWORD PTR _password$[ebp]
  00010	ff 75 3c	 push	 DWORD PTR _strategy$[ebp]
  00013	ff 75 38	 push	 DWORD PTR _memLevel$[ebp]
  00016	ff 75 34	 push	 DWORD PTR _windowBits$[ebp]
  00019	ff 75 30	 push	 DWORD PTR _raw$[ebp]
  0001c	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  0001f	ff 75 28	 push	 DWORD PTR _method$[ebp]
  00022	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  00025	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00028	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  0002b	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  0002e	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  00031	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  00034	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00037	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0003a	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1303 :                                  extrafield_local, size_extrafield_local,
; 1304 :                                  extrafield_global, size_extrafield_global,
; 1305 :                                  comment, method, level, raw,
; 1306 :                                  windowBits, memLevel, strategy,
; 1307 :                                  password, crcForCrypting, VERSIONMADEBY, 0, zip64);
; 1308 : }

  0003f	5d		 pop	 ebp
  00040	c2 44 00	 ret	 68			; 00000044H
_zipOpenNewFileInZip3_64@68 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip2@44
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_zipOpenNewFileInZip2@44 PROC				; COMDAT

; 1314 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1315 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 08		 push	 8
  00011	6a f1		 push	 -15			; fffffff1H
  00013	ff 75 30	 push	 DWORD PTR _raw$[ebp]
  00016	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  00019	ff 75 28	 push	 DWORD PTR _method$[ebp]
  0001c	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  0001f	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00022	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  00025	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  00028	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  0002b	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  0002e	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00031	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00034	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1316 :                                  extrafield_local, size_extrafield_local,
; 1317 :                                  extrafield_global, size_extrafield_global,
; 1318 :                                  comment, method, level, raw,
; 1319 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1320 :                                  NULL, 0, VERSIONMADEBY, 0, 0);
; 1321 : }

  00039	5d		 pop	 ebp
  0003a	c2 2c 00	 ret	 44			; 0000002cH
_zipOpenNewFileInZip2@44 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip2_64@48
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_zip64$ = 52						; size = 4
_zipOpenNewFileInZip2_64@48 PROC			; COMDAT

; 1327 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1328 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  00003	ff 75 34	 push	 DWORD PTR _zip64$[ebp]
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	6a 08		 push	 8
  00012	6a f1		 push	 -15			; fffffff1H
  00014	ff 75 30	 push	 DWORD PTR _raw$[ebp]
  00017	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  0001a	ff 75 28	 push	 DWORD PTR _method$[ebp]
  0001d	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  00020	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00023	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  00026	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  00029	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  0002c	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  0002f	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00032	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00035	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1329 :                                  extrafield_local, size_extrafield_local,
; 1330 :                                  extrafield_global, size_extrafield_global,
; 1331 :                                  comment, method, level, raw,
; 1332 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1333 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);
; 1334 : }

  0003a	5d		 pop	 ebp
  0003b	c2 30 00	 ret	 48			; 00000030H
_zipOpenNewFileInZip2_64@48 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip64@44
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_zip64$ = 48						; size = 4
_zipOpenNewFileInZip64@44 PROC				; COMDAT

; 1340 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1341 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  00003	ff 75 30	 push	 DWORD PTR _zip64$[ebp]
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	6a 08		 push	 8
  00012	6a f1		 push	 -15			; fffffff1H
  00014	6a 00		 push	 0
  00016	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  00019	ff 75 28	 push	 DWORD PTR _method$[ebp]
  0001c	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  0001f	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00022	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  00025	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  00028	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  0002b	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  0002e	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00031	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00034	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1342 :                                  extrafield_local, size_extrafield_local,
; 1343 :                                  extrafield_global, size_extrafield_global,
; 1344 :                                  comment, method, level, 0,
; 1345 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1346 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);
; 1347 : }

  00039	5d		 pop	 ebp
  0003a	c2 2c 00	 ret	 44			; 0000002cH
_zipOpenNewFileInZip64@44 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip@40
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_zipOpenNewFileInZip@40 PROC				; COMDAT

; 1353 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1354 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 08		 push	 8
  00011	6a f1		 push	 -15			; fffffff1H
  00013	6a 00		 push	 0
  00015	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  00018	ff 75 28	 push	 DWORD PTR _method$[ebp]
  0001b	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  0001e	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00021	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  00024	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  00027	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  0002a	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  0002d	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00030	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00033	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1355 :                                  extrafield_local, size_extrafield_local,
; 1356 :                                  extrafield_global, size_extrafield_global,
; 1357 :                                  comment, method, level, 0,
; 1358 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1359 :                                  NULL, 0, VERSIONMADEBY, 0, 0);
; 1360 : }

  00038	5d		 pop	 ebp
  00039	c2 28 00	 ret	 40			; 00000028H
_zipOpenNewFileInZip@40 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zip64FlushWriteBuffer
_TEXT	SEGMENT
tv248 = -4						; size = 4
_zip64FlushWriteBuffer PROC				; COMDAT
; _zi$ = ecx

; 1363 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 1364 :     int err=ZIP_OK;

  00008	33 db		 xor	 ebx, ebx
  0000a	57		 push	 edi

; 1365 : 
; 1366 :     if (zi->ci.encrypt != 0)

  0000b	39 9e ac 00 01
	00		 cmp	 DWORD PTR [esi+65708], ebx
  00011	74 53		 je	 SHORT $LN3@zip64Flush

; 1367 :     {
; 1368 : #ifndef NOCRYPT
; 1369 :         uInt i;
; 1370 :         int t;
; 1371 :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  00013	39 5e 7c	 cmp	 DWORD PTR [esi+124], ebx
  00016	76 4e		 jbe	 SHORT $LN3@zip64Flush
  00018	b9 5c ff ff ff	 mov	 ecx, -164		; ffffff5cH
  0001d	8d 86 d0 00 01
	00		 lea	 eax, DWORD PTR [esi+65744]
  00023	2b ce		 sub	 ecx, esi
  00025	8d be a4 00 00
	00		 lea	 edi, DWORD PTR [esi+164]
  0002b	89 4d fc	 mov	 DWORD PTR tv248[ebp], ecx
  0002e	66 90		 npad	 2
$LL4@zip64Flush:

; 1372 :             zi->ci.buffered_data[i] = zencode(zi->ci.keys, zi->ci.pcrc_32_tab, zi->ci.buffered_data[i],t);

  00030	8b c8		 mov	 ecx, eax
  00032	e8 00 00 00 00	 call	 _decrypt_byte
  00037	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  0003a	8b d8		 mov	 ebx, eax
  0003c	8b 96 dc 00 01
	00		 mov	 edx, DWORD PTR [esi+65756]
  00042	51		 push	 ecx
  00043	8d 8e d0 00 01
	00		 lea	 ecx, DWORD PTR [esi+65744]
  00049	e8 00 00 00 00	 call	 _update_keys
  0004e	30 1f		 xor	 BYTE PTR [edi], bl
  00050	83 c4 04	 add	 esp, 4
  00053	8b 45 fc	 mov	 eax, DWORD PTR tv248[ebp]
  00056	47		 inc	 edi
  00057	03 c7		 add	 eax, edi
  00059	3b 46 7c	 cmp	 eax, DWORD PTR [esi+124]
  0005c	8d 86 d0 00 01
	00		 lea	 eax, DWORD PTR [esi+65744]
  00062	72 cc		 jb	 SHORT $LL4@zip64Flush
  00064	33 db		 xor	 ebx, ebx
$LN3@zip64Flush:

; 1373 : #endif
; 1374 :     }
; 1375 : 
; 1376 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,zi->ci.buffered_data,zi->ci.pos_in_buffered_data) != zi->ci.pos_in_buffered_data)

  00066	8b 7e 7c	 mov	 edi, DWORD PTR [esi+124]
  00069	8d 86 a4 00 00
	00		 lea	 eax, DWORD PTR [esi+164]
  0006f	57		 push	 edi
  00070	50		 push	 eax
  00071	ff 76 2c	 push	 DWORD PTR [esi+44]
  00074	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00077	ff 76 1c	 push	 DWORD PTR [esi+28]
  0007a	ff d0		 call	 eax
  0007c	83 c4 10	 add	 esp, 16			; 00000010H

; 1377 :       err = ZIP_ERRNO;
; 1378 : 
; 1379 :     zi->ci.totalCompressedData += zi->ci.pos_in_buffered_data;
; 1380 : 
; 1381 : #ifdef HAVE_BZIP2
; 1382 :     if(zi->ci.method == Z_BZIP2ED)
; 1383 :     {
; 1384 :       zi->ci.totalUncompressedData += zi->ci.bstream.total_in_lo32;
; 1385 :       zi->ci.bstream.total_in_lo32 = 0;
; 1386 :       zi->ci.bstream.total_in_hi32 = 0;
; 1387 :     }
; 1388 :     else
; 1389 : #endif
; 1390 :     {
; 1391 :       zi->ci.totalUncompressedData += zi->ci.stream.total_in;
; 1392 :       zi->ci.stream.total_in = 0;
; 1393 :     }
; 1394 : 
; 1395 : 
; 1396 :     zi->ci.pos_in_buffered_data = 0;

  0007f	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  00086	83 c9 ff	 or	 ecx, -1
  00089	3b c7		 cmp	 eax, edi
  0008b	0f 45 d9	 cmovne	 ebx, ecx
  0008e	01 be c0 00 01
	00		 add	 DWORD PTR [esi+65728], edi
  00094	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]

; 1397 : 
; 1398 :     return err;

  00097	8b c3		 mov	 eax, ebx
  00099	83 96 c4 00 01
	00 00		 adc	 DWORD PTR [esi+65732], 0
  000a0	01 8e c8 00 01
	00		 add	 DWORD PTR [esi+65736], ecx
  000a6	5f		 pop	 edi
  000a7	83 96 cc 00 01
	00 00		 adc	 DWORD PTR [esi+65740], 0
  000ae	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx

; 1399 : }

  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
_zip64FlushWriteBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipWriteInFileInZip@12
_TEXT	SEGMENT
$T1 = 8							; size = 4
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_zipWriteInFileInZip@12 PROC				; COMDAT

; 1402 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1403 :     zip64_internal* zi;
; 1404 :     int err=ZIP_OK;
; 1405 : 
; 1406 :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	0f 84 fe 00 00
	00		 je	 $LN29@zipWriteIn

; 1407 :         return ZIP_PARAMERROR;
; 1408 :     zi = (zip64_internal*)file;
; 1409 : 
; 1410 :     if (zi->in_opened_file_inzip == 0)

  0000f	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  00013	0f 84 f4 00 00
	00		 je	 $LN29@zipWriteIn

; 1412 : 
; 1413 :     zi->ci.crc32 = crc32(zi->ci.crc32,buf,(uInt)len);

  00019	53		 push	 ebx
  0001a	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  0001d	57		 push	 edi
  0001e	8b 7d 0c	 mov	 edi, DWORD PTR _buf$[ebp]
  00021	53		 push	 ebx
  00022	57		 push	 edi
  00023	ff b6 a8 00 01
	00		 push	 DWORD PTR [esi+65704]
  00029	e8 00 00 00 00	 call	 _crc32@12

; 1414 : 
; 1415 : #ifdef HAVE_BZIP2
; 1416 :     if(zi->ci.method == Z_BZIP2ED && (!zi->ci.raw))
; 1417 :     {
; 1418 :       zi->ci.bstream.next_in = (void*)buf;
; 1419 :       zi->ci.bstream.avail_in = len;
; 1420 :       err = BZ_RUN_OK;
; 1421 : 
; 1422 :       while ((err==BZ_RUN_OK) && (zi->ci.bstream.avail_in>0))
; 1423 :       {
; 1424 :         if (zi->ci.bstream.avail_out == 0)
; 1425 :         {
; 1426 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1427 :             err = ZIP_ERRNO;
; 1428 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1429 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1430 :         }
; 1431 : 
; 1432 : 
; 1433 :         if(err != BZ_RUN_OK)
; 1434 :           break;
; 1435 : 
; 1436 :         if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1437 :         {
; 1438 :           uLong uTotalOutBefore_lo = zi->ci.bstream.total_out_lo32;
; 1439 : //          uLong uTotalOutBefore_hi = zi->ci.bstream.total_out_hi32;
; 1440 :           err=BZ2_bzCompress(&zi->ci.bstream,  BZ_RUN);
; 1441 : 
; 1442 :           zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore_lo) ;
; 1443 :         }
; 1444 :       }
; 1445 : 
; 1446 :       if(err == BZ_RUN_OK)
; 1447 :         err = ZIP_OK;
; 1448 :     }
; 1449 :     else
; 1450 : #endif
; 1451 :     {
; 1452 :       zi->ci.stream.next_in = (Bytef*)buf;

  0002e	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]

; 1453 :       zi->ci.stream.avail_in = len;

  00031	89 5e 44	 mov	 DWORD PTR [esi+68], ebx
  00034	89 39		 mov	 DWORD PTR [ecx], edi
  00036	83 cf ff	 or	 edi, -1
  00039	89 86 a8 00 01
	00		 mov	 DWORD PTR [esi+65704], eax
  0003f	33 db		 xor	 ebx, ebx
$LL2@zipWriteIn:

; 1454 : 
; 1455 :       while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  00041	83 7e 44 00	 cmp	 DWORD PTR [esi+68], 0
  00045	0f 86 b9 00 00
	00		 jbe	 $LN30@zipWriteIn

; 1456 :       {
; 1457 :           if (zi->ci.stream.avail_out == 0)

  0004b	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  0004e	85 c0		 test	 eax, eax
  00050	75 25		 jne	 SHORT $LN26@zipWriteIn

; 1458 :           {
; 1459 :               if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  00052	8b ce		 mov	 ecx, esi
  00054	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer
  00059	83 f8 ff	 cmp	 eax, -1

; 1460 :                   err = ZIP_ERRNO;
; 1461 :               zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  0005c	c7 46 50 00 00
	01 00		 mov	 DWORD PTR [esi+80], 65536 ; 00010000H

; 1462 :               zi->ci.stream.next_out = zi->ci.buffered_data;

  00063	8d 86 a4 00 00
	00		 lea	 eax, DWORD PTR [esi+164]
  00069	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  0006c	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0006f	0f 44 df	 cmove	 ebx, edi
  00072	b8 00 00 01 00	 mov	 eax, 65536		; 00010000H
$LN26@zipWriteIn:

; 1463 :           }
; 1464 : 
; 1465 : 
; 1466 :           if(err != ZIP_OK)

  00077	85 db		 test	 ebx, ebx
  00079	0f 85 85 00 00
	00		 jne	 $LN30@zipWriteIn

; 1467 :               break;
; 1468 : 
; 1469 :           if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  0007f	83 be 9c 00 00
	00 08		 cmp	 DWORD PTR [esi+156], 8
  00086	75 28		 jne	 SHORT $LN12@zipWriteIn
  00088	39 9e a0 00 00
	00		 cmp	 DWORD PTR [esi+160], ebx
  0008e	75 20		 jne	 SHORT $LN12@zipWriteIn

; 1470 :           {
; 1471 :               uLong uTotalOutBefore = zi->ci.stream.total_out;

  00090	8b 7e 54	 mov	 edi, DWORD PTR [esi+84]

; 1472 :               err=deflate(&zi->ci.stream,  Z_NO_FLUSH);

  00093	53		 push	 ebx
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 _deflate@8

; 1473 :               if(uTotalOutBefore > zi->ci.stream.total_out)
; 1474 :               {
; 1475 :                 int bBreak = 0;
; 1476 :                 bBreak++;
; 1477 :               }
; 1478 : 
; 1479 :               zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  0009a	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0009d	8b d8		 mov	 ebx, eax
  0009f	2b cf		 sub	 ecx, edi
  000a1	01 4e 7c	 add	 DWORD PTR [esi+124], ecx
  000a4	85 db		 test	 ebx, ebx
  000a6	75 5c		 jne	 SHORT $LN30@zipWriteIn

; 1454 : 
; 1455 :       while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  000a8	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  000ab	83 cf ff	 or	 edi, -1
  000ae	eb 91		 jmp	 SHORT $LL2@zipWriteIn
$LN12@zipWriteIn:

; 1480 :           }
; 1481 :           else
; 1482 :           {
; 1483 :               uInt copy_this,i;
; 1484 :               if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)

  000b0	8b 56 44	 mov	 edx, DWORD PTR [esi+68]

; 1485 :                   copy_this = zi->ci.stream.avail_in;
; 1486 :               else
; 1487 :                   copy_this = zi->ci.stream.avail_out;
; 1488 : 
; 1489 :               for (i = 0; i < copy_this; i++)

  000b3	3b d0		 cmp	 edx, eax
  000b5	8b fa		 mov	 edi, edx
  000b7	89 55 08	 mov	 DWORD PTR $T1[ebp], edx
  000ba	0f 43 f8	 cmovae	 edi, eax
  000bd	33 d2		 xor	 edx, edx
  000bf	85 ff		 test	 edi, edi
  000c1	74 1e		 je	 SHORT $LN31@zipWriteIn
$LL22@zipWriteIn:

; 1490 :                   *(((char*)zi->ci.stream.next_out)+i) =

  000c3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c5	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  000c8	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  000cb	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000ce	42		 inc	 edx
  000cf	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  000d2	3b d7		 cmp	 edx, edi
  000d4	72 ed		 jb	 SHORT $LL22@zipWriteIn

; 1462 :               zi->ci.stream.next_out = zi->ci.buffered_data;

  000d6	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  000d9	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  000dc	8b 46 50	 mov	 eax, DWORD PTR [esi+80]

; 1485 :                   copy_this = zi->ci.stream.avail_in;
; 1486 :               else
; 1487 :                   copy_this = zi->ci.stream.avail_out;
; 1488 : 
; 1489 :               for (i = 0; i < copy_this; i++)

  000df	eb 03		 jmp	 SHORT $LN5@zipWriteIn
$LN31@zipWriteIn:
  000e1	8b 55 08	 mov	 edx, DWORD PTR $T1[ebp]
$LN5@zipWriteIn:

; 1491 :                       *(((const char*)zi->ci.stream.next_in)+i);
; 1492 :               {
; 1493 :                   zi->ci.stream.avail_in -= copy_this;
; 1494 :                   zi->ci.stream.avail_out-= copy_this;
; 1495 :                   zi->ci.stream.next_in+= copy_this;

  000e4	01 39		 add	 DWORD PTR [ecx], edi
  000e6	2b d7		 sub	 edx, edi

; 1496 :                   zi->ci.stream.next_out+= copy_this;

  000e8	01 7e 4c	 add	 DWORD PTR [esi+76], edi
  000eb	2b c7		 sub	 eax, edi

; 1497 :                   zi->ci.stream.total_in+= copy_this;

  000ed	01 7e 48	 add	 DWORD PTR [esi+72], edi

; 1498 :                   zi->ci.stream.total_out+= copy_this;

  000f0	01 7e 54	 add	 DWORD PTR [esi+84], edi

; 1499 :                   zi->ci.pos_in_buffered_data += copy_this;

  000f3	01 7e 7c	 add	 DWORD PTR [esi+124], edi
  000f6	83 cf ff	 or	 edi, -1
  000f9	89 56 44	 mov	 DWORD PTR [esi+68], edx
  000fc	89 46 50	 mov	 DWORD PTR [esi+80], eax
  000ff	e9 3d ff ff ff	 jmp	 $LL2@zipWriteIn
$LN30@zipWriteIn:

; 1500 :               }
; 1501 :           }
; 1502 :       }// while(...)
; 1503 :     }
; 1504 : 
; 1505 :     return err;

  00104	5f		 pop	 edi
  00105	8b c3		 mov	 eax, ebx
  00107	5b		 pop	 ebx
  00108	5e		 pop	 esi

; 1506 : }

  00109	5d		 pop	 ebp
  0010a	c2 0c 00	 ret	 12			; 0000000cH
$LN29@zipWriteIn:

; 1411 :         return ZIP_PARAMERROR;

  0010d	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00112	5e		 pop	 esi

; 1506 : }

  00113	5d		 pop	 ebp
  00114	c2 0c 00	 ret	 12			; 0000000cH
_zipWriteInFileInZip@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZipRaw@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_uncompressed_size$ = 12				; size = 4
_crc32$ = 16						; size = 4
_zipCloseFileInZipRaw@12 PROC				; COMDAT

; 1509 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1510 :     return zipCloseFileInZipRaw64 (file, uncompressed_size, crc32);

  00006	ff 75 10	 push	 DWORD PTR _crc32$[ebp]
  00009	6a 00		 push	 0
  0000b	ff 75 0c	 push	 DWORD PTR _uncompressed_size$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00011	e8 00 00 00 00	 call	 _zipCloseFileInZipRaw64@16

; 1511 : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
_zipCloseFileInZipRaw@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZipRaw64@16
_TEXT	SEGMENT
_p$1$ = -28						; size = 4
_uncompressed_size$2$ = -24				; size = 4
_compressed_size$2$ = -20				; size = 4
_compressed_size$1$ = -16				; size = 4
_cur_pos_inzip$2$ = -12					; size = 4
_datasize$1$ = -12					; size = 4
_crc32$1$ = -8						; size = 4
_cur_pos_inzip$1$ = -4					; size = 4
tv857 = -4						; size = 4
_file$ = 8						; size = 4
_uncompressed_size$ = 12				; size = 8
_crc32$ = 20						; size = 4
_zipCloseFileInZipRaw64@16 PROC				; COMDAT

; 1514 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1515 :     zip64_internal* zi;
; 1516 :     ZPOS64_T compressed_size;
; 1517 :     uLong invalidValue = 0xffffffff;
; 1518 :     short datasize = 0;
; 1519 :     int err=ZIP_OK;
; 1520 : 
; 1521 :     if (file == NULL)

  0000b	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000e	33 c0		 xor	 eax, eax
  00010	89 44 24 18	 mov	 DWORD PTR _datasize$1$[esp+36], eax
  00014	57		 push	 edi
  00015	85 f6		 test	 esi, esi
  00017	0f 84 b6 04 00
	00		 je	 $LN53@zipCloseFi

; 1522 :         return ZIP_PARAMERROR;
; 1523 :     zi = (zip64_internal*)file;
; 1524 : 
; 1525 :     if (zi->in_opened_file_inzip == 0)

  0001d	39 46 38	 cmp	 DWORD PTR [esi+56], eax
  00020	0f 84 ad 04 00
	00		 je	 $LN53@zipCloseFi

; 1526 :         return ZIP_PARAMERROR;
; 1527 :     zi->ci.stream.avail_in = 0;
; 1528 : 
; 1529 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00026	83 be 9c 00 00
	00 08		 cmp	 DWORD PTR [esi+156], 8
  0002d	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00030	75 42		 jne	 SHORT $LN3@zipCloseFi
  00032	39 86 a0 00 00
	00		 cmp	 DWORD PTR [esi+160], eax
  00038	75 3a		 jne	 SHORT $LN3@zipCloseFi
  0003a	8d 5e 40	 lea	 ebx, DWORD PTR [esi+64]
  0003d	0f 1f 00	 npad	 3
$LL2@zipCloseFi:

; 1530 :                 {
; 1531 :                         while (err==ZIP_OK)
; 1532 :                         {
; 1533 :                                 uLong uTotalOutBefore;
; 1534 :                                 if (zi->ci.stream.avail_out == 0)

  00040	83 7e 50 00	 cmp	 DWORD PTR [esi+80], 0
  00044	75 17		 jne	 SHORT $LN52@zipCloseFi

; 1535 :                                 {
; 1536 :                                         if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer

; 1537 :                                                 err = ZIP_ERRNO;
; 1538 :                                         zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
; 1539 :                                         zi->ci.stream.next_out = zi->ci.buffered_data;

  0004d	8d 86 a4 00 00
	00		 lea	 eax, DWORD PTR [esi+164]
  00053	c7 46 50 00 00
	01 00		 mov	 DWORD PTR [esi+80], 65536 ; 00010000H
  0005a	89 46 4c	 mov	 DWORD PTR [esi+76], eax
$LN52@zipCloseFi:

; 1540 :                                 }
; 1541 :                                 uTotalOutBefore = zi->ci.stream.total_out;

  0005d	8b 7e 54	 mov	 edi, DWORD PTR [esi+84]

; 1542 :                                 err=deflate(&zi->ci.stream,  Z_FINISH);

  00060	6a 04		 push	 4
  00062	53		 push	 ebx
  00063	e8 00 00 00 00	 call	 _deflate@8

; 1543 :                                 zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  00068	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0006b	2b cf		 sub	 ecx, edi
  0006d	01 4e 7c	 add	 DWORD PTR [esi+124], ecx
  00070	85 c0		 test	 eax, eax
  00072	74 cc		 je	 SHORT $LL2@zipCloseFi
$LN3@zipCloseFi:

; 1544 :                         }
; 1545 :                 }
; 1546 :     else if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1547 :     {
; 1548 : #ifdef HAVE_BZIP2
; 1549 :       err = BZ_FINISH_OK;
; 1550 :       while (err==BZ_FINISH_OK)
; 1551 :       {
; 1552 :         uLong uTotalOutBefore;
; 1553 :         if (zi->ci.bstream.avail_out == 0)
; 1554 :         {
; 1555 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1556 :             err = ZIP_ERRNO;
; 1557 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1558 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1559 :         }
; 1560 :         uTotalOutBefore = zi->ci.bstream.total_out_lo32;
; 1561 :         err=BZ2_bzCompress(&zi->ci.bstream,  BZ_FINISH);
; 1562 :         if(err == BZ_STREAM_END)
; 1563 :           err = Z_STREAM_END;
; 1564 : 
; 1565 :         zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore);
; 1566 :       }
; 1567 : 
; 1568 :       if(err == BZ_FINISH_OK)
; 1569 :         err = ZIP_OK;
; 1570 : #endif
; 1571 :     }
; 1572 : 
; 1573 :     if (err==Z_STREAM_END)
; 1574 :         err=ZIP_OK; /* this is normal */
; 1575 : 
; 1576 :     if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))

  00074	33 c9		 xor	 ecx, ecx
  00076	83 f8 01	 cmp	 eax, 1
  00079	0f 45 c8	 cmovne	 ecx, eax
  0007c	83 cb ff	 or	 ebx, -1
  0007f	83 7e 7c 00	 cmp	 DWORD PTR [esi+124], 0
  00083	8b f9		 mov	 edi, ecx
  00085	76 10		 jbe	 SHORT $LN13@zipCloseFi
  00087	85 c9		 test	 ecx, ecx
  00089	75 0c		 jne	 SHORT $LN13@zipCloseFi

; 1577 :                 {
; 1578 :         if (zip64FlushWriteBuffer(zi)==ZIP_ERRNO)

  0008b	8b ce		 mov	 ecx, esi
  0008d	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer
  00092	3b c3		 cmp	 eax, ebx
  00094	0f 44 fb	 cmove	 edi, ebx
$LN13@zipCloseFi:

; 1579 :             err = ZIP_ERRNO;
; 1580 :                 }
; 1581 : 
; 1582 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00097	83 be 9c 00 00
	00 08		 cmp	 DWORD PTR [esi+156], 8
  0009e	75 1e		 jne	 SHORT $LN14@zipCloseFi
  000a0	83 be a0 00 00
	00 00		 cmp	 DWORD PTR [esi+160], 0
  000a7	75 32		 jne	 SHORT $LN67@zipCloseFi

; 1583 :     {
; 1584 :         int tmp_err = deflateEnd(&zi->ci.stream);

  000a9	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 _deflateEnd@4

; 1585 :         if (err == ZIP_OK)

  000b2	85 ff		 test	 edi, edi

; 1586 :             err = tmp_err;
; 1587 :         zi->ci.stream_initialised = 0;

  000b4	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  000bb	0f 44 f8	 cmove	 edi, eax
$LN14@zipCloseFi:

; 1588 :     }
; 1589 : #ifdef HAVE_BZIP2
; 1590 :     else if((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1591 :     {
; 1592 :       int tmperr = BZ2_bzCompressEnd(&zi->ci.bstream);
; 1593 :                         if (err==ZIP_OK)
; 1594 :                                 err = tmperr;
; 1595 :                         zi->ci.stream_initialised = 0;
; 1596 :     }
; 1597 : #endif
; 1598 : 
; 1599 :     if (!zi->ci.raw)

  000be	83 be a0 00 00
	00 00		 cmp	 DWORD PTR [esi+160], 0
  000c5	75 14		 jne	 SHORT $LN67@zipCloseFi

; 1600 :     {
; 1601 :         crc32 = (uLong)zi->ci.crc32;

  000c7	8b 86 a8 00 01
	00		 mov	 eax, DWORD PTR [esi+65704]

; 1602 :         uncompressed_size = zi->ci.totalUncompressedData;

  000cd	8b 9e c8 00 01
	00		 mov	 ebx, DWORD PTR [esi+65736]
  000d3	8b 8e cc 00 01
	00		 mov	 ecx, DWORD PTR [esi+65740]
  000d9	eb 09		 jmp	 SHORT $LN71@zipCloseFi
$LN67@zipCloseFi:

; 1588 :     }
; 1589 : #ifdef HAVE_BZIP2
; 1590 :     else if((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1591 :     {
; 1592 :       int tmperr = BZ2_bzCompressEnd(&zi->ci.bstream);
; 1593 :                         if (err==ZIP_OK)
; 1594 :                                 err = tmperr;
; 1595 :                         zi->ci.stream_initialised = 0;
; 1596 :     }
; 1597 : #endif
; 1598 : 
; 1599 :     if (!zi->ci.raw)

  000db	8b 45 14	 mov	 eax, DWORD PTR _crc32$[ebp]
  000de	8b 4d 10	 mov	 ecx, DWORD PTR _uncompressed_size$[ebp+4]
  000e1	8b 5d 0c	 mov	 ebx, DWORD PTR _uncompressed_size$[ebp]
$LN71@zipCloseFi:

; 1603 :     }
; 1604 :     compressed_size = zi->ci.totalCompressedData;
; 1605 : 
; 1606 : #    ifndef NOCRYPT
; 1607 :     compressed_size += zi->ci.crypt_header_size;

  000e4	89 44 24 20	 mov	 DWORD PTR _crc32$1$[esp+40], eax
  000e8	8b 86 e0 00 01
	00		 mov	 eax, DWORD PTR [esi+65760]
  000ee	99		 cdq
  000ef	03 86 c0 00 01
	00		 add	 eax, DWORD PTR [esi+65728]
  000f5	89 4c 24 10	 mov	 DWORD PTR _uncompressed_size$2$[esp+40], ecx
  000f9	13 96 c4 00 01
	00		 adc	 edx, DWORD PTR [esi+65732]
  000ff	89 44 24 14	 mov	 DWORD PTR _compressed_size$2$[esp+40], eax
  00103	89 54 24 18	 mov	 DWORD PTR _compressed_size$1$[esp+40], edx

; 1608 : #    endif
; 1609 : 
; 1610 :     // update Current Item crc and sizes,
; 1611 :     if(compressed_size >= 0xffffffff || uncompressed_size >= 0xffffffff || zi->ci.pos_local_header >= 0xffffffff)

  00107	85 d2		 test	 edx, edx
  00109	77 24		 ja	 SHORT $LN56@zipCloseFi
  0010b	72 05		 jb	 SHORT $LN54@zipCloseFi
  0010d	83 f8 ff	 cmp	 eax, -1
  00110	73 1d		 jae	 SHORT $LN56@zipCloseFi
$LN54@zipCloseFi:
  00112	85 c9		 test	 ecx, ecx
  00114	77 19		 ja	 SHORT $LN56@zipCloseFi
  00116	72 05		 jb	 SHORT $LN55@zipCloseFi
  00118	83 fb ff	 cmp	 ebx, -1
  0011b	73 12		 jae	 SHORT $LN56@zipCloseFi
$LN55@zipCloseFi:
  0011d	83 be 84 00 00
	00 00		 cmp	 DWORD PTR [esi+132], 0
  00124	77 09		 ja	 SHORT $LN56@zipCloseFi
  00126	83 be 80 00 00
	00 ff		 cmp	 DWORD PTR [esi+128], -1
  0012d	72 2c		 jb	 SHORT $LN17@zipCloseFi
$LN56@zipCloseFi:

; 1612 :     {
; 1613 :       /*version Made by*/
; 1614 :       zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)45,2);

  0012f	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00135	ba 02 00 00 00	 mov	 edx, 2
  0013a	6a 00		 push	 0
  0013c	6a 2d		 push	 45			; 0000002dH
  0013e	83 c1 04	 add	 ecx, 4
  00141	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1615 :       /*version needed*/
; 1616 :       zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)45,2);

  00146	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  0014c	6a 00		 push	 0
  0014e	6a 2d		 push	 45			; 0000002dH
  00150	83 c1 06	 add	 ecx, 6
  00153	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00158	83 c4 10	 add	 esp, 16			; 00000010H
$LN17@zipCloseFi:

; 1617 : 
; 1618 :     }
; 1619 : 
; 1620 :     zip64local_putValue_inmemory(zi->ci.central_header+16,crc32,4); /*crc*/

  0015b	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00161	ba 04 00 00 00	 mov	 edx, 4
  00166	6a 00		 push	 0
  00168	ff 74 24 24	 push	 DWORD PTR _crc32$1$[esp+44]
  0016c	83 c1 10	 add	 ecx, 16			; 00000010H
  0016f	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1621 : 
; 1622 : 
; 1623 :     if(compressed_size >= 0xffffffff)

  00174	8b 4c 24 20	 mov	 ecx, DWORD PTR _compressed_size$1$[esp+48]
  00178	83 c4 08	 add	 esp, 8
  0017b	8b 96 88 00 00
	00		 mov	 edx, DWORD PTR [esi+136]
  00181	85 c9		 test	 ecx, ecx
  00183	75 09		 jne	 SHORT $LN57@zipCloseFi
  00185	8b 44 24 14	 mov	 eax, DWORD PTR _compressed_size$2$[esp+40]
  00189	83 f8 ff	 cmp	 eax, -1
  0018c	72 05		 jb	 SHORT $LN20@zipCloseFi
$LN57@zipCloseFi:

; 1624 :       zip64local_putValue_inmemory(zi->ci.central_header+20, invalidValue,4); /*compr size*/

  0018e	83 c8 ff	 or	 eax, -1
  00191	33 c9		 xor	 ecx, ecx
$LN20@zipCloseFi:

; 1625 :     else
; 1626 :       zip64local_putValue_inmemory(zi->ci.central_header+20, compressed_size,4); /*compr size*/
; 1627 : 
; 1628 :     /// set internal file attributes field
; 1629 :     if (zi->ci.stream.data_type == Z_ASCII)

  00193	51		 push	 ecx
  00194	8d 4a 14	 lea	 ecx, DWORD PTR [edx+20]
  00197	ba 04 00 00 00	 mov	 edx, 4
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  001a2	83 c4 08	 add	 esp, 8
  001a5	83 7e 6c 01	 cmp	 DWORD PTR [esi+108], 1
  001a9	75 1a		 jne	 SHORT $LN21@zipCloseFi

; 1630 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)Z_ASCII,2);

  001ab	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  001b1	ba 02 00 00 00	 mov	 edx, 2
  001b6	6a 00		 push	 0
  001b8	6a 01		 push	 1
  001ba	83 c1 24	 add	 ecx, 36			; 00000024H
  001bd	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  001c2	83 c4 08	 add	 esp, 8
$LN21@zipCloseFi:

; 1631 : 
; 1632 :     if(uncompressed_size >= 0xffffffff)

  001c5	8b 44 24 10	 mov	 eax, DWORD PTR _uncompressed_size$2$[esp+40]
  001c9	8b 96 88 00 00
	00		 mov	 edx, DWORD PTR [esi+136]
  001cf	85 c0		 test	 eax, eax
  001d1	75 09		 jne	 SHORT $LN58@zipCloseFi
  001d3	83 fb ff	 cmp	 ebx, -1
  001d6	73 04		 jae	 SHORT $LN58@zipCloseFi

; 1634 :     else
; 1635 :       zip64local_putValue_inmemory(zi->ci.central_header+24, uncompressed_size,4); /*uncompr size*/

  001d8	8b cb		 mov	 ecx, ebx
  001da	eb 05		 jmp	 SHORT $LN23@zipCloseFi
$LN58@zipCloseFi:

; 1633 :       zip64local_putValue_inmemory(zi->ci.central_header+24, invalidValue,4); /*uncompr size*/

  001dc	83 c9 ff	 or	 ecx, -1
  001df	33 c0		 xor	 eax, eax
$LN23@zipCloseFi:

; 1636 : 
; 1637 :     // Add ZIP64 extra info field for uncompressed size
; 1638 :     if(uncompressed_size >= 0xffffffff)

  001e1	50		 push	 eax
  001e2	51		 push	 ecx
  001e3	8d 4a 18	 lea	 ecx, DWORD PTR [edx+24]
  001e6	ba 04 00 00 00	 mov	 edx, 4
  001eb	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  001f0	83 c4 08	 add	 esp, 8
  001f3	83 7c 24 10 00	 cmp	 DWORD PTR _uncompressed_size$2$[esp+40], 0
  001f8	77 05		 ja	 SHORT $LN59@zipCloseFi
  001fa	83 fb ff	 cmp	 ebx, -1
  001fd	72 0b		 jb	 SHORT $LN68@zipCloseFi
$LN59@zipCloseFi:

; 1639 :       datasize += 8;

  001ff	b8 08 00 00 00	 mov	 eax, 8
  00204	89 44 24 1c	 mov	 DWORD PTR _datasize$1$[esp+40], eax
  00208	eb 02		 jmp	 SHORT $LN24@zipCloseFi
$LN68@zipCloseFi:

; 1636 : 
; 1637 :     // Add ZIP64 extra info field for uncompressed size
; 1638 :     if(uncompressed_size >= 0xffffffff)

  0020a	33 c0		 xor	 eax, eax
$LN24@zipCloseFi:

; 1640 : 
; 1641 :     // Add ZIP64 extra info field for compressed size
; 1642 :     if(compressed_size >= 0xffffffff)

  0020c	83 7c 24 18 00	 cmp	 DWORD PTR _compressed_size$1$[esp+40], 0
  00211	77 07		 ja	 SHORT $LN60@zipCloseFi
  00213	83 7c 24 14 ff	 cmp	 DWORD PTR _compressed_size$2$[esp+40], -1
  00218	72 07		 jb	 SHORT $LN25@zipCloseFi
$LN60@zipCloseFi:

; 1643 :       datasize += 8;

  0021a	83 c0 08	 add	 eax, 8
  0021d	89 44 24 1c	 mov	 DWORD PTR _datasize$1$[esp+40], eax
$LN25@zipCloseFi:

; 1644 : 
; 1645 :     // Add ZIP64 extra info field for relative offset to local file header of current file
; 1646 :     if(zi->ci.pos_local_header >= 0xffffffff)

  00221	83 be 84 00 00
	00 00		 cmp	 DWORD PTR [esi+132], 0
  00228	77 09		 ja	 SHORT $LN61@zipCloseFi
  0022a	83 be 80 00 00
	00 ff		 cmp	 DWORD PTR [esi+128], -1
  00231	72 07		 jb	 SHORT $LN26@zipCloseFi
$LN61@zipCloseFi:

; 1647 :       datasize += 8;

  00233	83 c0 08	 add	 eax, 8
  00236	89 44 24 1c	 mov	 DWORD PTR _datasize$1$[esp+40], eax
$LN26@zipCloseFi:

; 1648 : 
; 1649 :     if(datasize > 0)

  0023a	66 85 c0	 test	 ax, ax
  0023d	0f 84 22 01 00
	00		 je	 $LN27@zipCloseFi

; 1650 :     {
; 1651 :       char* p = NULL;
; 1652 : 
; 1653 :       if((uLong)(datasize + 4) > zi->ci.size_centralExtraFree)

  00243	0f b7 c0	 movzx	 eax, ax
  00246	89 44 24 24	 mov	 DWORD PTR tv857[esp+40], eax
  0024a	83 c0 04	 add	 eax, 4
  0024d	3b 86 94 00 00
	00		 cmp	 eax, DWORD PTR [esi+148]
  00253	76 0e		 jbe	 SHORT $LN28@zipCloseFi

; 1654 :       {
; 1655 :         // we can not write more data to the buffer that we have room for.
; 1656 :         return ZIP_BADZIPFILE;

  00255	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H

; 1745 : }

  0025a	5f		 pop	 edi
  0025b	5e		 pop	 esi
  0025c	5b		 pop	 ebx
  0025d	8b e5		 mov	 esp, ebp
  0025f	5d		 pop	 ebp
  00260	c2 10 00	 ret	 16			; 00000010H
$LN28@zipCloseFi:

; 1657 :       }
; 1658 : 
; 1659 :       p = zi->ci.central_header + zi->ci.size_centralheader;

  00263	8b 86 90 00 00
	00		 mov	 eax, DWORD PTR [esi+144]

; 1660 : 
; 1661 :       // Add Extra Information Header for 'ZIP64 information'
; 1662 :       zip64local_putValue_inmemory(p, 0x0001, 2); // HeaderID

  00269	ba 02 00 00 00	 mov	 edx, 2
  0026e	03 86 88 00 00
	00		 add	 eax, DWORD PTR [esi+136]
  00274	6a 00		 push	 0
  00276	6a 01		 push	 1
  00278	8b c8		 mov	 ecx, eax
  0027a	89 44 24 14	 mov	 DWORD PTR _p$1$[esp+48], eax
  0027e	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1663 :       p += 2;

  00283	8b 4c 24 14	 mov	 ecx, DWORD PTR _p$1$[esp+48]

; 1664 :       zip64local_putValue_inmemory(p, datasize, 2); // DataSize

  00287	8b 44 24 24	 mov	 eax, DWORD PTR _datasize$1$[esp+48]
  0028b	03 ca		 add	 ecx, edx
  0028d	0f b7 c0	 movzx	 eax, ax
  00290	99		 cdq
  00291	52		 push	 edx
  00292	50		 push	 eax
  00293	ba 02 00 00 00	 mov	 edx, 2
  00298	89 4c 24 1c	 mov	 DWORD PTR _p$1$[esp+56], ecx
  0029c	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1665 :       p += 2;

  002a1	8b 44 24 1c	 mov	 eax, DWORD PTR _p$1$[esp+56]
  002a5	83 c4 10	 add	 esp, 16			; 00000010H

; 1666 : 
; 1667 :       if(uncompressed_size >= 0xffffffff)

  002a8	8b 4c 24 10	 mov	 ecx, DWORD PTR _uncompressed_size$2$[esp+40]
  002ac	03 c2		 add	 eax, edx
  002ae	89 44 24 0c	 mov	 DWORD PTR _p$1$[esp+40], eax
  002b2	85 c9		 test	 ecx, ecx
  002b4	75 05		 jne	 SHORT $LN62@zipCloseFi
  002b6	83 fb ff	 cmp	 ebx, -1
  002b9	72 1b		 jb	 SHORT $LN29@zipCloseFi
$LN62@zipCloseFi:

; 1668 :       {
; 1669 :         zip64local_putValue_inmemory(p, uncompressed_size, 8);

  002bb	51		 push	 ecx
  002bc	53		 push	 ebx
  002bd	ba 08 00 00 00	 mov	 edx, 8
  002c2	8b c8		 mov	 ecx, eax
  002c4	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1670 :         p += 8;

  002c9	8b 44 24 14	 mov	 eax, DWORD PTR _p$1$[esp+48]
  002cd	83 c4 08	 add	 esp, 8
  002d0	03 c2		 add	 eax, edx
  002d2	89 44 24 0c	 mov	 DWORD PTR _p$1$[esp+40], eax
$LN29@zipCloseFi:

; 1671 :       }
; 1672 : 
; 1673 :       if(compressed_size >= 0xffffffff)

  002d6	8b 54 24 18	 mov	 edx, DWORD PTR _compressed_size$1$[esp+40]
  002da	8b 4c 24 14	 mov	 ecx, DWORD PTR _compressed_size$2$[esp+40]
  002de	85 d2		 test	 edx, edx
  002e0	75 05		 jne	 SHORT $LN63@zipCloseFi
  002e2	83 f9 ff	 cmp	 ecx, -1
  002e5	72 17		 jb	 SHORT $LN30@zipCloseFi
$LN63@zipCloseFi:

; 1674 :       {
; 1675 :         zip64local_putValue_inmemory(p, compressed_size, 8);

  002e7	52		 push	 edx
  002e8	51		 push	 ecx
  002e9	ba 08 00 00 00	 mov	 edx, 8
  002ee	8b c8		 mov	 ecx, eax
  002f0	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1676 :         p += 8;

  002f5	8b 44 24 14	 mov	 eax, DWORD PTR _p$1$[esp+48]
  002f9	83 c4 08	 add	 esp, 8
  002fc	03 c2		 add	 eax, edx
$LN30@zipCloseFi:

; 1677 :       }
; 1678 : 
; 1679 :       if(zi->ci.pos_local_header >= 0xffffffff)

  002fe	8b 96 84 00 00
	00		 mov	 edx, DWORD PTR [esi+132]
  00304	8b 8e 80 00 00
	00		 mov	 ecx, DWORD PTR [esi+128]
  0030a	85 d2		 test	 edx, edx
  0030c	75 05		 jne	 SHORT $LN64@zipCloseFi
  0030e	83 f9 ff	 cmp	 ecx, -1
  00311	72 11		 jb	 SHORT $LN31@zipCloseFi
$LN64@zipCloseFi:

; 1680 :       {
; 1681 :         zip64local_putValue_inmemory(p, zi->ci.pos_local_header, 8);

  00313	52		 push	 edx
  00314	51		 push	 ecx
  00315	ba 08 00 00 00	 mov	 edx, 8
  0031a	8b c8		 mov	 ecx, eax
  0031c	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00321	83 c4 08	 add	 esp, 8
$LN31@zipCloseFi:

; 1682 :         p += 8;
; 1683 :       }
; 1684 : 
; 1685 :       // Update how much extra free space we got in the memory buffer
; 1686 :       // and increase the centralheader size so the new ZIP64 fields are included
; 1687 :       // ( 4 below is the size of HeaderID and DataSize field )
; 1688 :       zi->ci.size_centralExtraFree -= datasize + 4;

  00324	8b 4c 24 24	 mov	 ecx, DWORD PTR tv857[esp+40]
  00328	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0032d	2b c1		 sub	 eax, ecx

; 1689 :       zi->ci.size_centralheader += datasize + 4;
; 1690 : 
; 1691 :       // Update the extra info size field
; 1692 :       zi->ci.size_centralExtra += datasize + 4;
; 1693 :       zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)zi->ci.size_centralExtra,2);

  0032f	ba 02 00 00 00	 mov	 edx, 2
  00334	01 86 94 00 00
	00		 add	 DWORD PTR [esi+148], eax
  0033a	6a 00		 push	 0
  0033c	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0033f	01 86 90 00 00
	00		 add	 DWORD PTR [esi+144], eax
  00345	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00348	01 86 8c 00 00
	00		 add	 DWORD PTR [esi+140], eax
  0034e	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00354	ff b6 8c 00 00
	00		 push	 DWORD PTR [esi+140]
  0035a	83 c1 1e	 add	 ecx, 30			; 0000001eH
  0035d	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00362	83 c4 08	 add	 esp, 8
$LN27@zipCloseFi:

; 1694 :     }
; 1695 : 
; 1696 :     if (err==ZIP_OK)

  00365	85 ff		 test	 edi, edi
  00367	75 19		 jne	 SHORT $LN32@zipCloseFi

; 1697 :         err = add_data_in_datablock(&zi->central_dir, zi->ci.central_header, (uLong)zi->ci.size_centralheader);

  00369	ff b6 90 00 00
	00		 push	 DWORD PTR [esi+144]
  0036f	8b 96 88 00 00
	00		 mov	 edx, DWORD PTR [esi+136]
  00375	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00378	e8 00 00 00 00	 call	 _add_data_in_datablock
  0037d	83 c4 04	 add	 esp, 4
  00380	8b f8		 mov	 edi, eax
$LN32@zipCloseFi:

; 1698 : 
; 1699 :     free(zi->ci.central_header);

  00382	ff b6 88 00 00
	00		 push	 DWORD PTR [esi+136]
  00388	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0038e	83 c4 04	 add	 esp, 4

; 1700 : 
; 1701 :     if (err==ZIP_OK)

  00391	85 ff		 test	 edi, edi
  00393	0f 85 1a 01 00
	00		 jne	 $LN44@zipCloseFi

; 1702 :     {
; 1703 :         // Update the LocalFileHeader with the new values.
; 1704 : 
; 1705 :         ZPOS64_T cur_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  00399	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0039c	8b ce		 mov	 ecx, esi
  0039e	e8 00 00 00 00	 call	 _call_ztell64

; 1706 : 
; 1707 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_local_header + 14,ZLIB_FILEFUNC_SEEK_SET)!=0)

  003a3	8b 8e 84 00 00
	00		 mov	 ecx, DWORD PTR [esi+132]
  003a9	57		 push	 edi
  003aa	8b be 80 00 00
	00		 mov	 edi, DWORD PTR [esi+128]
  003b0	83 c7 0e	 add	 edi, 14			; 0000000eH
  003b3	89 54 24 28	 mov	 DWORD PTR _cur_pos_inzip$1$[esp+44], edx
  003b7	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  003ba	83 d1 00	 adc	 ecx, 0
  003bd	89 44 24 20	 mov	 DWORD PTR _cur_pos_inzip$2$[esp+44], eax
  003c1	51		 push	 ecx
  003c2	57		 push	 edi
  003c3	8b ce		 mov	 ecx, esi
  003c5	e8 00 00 00 00	 call	 _call_zseek64
  003ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  003cd	85 c0		 test	 eax, eax
  003cf	74 05		 je	 SHORT $LN51@zipCloseFi

; 1708 :             err = ZIP_ERRNO;

  003d1	83 cf ff	 or	 edi, -1

; 1709 : 
; 1710 :         if (err==ZIP_OK)

  003d4	eb 17		 jmp	 SHORT $LN35@zipCloseFi
$LN51@zipCloseFi:

; 1711 :             err = zip64local_putValue(&zi->z_filefunc,zi->filestream,crc32,4); /* crc 32, unknown */

  003d6	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  003d9	8b ce		 mov	 ecx, esi
  003db	6a 04		 push	 4
  003dd	6a 00		 push	 0
  003df	ff 74 24 28	 push	 DWORD PTR _crc32$1$[esp+48]
  003e3	e8 00 00 00 00	 call	 _zip64local_putValue
  003e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  003eb	8b f8		 mov	 edi, eax
$LN35@zipCloseFi:

; 1712 : 
; 1713 :         if(uncompressed_size >= 0xffffffff)

  003ed	83 7c 24 10 00	 cmp	 DWORD PTR _uncompressed_size$2$[esp+40], 0
  003f2	77 33		 ja	 SHORT $LN65@zipCloseFi
  003f4	83 fb ff	 cmp	 ebx, -1
  003f7	73 2e		 jae	 SHORT $LN65@zipCloseFi

; 1726 :           }
; 1727 :         }
; 1728 :         else
; 1729 :         {
; 1730 :           if (err==ZIP_OK) /* compressed size, unknown */

  003f9	85 ff		 test	 edi, edi
  003fb	0f 85 91 00 00
	00		 jne	 $LN43@zipCloseFi

; 1731 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,compressed_size,4);

  00401	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00404	8b ce		 mov	 ecx, esi
  00406	6a 04		 push	 4
  00408	ff 74 24 1c	 push	 DWORD PTR _compressed_size$1$[esp+44]
  0040c	ff 74 24 1c	 push	 DWORD PTR _compressed_size$2$[esp+48]
  00410	e8 00 00 00 00	 call	 _zip64local_putValue
  00415	8b f8		 mov	 edi, eax
  00417	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1732 : 
; 1733 :           if (err==ZIP_OK) /* uncompressed size, unknown */

  0041a	85 ff		 test	 edi, edi
  0041c	75 74		 jne	 SHORT $LN43@zipCloseFi

; 1734 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,uncompressed_size,4);

  0041e	6a 04		 push	 4
  00420	ff 74 24 14	 push	 DWORD PTR _uncompressed_size$2$[esp+44]
  00424	53		 push	 ebx
  00425	eb 5c		 jmp	 SHORT $LN72@zipCloseFi
$LN65@zipCloseFi:

; 1714 :         {
; 1715 :           if(zi->ci.pos_zip64extrainfo > 0)

  00427	8b 8e bc 00 01
	00		 mov	 ecx, DWORD PTR [esi+65724]
  0042d	8b 86 b8 00 01
	00		 mov	 eax, DWORD PTR [esi+65720]
  00433	85 c9		 test	 ecx, ecx
  00435	75 04		 jne	 SHORT $LN66@zipCloseFi
  00437	85 c0		 test	 eax, eax
  00439	74 57		 je	 SHORT $LN43@zipCloseFi
$LN66@zipCloseFi:

; 1716 :           {
; 1717 :             // Update the size in the ZIP64 extended field.
; 1718 :             if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_zip64extrainfo + 4,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0043b	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0043e	83 c0 04	 add	 eax, 4
  00441	6a 00		 push	 0
  00443	83 d1 00	 adc	 ecx, 0
  00446	51		 push	 ecx
  00447	50		 push	 eax
  00448	8b ce		 mov	 ecx, esi
  0044a	e8 00 00 00 00	 call	 _call_zseek64
  0044f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00452	85 c0		 test	 eax, eax
  00454	74 05		 je	 SHORT $LN39@zipCloseFi

; 1719 :               err = ZIP_ERRNO;

  00456	83 cf ff	 or	 edi, -1

; 1720 : 
; 1721 :             if (err==ZIP_OK) /* compressed size, unknown */

  00459	eb 37		 jmp	 SHORT $LN43@zipCloseFi
$LN39@zipCloseFi:
  0045b	85 ff		 test	 edi, edi
  0045d	75 33		 jne	 SHORT $LN43@zipCloseFi

; 1722 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, uncompressed_size, 8);

  0045f	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00462	8b ce		 mov	 ecx, esi
  00464	6a 08		 push	 8
  00466	ff 74 24 14	 push	 DWORD PTR _uncompressed_size$2$[esp+44]
  0046a	53		 push	 ebx
  0046b	e8 00 00 00 00	 call	 _zip64local_putValue
  00470	8b f8		 mov	 edi, eax
  00472	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1723 : 
; 1724 :             if (err==ZIP_OK) /* uncompressed size, unknown */

  00475	85 ff		 test	 edi, edi
  00477	75 19		 jne	 SHORT $LN43@zipCloseFi

; 1725 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, compressed_size, 8);

  00479	6a 08		 push	 8
  0047b	ff 74 24 1c	 push	 DWORD PTR _compressed_size$1$[esp+44]
  0047f	ff 74 24 1c	 push	 DWORD PTR _compressed_size$2$[esp+48]
$LN72@zipCloseFi:

; 1735 :         }
; 1736 : 
; 1737 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, cur_pos_inzip,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00483	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00486	8b ce		 mov	 ecx, esi
  00488	e8 00 00 00 00	 call	 _zip64local_putValue
  0048d	8b f8		 mov	 edi, eax
  0048f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN43@zipCloseFi:
  00492	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00495	8b ce		 mov	 ecx, esi
  00497	6a 00		 push	 0
  00499	ff 74 24 28	 push	 DWORD PTR _cur_pos_inzip$1$[esp+44]
  0049d	ff 74 24 24	 push	 DWORD PTR _cur_pos_inzip$2$[esp+48]
  004a1	e8 00 00 00 00	 call	 _call_zseek64
  004a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  004a9	85 c0		 test	 eax, eax
  004ab	b8 ff ff ff ff	 mov	 eax, -1
  004b0	0f 45 f8	 cmovne	 edi, eax
$LN44@zipCloseFi:

; 1738 :             err = ZIP_ERRNO;
; 1739 :     }
; 1740 : 
; 1741 :     zi->number_entry ++;

  004b3	83 86 f8 00 01
	00 01		 add	 DWORD PTR [esi+65784], 1

; 1742 :     zi->in_opened_file_inzip = 0;
; 1743 : 
; 1744 :     return err;

  004ba	8b c7		 mov	 eax, edi
  004bc	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  004c3	83 96 fc 00 01
	00 00		 adc	 DWORD PTR [esi+65788], 0

; 1745 : }

  004ca	5f		 pop	 edi
  004cb	5e		 pop	 esi
  004cc	5b		 pop	 ebx
  004cd	8b e5		 mov	 esp, ebp
  004cf	5d		 pop	 ebp
  004d0	c2 10 00	 ret	 16			; 00000010H
$LN53@zipCloseFi:
  004d3	5f		 pop	 edi
  004d4	5e		 pop	 esi
  004d5	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  004da	5b		 pop	 ebx
  004db	8b e5		 mov	 esp, ebp
  004dd	5d		 pop	 ebp
  004de	c2 10 00	 ret	 16			; 00000010H
_zipCloseFileInZipRaw64@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZip@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_zipCloseFileInZip@4 PROC				; COMDAT

; 1748 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1749 :     return zipCloseFileInZipRaw (file,0,0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000a	e8 00 00 00 00	 call	 _zipCloseFileInZipRaw@12

; 1750 : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
_zipCloseFileInZip@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _Write_Zip64EndOfCentralDirectoryLocator
_TEXT	SEGMENT
_zip64eocd_pos_inzip$ = 8				; size = 8
_Write_Zip64EndOfCentralDirectoryLocator PROC		; COMDAT
; _zi$ = ecx

; 1753 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1754 :   int err = ZIP_OK;
; 1755 :   ZPOS64_T pos = zip64eocd_pos_inzip - zi->add_position_when_writting_offset;

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _zip64eocd_pos_inzip$[ebp+4]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _zip64eocd_pos_inzip$[ebp]
  0000c	8b f1		 mov	 esi, ecx

; 1756 : 
; 1757 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDLOCHEADERMAGIC,4);

  0000e	6a 04		 push	 4
  00010	6a 00		 push	 0
  00012	68 50 4b 06 07	 push	 117853008		; 07064b50H
  00017	2b be f0 00 01
	00		 sub	 edi, DWORD PTR [esi+65776]
  0001d	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00020	1b 9e f4 00 01
	00		 sbb	 ebx, DWORD PTR [esi+65780]
  00026	e8 00 00 00 00	 call	 _zip64local_putValue
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1758 : 
; 1759 :   /*num disks*/
; 1760 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0002e	85 c0		 test	 eax, eax
  00030	75 3c		 jne	 SHORT $LN4@Write_Zip6

; 1761 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00032	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00035	8b ce		 mov	 ecx, esi
  00037	6a 04		 push	 4
  00039	50		 push	 eax
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _zip64local_putValue
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1762 : 
; 1763 :   /*relative offset*/
; 1764 :     if (err==ZIP_OK) /* Relative offset to the Zip64EndOfCentralDirectory */

  00043	85 c0		 test	 eax, eax
  00045	75 27		 jne	 SHORT $LN4@Write_Zip6

; 1765 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, pos,8);

  00047	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0004a	8b ce		 mov	 ecx, esi
  0004c	6a 08		 push	 8
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 _zip64local_putValue
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1766 : 
; 1767 :   /*total disks*/ /* Do not support spawning of disk so always say 1 here*/
; 1768 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00058	85 c0		 test	 eax, eax
  0005a	75 12		 jne	 SHORT $LN4@Write_Zip6

; 1769 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)1,4);

  0005c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0005f	8b ce		 mov	 ecx, esi
  00061	6a 04		 push	 4
  00063	50		 push	 eax
  00064	6a 01		 push	 1
  00066	e8 00 00 00 00	 call	 _zip64local_putValue
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Write_Zip6:

; 1770 : 
; 1771 :     return err;
; 1772 : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_Write_Zip64EndOfCentralDirectoryLocator ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _Write_Zip64EndOfCentralDirectoryRecord
_TEXT	SEGMENT
_centraldir_pos_inzip$ = 8				; size = 8
_Write_Zip64EndOfCentralDirectoryRecord PROC		; COMDAT
; _zi$ = ecx
; _size_centraldir$ = edx

; 1775 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx
  00007	8b fa		 mov	 edi, edx

; 1776 :   int err = ZIP_OK;
; 1777 : 
; 1778 :   uLong Zip64DataSize = 44;
; 1779 : 
; 1780 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDHEADERMAGIC,4);

  00009	6a 04		 push	 4
  0000b	6a 00		 push	 0
  0000d	68 50 4b 06 06	 push	 101075792		; 06064b50H
  00012	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00015	e8 00 00 00 00	 call	 _zip64local_putValue
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1781 : 
; 1782 :   if (err==ZIP_OK) /* size of this 'zip64 end of central directory' */

  0001d	85 c0		 test	 eax, eax
  0001f	0f 85 f2 00 00
	00		 jne	 $LN10@Write_Zip6

; 1783 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)Zip64DataSize,8); // why ZPOS64_T of this ?

  00025	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00028	8b ce		 mov	 ecx, esi
  0002a	6a 08		 push	 8
  0002c	50		 push	 eax
  0002d	6a 2c		 push	 44			; 0000002cH
  0002f	e8 00 00 00 00	 call	 _zip64local_putValue
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1784 : 
; 1785 :   if (err==ZIP_OK) /* version made by */

  00037	85 c0		 test	 eax, eax
  00039	0f 85 d8 00 00
	00		 jne	 $LN10@Write_Zip6

; 1786 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  0003f	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00042	8b ce		 mov	 ecx, esi
  00044	6a 02		 push	 2
  00046	50		 push	 eax
  00047	6a 2d		 push	 45			; 0000002dH
  00049	e8 00 00 00 00	 call	 _zip64local_putValue
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1787 : 
; 1788 :   if (err==ZIP_OK) /* version needed */

  00051	85 c0		 test	 eax, eax
  00053	0f 85 be 00 00
	00		 jne	 $LN10@Write_Zip6

; 1789 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  00059	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0005c	8b ce		 mov	 ecx, esi
  0005e	6a 02		 push	 2
  00060	50		 push	 eax
  00061	6a 2d		 push	 45			; 0000002dH
  00063	e8 00 00 00 00	 call	 _zip64local_putValue
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1790 : 
; 1791 :   if (err==ZIP_OK) /* number of this disk */

  0006b	85 c0		 test	 eax, eax
  0006d	0f 85 a4 00 00
	00		 jne	 $LN10@Write_Zip6

; 1792 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00073	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00076	8b ce		 mov	 ecx, esi
  00078	6a 04		 push	 4
  0007a	50		 push	 eax
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _zip64local_putValue
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1793 : 
; 1794 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00084	85 c0		 test	 eax, eax
  00086	0f 85 8b 00 00
	00		 jne	 $LN10@Write_Zip6

; 1795 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  0008c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0008f	8b ce		 mov	 ecx, esi
  00091	6a 04		 push	 4
  00093	50		 push	 eax
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _zip64local_putValue
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1796 : 
; 1797 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  0009d	85 c0		 test	 eax, eax
  0009f	75 76		 jne	 SHORT $LN10@Write_Zip6

; 1798 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  000a1	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000a4	8b ce		 mov	 ecx, esi
  000a6	6a 08		 push	 8
  000a8	ff b6 fc 00 01
	00		 push	 DWORD PTR [esi+65788]
  000ae	ff b6 f8 00 01
	00		 push	 DWORD PTR [esi+65784]
  000b4	e8 00 00 00 00	 call	 _zip64local_putValue
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1799 : 
; 1800 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  000bc	85 c0		 test	 eax, eax
  000be	75 57		 jne	 SHORT $LN10@Write_Zip6

; 1801 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  000c0	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000c3	8b ce		 mov	 ecx, esi
  000c5	6a 08		 push	 8
  000c7	ff b6 fc 00 01
	00		 push	 DWORD PTR [esi+65788]
  000cd	ff b6 f8 00 01
	00		 push	 DWORD PTR [esi+65784]
  000d3	e8 00 00 00 00	 call	 _zip64local_putValue
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1802 : 
; 1803 :   if (err==ZIP_OK) /* size of the central directory */

  000db	85 c0		 test	 eax, eax
  000dd	75 38		 jne	 SHORT $LN10@Write_Zip6

; 1804 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)size_centraldir,8);

  000df	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000e2	8b ce		 mov	 ecx, esi
  000e4	6a 08		 push	 8
  000e6	50		 push	 eax
  000e7	57		 push	 edi
  000e8	e8 00 00 00 00	 call	 _zip64local_putValue
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1805 : 
; 1806 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  000f0	85 c0		 test	 eax, eax
  000f2	75 23		 jne	 SHORT $LN10@Write_Zip6

; 1807 :   {
; 1808 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writting_offset;

  000f4	8b 4d 08	 mov	 ecx, DWORD PTR _centraldir_pos_inzip$[ebp]
  000f7	2b 8e f0 00 01
	00		 sub	 ecx, DWORD PTR [esi+65776]
  000fd	8b 45 0c	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  00100	1b 86 f4 00 01
	00		 sbb	 eax, DWORD PTR [esi+65780]

; 1809 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (ZPOS64_T)pos,8);

  00106	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00109	6a 08		 push	 8
  0010b	50		 push	 eax
  0010c	51		 push	 ecx
  0010d	8b ce		 mov	 ecx, esi
  0010f	e8 00 00 00 00	 call	 _zip64local_putValue
  00114	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@Write_Zip6:

; 1810 :   }
; 1811 :   return err;
; 1812 : }

  00117	5f		 pop	 edi
  00118	5e		 pop	 esi
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
_Write_Zip64EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _Write_EndOfCentralDirectoryRecord
_TEXT	SEGMENT
tv294 = -8						; size = 8
_centraldir_pos_inzip$ = 8				; size = 8
_Write_EndOfCentralDirectoryRecord PROC			; COMDAT
; _zi$ = ecx
; _size_centraldir$ = edx

; 1814 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b fa		 mov	 edi, edx

; 1815 :   int err = ZIP_OK;
; 1816 : 
; 1817 :   /*signature*/
; 1818 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ENDHEADERMAGIC,4);

  0000c	6a 04		 push	 4
  0000e	6a 00		 push	 0
  00010	68 50 4b 05 06	 push	 101010256		; 06054b50H
  00015	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00018	e8 00 00 00 00	 call	 _zip64local_putValue
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1819 : 
; 1820 :   if (err==ZIP_OK) /* number of this disk */

  00020	85 c0		 test	 eax, eax
  00022	0f 85 f9 00 00
	00		 jne	 $LN13@Write_EndO

; 1821 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00028	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0002b	8b ce		 mov	 ecx, esi
  0002d	6a 02		 push	 2
  0002f	50		 push	 eax
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _zip64local_putValue
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1822 : 
; 1823 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00039	85 c0		 test	 eax, eax
  0003b	0f 85 e0 00 00
	00		 jne	 $LN13@Write_EndO

; 1824 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00041	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00044	8b ce		 mov	 ecx, esi
  00046	6a 02		 push	 2
  00048	50		 push	 eax
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _zip64local_putValue
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1825 : 
; 1826 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  00052	85 c0		 test	 eax, eax
  00054	0f 85 c7 00 00
	00		 jne	 $LN13@Write_EndO

; 1827 :   {
; 1828 :     {
; 1829 :       if(zi->number_entry >= 0xFFFF)

  0005a	83 be fc 00 01
	00 00		 cmp	 DWORD PTR [esi+65788], 0
  00061	8b 86 f8 00 01
	00		 mov	 eax, DWORD PTR [esi+65784]
  00067	77 07		 ja	 SHORT $LN15@Write_EndO
  00069	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0006e	72 05		 jb	 SHORT $LN6@Write_EndO
$LN15@Write_EndO:

; 1830 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  00070	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
$LN6@Write_EndO:

; 1831 :       else
; 1832 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);
; 1833 :     }
; 1834 :   }
; 1835 : 
; 1836 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  00075	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00078	8b ce		 mov	 ecx, esi
  0007a	6a 02		 push	 2
  0007c	6a 00		 push	 0
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 _zip64local_putValue
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH
  00087	85 c0		 test	 eax, eax
  00089	0f 85 92 00 00
	00		 jne	 $LN13@Write_EndO

; 1837 :   {
; 1838 :     if(zi->number_entry >= 0xFFFF)

  0008f	83 be fc 00 01
	00 00		 cmp	 DWORD PTR [esi+65788], 0
  00096	8b 86 f8 00 01
	00		 mov	 eax, DWORD PTR [esi+65784]
  0009c	77 07		 ja	 SHORT $LN16@Write_EndO
  0009e	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  000a3	72 05		 jb	 SHORT $LN9@Write_EndO
$LN16@Write_EndO:

; 1839 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  000a5	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
$LN9@Write_EndO:

; 1840 :     else
; 1841 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);
; 1842 :   }
; 1843 : 
; 1844 :   if (err==ZIP_OK) /* size of the central directory */

  000aa	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000ad	8b ce		 mov	 ecx, esi
  000af	6a 02		 push	 2
  000b1	6a 00		 push	 0
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 _zip64local_putValue
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	85 c0		 test	 eax, eax
  000be	75 61		 jne	 SHORT $LN13@Write_EndO

; 1845 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_centraldir,4);

  000c0	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000c3	8b ce		 mov	 ecx, esi
  000c5	6a 04		 push	 4
  000c7	50		 push	 eax
  000c8	57		 push	 edi
  000c9	e8 00 00 00 00	 call	 _zip64local_putValue
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1846 : 
; 1847 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  000d1	85 c0		 test	 eax, eax
  000d3	75 4c		 jne	 SHORT $LN13@Write_EndO

; 1848 :   {
; 1849 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writting_offset;

  000d5	8b 4d 08	 mov	 ecx, DWORD PTR _centraldir_pos_inzip$[ebp]
  000d8	8b f9		 mov	 edi, ecx
  000da	2b be f0 00 01
	00		 sub	 edi, DWORD PTR [esi+65776]
  000e0	8b 45 0c	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  000e3	1b 86 f4 00 01
	00		 sbb	 eax, DWORD PTR [esi+65780]
  000e9	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]

; 1850 :     if(pos >= 0xffffffff)

  000ec	89 45 fc	 mov	 DWORD PTR tv294[ebp+4], eax
  000ef	75 20		 jne	 SHORT $LN17@Write_EndO
  000f1	83 ff ff	 cmp	 edi, -1
  000f4	73 1b		 jae	 SHORT $LN17@Write_EndO

; 1853 :     }
; 1854 :     else
; 1855 :                   err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)(centraldir_pos_inzip - zi->add_position_when_writting_offset),4);

  000f6	2b 8e f0 00 01
	00		 sub	 ecx, DWORD PTR [esi+65776]
  000fc	6a 04		 push	 4
  000fe	6a 00		 push	 0
  00100	51		 push	 ecx

; 1856 :   }
; 1857 : 
; 1858 :    return err;
; 1859 : }

  00101	8b ce		 mov	 ecx, esi
  00103	e8 00 00 00 00	 call	 _zip64local_putValue
  00108	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010b	5f		 pop	 edi
  0010c	5e		 pop	 esi
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c3		 ret	 0
$LN17@Write_EndO:

; 1851 :     {
; 1852 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)0xffffffff,4);

  00111	6a 04		 push	 4
  00113	6a 00		 push	 0
  00115	6a ff		 push	 -1

; 1856 :   }
; 1857 : 
; 1858 :    return err;
; 1859 : }

  00117	8b ce		 mov	 ecx, esi
  00119	e8 00 00 00 00	 call	 _zip64local_putValue
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@Write_EndO:
  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
_Write_EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _Write_GlobalComment
_TEXT	SEGMENT
_global_comment$1$ = -4					; size = 4
_Write_GlobalComment PROC				; COMDAT
; _zi$ = ecx
; _global_comment$ = edx

; 1862 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b c2		 mov	 eax, edx

; 1863 :   int err = ZIP_OK;
; 1864 :   uInt size_global_comment = 0;

  00008	33 f6		 xor	 esi, esi
  0000a	89 45 fc	 mov	 DWORD PTR _global_comment$1$[ebp], eax
  0000d	8b d9		 mov	 ebx, ecx
  0000f	57		 push	 edi

; 1865 : 
; 1866 :   if(global_comment != NULL)

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN2@Write_Glob

; 1867 :     size_global_comment = (uInt)strlen(global_comment);

  00014	8b f0		 mov	 esi, eax
  00016	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@Write_Glob:
  00020	8a 06		 mov	 al, BYTE PTR [esi]
  00022	46		 inc	 esi
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL6@Write_Glob
  00027	2b f1		 sub	 esi, ecx
$LN2@Write_Glob:

; 1868 : 
; 1869 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_global_comment,2);

  00029	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  0002c	8b cb		 mov	 ecx, ebx
  0002e	6a 02		 push	 2
  00030	6a 00		 push	 0
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 _zip64local_putValue
  00038	8b f8		 mov	 edi, eax
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1870 : 
; 1871 :   if (err == ZIP_OK && size_global_comment > 0)

  0003d	85 ff		 test	 edi, edi
  0003f	75 1e		 jne	 SHORT $LN7@Write_Glob
  00041	85 f6		 test	 esi, esi
  00043	74 1a		 je	 SHORT $LN7@Write_Glob

; 1872 :   {
; 1873 :     if (ZWRITE64(zi->z_filefunc,zi->filestream, global_comment, size_global_comment) != size_global_comment)

  00045	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00048	56		 push	 esi
  00049	ff 75 fc	 push	 DWORD PTR _global_comment$1$[ebp]
  0004c	ff 73 2c	 push	 DWORD PTR [ebx+44]
  0004f	ff 73 1c	 push	 DWORD PTR [ebx+28]
  00052	ff d1		 call	 ecx
  00054	83 c9 ff	 or	 ecx, -1
  00057	83 c4 10	 add	 esp, 16			; 00000010H
  0005a	3b c6		 cmp	 eax, esi
  0005c	0f 45 f9	 cmovne	 edi, ecx
$LN7@Write_Glob:

; 1874 :       err = ZIP_ERRNO;
; 1875 :   }
; 1876 :   return err;
; 1877 : }

  0005f	8b c7		 mov	 eax, edi
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_Write_GlobalComment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\contrib\minizip\zip.c
;	COMDAT _zipClose@8
_TEXT	SEGMENT
_size_centraldir$1$ = -24				; size = 4
_err$1$ = -20						; size = 4
_centraldir_pos_inzip$2$ = -16				; size = 4
_centraldir_pos_inzip$1$ = -12				; size = 4
tv330 = -8						; size = 8
_file$ = 8						; size = 4
_global_comment$ = 12					; size = 4
_zipClose@8 PROC					; COMDAT

; 1880 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	53		 push	 ebx

; 1881 :     zip64_internal* zi;
; 1882 :     int err = 0;
; 1883 :     uLong size_centraldir = 0;
; 1884 :     ZPOS64_T centraldir_pos_inzip;
; 1885 :     ZPOS64_T pos;
; 1886 : 
; 1887 :     if (file == NULL)

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR _file$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	33 ff		 xor	 edi, edi
  00011	89 7c 24 14	 mov	 DWORD PTR _err$1$[esp+40], edi
  00015	89 7c 24 10	 mov	 DWORD PTR _size_centraldir$1$[esp+40], edi
  00019	85 db		 test	 ebx, ebx
  0001b	75 0c		 jne	 SHORT $LN4@zipClose

; 1888 :         return ZIP_PARAMERROR;

  0001d	8d 47 9a	 lea	 eax, DWORD PTR [edi-102]

; 1946 : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
$LN4@zipClose:

; 1889 : 
; 1890 :     zi = (zip64_internal*)file;
; 1891 : 
; 1892 :     if (zi->in_opened_file_inzip == 1)

  00029	83 7b 38 01	 cmp	 DWORD PTR [ebx+56], 1
  0002d	75 0c		 jne	 SHORT $LN5@zipClose

; 1893 :     {
; 1894 :         err = zipCloseFileInZip (file);

  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 _zipCloseFileInZip@4
  00035	8b f8		 mov	 edi, eax
  00037	89 44 24 14	 mov	 DWORD PTR _err$1$[esp+40], eax
$LN5@zipClose:

; 1895 :     }
; 1896 : 
; 1897 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1898 :     if (global_comment==NULL)

  0003b	83 7d 0c 00	 cmp	 DWORD PTR _global_comment$[ebp], 0
  0003f	75 09		 jne	 SHORT $LN23@zipClose

; 1899 :         global_comment = zi->globalcomment;

  00041	8b 83 00 01 01
	00		 mov	 eax, DWORD PTR [ebx+65792]
  00047	89 45 0c	 mov	 DWORD PTR _global_comment$[ebp], eax
$LN23@zipClose:

; 1900 : #endif
; 1901 : 
; 1902 :     centraldir_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  0004a	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  0004d	8b cb		 mov	 ecx, ebx
  0004f	e8 00 00 00 00	 call	 _call_ztell64
  00054	89 44 24 18	 mov	 DWORD PTR _centraldir_pos_inzip$2$[esp+40], eax
  00058	89 54 24 1c	 mov	 DWORD PTR _centraldir_pos_inzip$1$[esp+40], edx

; 1903 : 
; 1904 :     if (err==ZIP_OK)

  0005c	85 ff		 test	 edi, edi
  0005e	75 4e		 jne	 SHORT $LN3@zipClose

; 1905 :     {
; 1906 :         linkedlist_datablock_internal* ldi = zi->central_dir.first_block;

  00060	8b 73 30	 mov	 esi, DWORD PTR [ebx+48]

; 1907 :         while (ldi!=NULL)

  00063	85 f6		 test	 esi, esi
  00065	74 47		 je	 SHORT $LN3@zipClose
  00067	33 c0		 xor	 eax, eax
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@zipClose:

; 1908 :         {
; 1909 :             if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))

  00070	85 ff		 test	 edi, edi
  00072	75 29		 jne	 SHORT $LN9@zipClose
  00074	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00077	85 c9		 test	 ecx, ecx
  00079	74 22		 je	 SHORT $LN9@zipClose

; 1910 :             {
; 1911 :                 if (ZWRITE64(zi->z_filefunc,zi->filestream, ldi->data, ldi->filled_in_this_block) != ldi->filled_in_this_block)

  0007b	51		 push	 ecx
  0007c	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0007f	50		 push	 eax
  00080	ff 73 2c	 push	 DWORD PTR [ebx+44]
  00083	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00086	ff 73 1c	 push	 DWORD PTR [ebx+28]
  00089	ff d0		 call	 eax
  0008b	83 c4 10	 add	 esp, 16			; 00000010H
  0008e	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00091	b8 ff ff ff ff	 mov	 eax, -1
  00096	0f 45 f8	 cmovne	 edi, eax
  00099	8b 44 24 10	 mov	 eax, DWORD PTR _size_centraldir$1$[esp+40]
$LN9@zipClose:

; 1912 :                     err = ZIP_ERRNO;
; 1913 :             }
; 1914 : 
; 1915 :             size_centraldir += ldi->filled_in_this_block;

  0009d	03 46 08	 add	 eax, DWORD PTR [esi+8]

; 1916 :             ldi = ldi->next_datablock;

  000a0	8b 36		 mov	 esi, DWORD PTR [esi]
  000a2	89 44 24 10	 mov	 DWORD PTR _size_centraldir$1$[esp+40], eax
  000a6	85 f6		 test	 esi, esi
  000a8	75 c6		 jne	 SHORT $LL2@zipClose
  000aa	89 7c 24 14	 mov	 DWORD PTR _err$1$[esp+40], edi
$LN3@zipClose:

; 1917 :         }
; 1918 :     }
; 1919 :     free_linkedlist(&(zi->central_dir));

  000ae	8d 4b 30	 lea	 ecx, DWORD PTR [ebx+48]
  000b1	e8 00 00 00 00	 call	 _free_linkedlist

; 1920 : 
; 1921 :     pos = centraldir_pos_inzip - zi->add_position_when_writting_offset;

  000b6	8b 54 24 18	 mov	 edx, DWORD PTR _centraldir_pos_inzip$2$[esp+40]
  000ba	8b ca		 mov	 ecx, edx
  000bc	2b 8b f0 00 01
	00		 sub	 ecx, DWORD PTR [ebx+65776]
  000c2	8b 74 24 1c	 mov	 esi, DWORD PTR _centraldir_pos_inzip$1$[esp+40]
  000c6	8b c6		 mov	 eax, esi
  000c8	1b 83 f4 00 01
	00		 sbb	 eax, DWORD PTR [ebx+65780]

; 1922 :     if(pos >= 0xffffffff)

  000ce	89 44 24 24	 mov	 DWORD PTR tv330[esp+44], eax
  000d2	75 05		 jne	 SHORT $LN24@zipClose
  000d4	83 f9 ff	 cmp	 ecx, -1
  000d7	72 39		 jb	 SHORT $LN10@zipClose
$LN24@zipClose:

; 1923 :     {
; 1924 :       ZPOS64_T Zip64EOCDpos = ZTELL64(zi->z_filefunc,zi->filestream);

  000d9	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  000dc	8b cb		 mov	 ecx, ebx
  000de	e8 00 00 00 00	 call	 _call_ztell64

; 1925 :       Write_Zip64EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  000e3	ff 74 24 1c	 push	 DWORD PTR _centraldir_pos_inzip$1$[esp+40]
  000e7	8b f2		 mov	 esi, edx
  000e9	8b cb		 mov	 ecx, ebx
  000eb	ff 74 24 1c	 push	 DWORD PTR _centraldir_pos_inzip$2$[esp+44]
  000ef	8b 54 24 18	 mov	 edx, DWORD PTR _size_centraldir$1$[esp+48]
  000f3	8b f8		 mov	 edi, eax
  000f5	e8 00 00 00 00	 call	 _Write_Zip64EndOfCentralDirectoryRecord

; 1926 : 
; 1927 :       Write_Zip64EndOfCentralDirectoryLocator(zi, Zip64EOCDpos);

  000fa	56		 push	 esi
  000fb	57		 push	 edi
  000fc	8b cb		 mov	 ecx, ebx
  000fe	e8 00 00 00 00	 call	 _Write_Zip64EndOfCentralDirectoryLocator
  00103	8b 7c 24 24	 mov	 edi, DWORD PTR _err$1$[esp+56]
  00107	83 c4 10	 add	 esp, 16			; 00000010H
  0010a	8b 54 24 18	 mov	 edx, DWORD PTR _centraldir_pos_inzip$2$[esp+40]
  0010e	8b 74 24 1c	 mov	 esi, DWORD PTR _centraldir_pos_inzip$1$[esp+40]
$LN10@zipClose:

; 1928 :     }
; 1929 : 
; 1930 :     if (err==ZIP_OK)

  00112	85 ff		 test	 edi, edi
  00114	75 22		 jne	 SHORT $LN12@zipClose

; 1931 :       err = Write_EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  00116	56		 push	 esi
  00117	52		 push	 edx
  00118	8b 54 24 18	 mov	 edx, DWORD PTR _size_centraldir$1$[esp+48]
  0011c	8b cb		 mov	 ecx, ebx
  0011e	e8 00 00 00 00	 call	 _Write_EndOfCentralDirectoryRecord
  00123	8b f8		 mov	 edi, eax
  00125	83 c4 08	 add	 esp, 8

; 1932 : 
; 1933 :     if(err == ZIP_OK)

  00128	85 ff		 test	 edi, edi
  0012a	75 0c		 jne	 SHORT $LN12@zipClose

; 1934 :       err = Write_GlobalComment(zi, global_comment);

  0012c	8b 55 0c	 mov	 edx, DWORD PTR _global_comment$[ebp]
  0012f	8b cb		 mov	 ecx, ebx
  00131	e8 00 00 00 00	 call	 _Write_GlobalComment
  00136	8b f8		 mov	 edi, eax
$LN12@zipClose:

; 1935 : 
; 1936 :     if (ZCLOSE64(zi->z_filefunc,zi->filestream) != 0)

  00138	ff 73 2c	 push	 DWORD PTR [ebx+44]
  0013b	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0013e	ff 73 1c	 push	 DWORD PTR [ebx+28]
  00141	ff d0		 call	 eax
  00143	83 c4 08	 add	 esp, 8
  00146	85 c0		 test	 eax, eax
  00148	74 0a		 je	 SHORT $LN14@zipClose

; 1937 :         if (err == ZIP_OK)

  0014a	85 ff		 test	 edi, edi
  0014c	b8 ff ff ff ff	 mov	 eax, -1
  00151	0f 44 f8	 cmove	 edi, eax
$LN14@zipClose:

; 1938 :             err = ZIP_ERRNO;
; 1939 : 
; 1940 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1941 :     TRYFREE(zi->globalcomment);

  00154	8b 83 00 01 01
	00		 mov	 eax, DWORD PTR [ebx+65792]
  0015a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__free
  00160	85 c0		 test	 eax, eax
  00162	74 06		 je	 SHORT $LN15@zipClose
  00164	50		 push	 eax
  00165	ff d6		 call	 esi
  00167	83 c4 04	 add	 esp, 4
$LN15@zipClose:

; 1942 : #endif
; 1943 :     TRYFREE(zi);

  0016a	53		 push	 ebx
  0016b	ff d6		 call	 esi
  0016d	83 c4 04	 add	 esp, 4

; 1944 : 
; 1945 :     return err;

  00170	8b c7		 mov	 eax, edi

; 1946 : }

  00172	5f		 pop	 edi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 08 00	 ret	 8
_zipClose@8 ENDP
_TEXT	ENDS
END
