; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26730.0 

	TITLE	e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\zutil.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_z_errmsg
PUBLIC	??_C@_0BA@MOKMMFOD@need?5dictionary@		; `string'
PUBLIC	??_C@_0L@FNAOCBOG@stream?5end@			; `string'
PUBLIC	??_C@_0L@KIJFAKBJ@file?5error@			; `string'
PUBLIC	??_C@_0N@MKKNPMJD@stream?5error@		; `string'
PUBLIC	??_C@_0L@HAHMBNLP@data?5error@			; `string'
PUBLIC	??_C@_0BE@OGGJBMCE@insufficient?5memory@	; `string'
PUBLIC	??_C@_0N@DFPGLBGC@buffer?5error@		; `string'
PUBLIC	??_C@_0BF@CJFPCCEG@incompatible?5version@	; `string'
;	COMDAT ??_C@_0BF@CJFPCCEG@incompatible?5version@
CONST	SEGMENT
??_C@_0BF@CJFPCCEG@incompatible?5version@ DB 'incompatible version', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DFPGLBGC@buffer?5error@
CONST	SEGMENT
??_C@_0N@DFPGLBGC@buffer?5error@ DB 'buffer error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OGGJBMCE@insufficient?5memory@
CONST	SEGMENT
??_C@_0BE@OGGJBMCE@insufficient?5memory@ DB 'insufficient memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HAHMBNLP@data?5error@
CONST	SEGMENT
??_C@_0L@HAHMBNLP@data?5error@ DB 'data error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MKKNPMJD@stream?5error@
CONST	SEGMENT
??_C@_0N@MKKNPMJD@stream?5error@ DB 'stream error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KIJFAKBJ@file?5error@
CONST	SEGMENT
??_C@_0L@KIJFAKBJ@file?5error@ DB 'file error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FNAOCBOG@stream?5end@
CONST	SEGMENT
??_C@_0L@FNAOCBOG@stream?5end@ DB 'stream end', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MOKMMFOD@need?5dictionary@
CONST	SEGMENT
??_C@_0BA@MOKMMFOD@need?5dictionary@ DB 'need dictionary', 00H ; `string'
	ORG $+3
_z_errmsg DD	FLAT:??_C@_0BA@MOKMMFOD@need?5dictionary@
	DD	FLAT:??_C@_0L@FNAOCBOG@stream?5end@
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:??_C@_0L@KIJFAKBJ@file?5error@
	DD	FLAT:??_C@_0N@MKKNPMJD@stream?5error@
	DD	FLAT:??_C@_0L@HAHMBNLP@data?5error@
	DD	FLAT:??_C@_0BE@OGGJBMCE@insufficient?5memory@
	DD	FLAT:??_C@_0N@DFPGLBGC@buffer?5error@
	DD	FLAT:??_C@_0BF@CJFPCCEG@incompatible?5version@
	DD	FLAT:??_C@_00CNPNBAHC@@
PUBLIC	_zError@4
PUBLIC	_zlibCompileFlags@0
PUBLIC	_zlibVersion@0
PUBLIC	_zcfree
PUBLIC	_zcalloc
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\zutil.c
;	COMDAT _zcalloc
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_items$ = 12						; size = 4
_size$ = 16						; size = 4
_zcalloc PROC						; COMDAT

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 305  :     if (opaque) items += size - size; /* make compiler happy */
; 306  :     return sizeof(uInt) > 2 ? (voidpf)malloc(items * size) :

  00003	8b 45 0c	 mov	 eax, DWORD PTR _items$[ebp]
  00006	0f af 45 10	 imul	 eax, DWORD PTR _size$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00011	83 c4 04	 add	 esp, 4

; 307  :                               (voidpf)calloc(items, size);
; 308  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
_zcalloc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\zutil.c
;	COMDAT _zcfree
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_ptr$ = 12						; size = 4
_zcfree	PROC						; COMDAT

; 313  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 314  :     free(ptr);

  00003	ff 75 0c	 push	 DWORD PTR _ptr$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0000c	83 c4 04	 add	 esp, 4

; 315  :     if (opaque) return; /* make compiler happy */
; 316  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_zcfree	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\zutil.c
;	COMDAT _zlibVersion@0
_TEXT	SEGMENT
_zlibVersion@0 PROC					; COMDAT

; 29   :     return ZLIB_VERSION;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05DFCKICEH@1?42?45@

; 30   : }

  00005	c3		 ret	 0
_zlibVersion@0 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\zutil.c
;	COMDAT _zlibCompileFlags@0
_TEXT	SEGMENT
_zlibCompileFlags@0 PROC				; COMDAT

; 34   :     uLong flags;
; 35   : 
; 36   :     flags = 0;
; 37   :     switch ((int)(sizeof(uInt))) {
; 38   :     case 2:     break;
; 39   :     case 4:     flags += 1;     break;
; 40   :     case 8:     flags += 2;     break;
; 41   :     default:    flags += 3;
; 42   :     }
; 43   :     switch ((int)(sizeof(uLong))) {
; 44   :     case 2:     break;
; 45   :     case 4:     flags += 1 << 2;        break;
; 46   :     case 8:     flags += 2 << 2;        break;
; 47   :     default:    flags += 3 << 2;
; 48   :     }
; 49   :     switch ((int)(sizeof(voidpf))) {
; 50   :     case 2:     break;
; 51   :     case 4:     flags += 1 << 4;        break;
; 52   :     case 8:     flags += 2 << 4;        break;
; 53   :     default:    flags += 3 << 4;
; 54   :     }
; 55   :     switch ((int)(sizeof(z_off_t))) {
; 56   :     case 2:     break;
; 57   :     case 4:     flags += 1 << 6;        break;
; 58   :     case 8:     flags += 2 << 6;        break;
; 59   :     default:    flags += 3 << 6;
; 60   :     }
; 61   : #ifdef DEBUG
; 62   :     flags += 1 << 8;
; 63   : #endif
; 64   : #if defined(ASMV) || defined(ASMINF)
; 65   :     flags += 1 << 9;
; 66   : #endif
; 67   : #ifdef ZLIB_WINAPI
; 68   :     flags += 1 << 10;
; 69   : #endif
; 70   : #ifdef BUILDFIXED
; 71   :     flags += 1 << 12;
; 72   : #endif
; 73   : #ifdef DYNAMIC_CRC_TABLE
; 74   :     flags += 1 << 13;
; 75   : #endif
; 76   : #ifdef NO_GZCOMPRESS
; 77   :     flags += 1L << 16;
; 78   : #endif
; 79   : #ifdef NO_GZIP
; 80   :     flags += 1L << 17;
; 81   : #endif
; 82   : #ifdef PKZIP_BUG_WORKAROUND
; 83   :     flags += 1L << 20;
; 84   : #endif
; 85   : #ifdef FASTEST
; 86   :     flags += 1L << 21;
; 87   : #endif
; 88   : #ifdef STDC
; 89   : #  ifdef NO_vsnprintf
; 90   :         flags += 1L << 25;
; 91   : #    ifdef HAS_vsprintf_void
; 92   :         flags += 1L << 26;
; 93   : #    endif
; 94   : #  else
; 95   : #    ifdef HAS_vsnprintf_void
; 96   :         flags += 1L << 26;
; 97   : #    endif
; 98   : #  endif
; 99   : #else
; 100  :         flags += 1L << 24;
; 101  : #  ifdef NO_snprintf
; 102  :         flags += 1L << 25;
; 103  : #    ifdef HAS_sprintf_void
; 104  :         flags += 1L << 26;
; 105  : #    endif
; 106  : #  else
; 107  : #    ifdef HAS_snprintf_void
; 108  :         flags += 1L << 26;
; 109  : #    endif
; 110  : #  endif
; 111  : #endif
; 112  :     return flags;

  00000	b8 55 04 00 00	 mov	 eax, 1109		; 00000455H

; 113  : }

  00005	c3		 ret	 0
_zlibCompileFlags@0 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\zutil.c
;	COMDAT _zError@4
_TEXT	SEGMENT
_err$ = 8						; size = 4
_zError@4 PROC						; COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 136  :     return ERR_MSG(err);

  00003	8b 45 08	 mov	 eax, DWORD PTR _err$[ebp]
  00006	b9 08 00 00 00	 mov	 ecx, OFFSET _z_errmsg+8
  0000b	c1 e0 02	 shl	 eax, 2
  0000e	2b c8		 sub	 ecx, eax
  00010	8b 01		 mov	 eax, DWORD PTR [ecx]

; 137  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
_zError@4 ENDP
_TEXT	ENDS
END
