; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26730.0 

	TITLE	E:\git\mcferront\anttrap-engine\3rdParty\zlib\zlib-1.2.5\trees.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	__length_code
PUBLIC	__dist_code
CONST	SEGMENT
__length_code DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
__dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
_extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
_bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
	ORG $+1
_extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
_extra_blbits DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
	ORG $+4
_static_ltree DW 0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
_static_dtree DW 00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
_base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
	ORG $+4
_base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
CONST	ENDS
PUBLIC	__tr_init
PUBLIC	__tr_tally
PUBLIC	__tr_flush_block
PUBLIC	__tr_align
PUBLIC	__tr_stored_block
_DATA	SEGMENT
_static_l_desc DD FLAT:_static_ltree
	DD	FLAT:_extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
_static_d_desc DD FLAT:_static_dtree
	DD	FLAT:_extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
_static_bl_desc DD 00H
	DD	FLAT:_extra_blbits
	DD	00H
	DD	013H
	DD	07H
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _copy_block
_TEXT	SEGMENT
tv145 = -68						; size = 4
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_header$ = 20						; size = 4
_copy_block PROC					; COMDAT

; 1227 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1228 :     bi_windup(s);        /* align on byte boundary */

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_bi_windup
	add	esp, 4

; 1229 :     s->last_eob_len = 8; /* enough lookahead for inflate */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5812], 8

; 1230 : 
; 1231 :     if (header) {

	cmp	DWORD PTR _header$[ebp], 0
	je	$LN2@copy_block

; 1232 :         put_short(s, (ush)len);

	movzx	eax, WORD PTR _len$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax
	movzx	eax, WORD PTR _len$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 1233 :         put_short(s, (ush)~len);

	mov	eax, DWORD PTR _len$[ebp]
	not	eax
	movzx	ecx, ax
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _len$[ebp]
	not	eax
	movzx	ecx, ax
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN2@copy_block:

; 1234 : #ifdef DEBUG
; 1235 :         s->bits_sent += 2*16;
; 1236 : #endif
; 1237 :     }
; 1238 : #ifdef DEBUG
; 1239 :     s->bits_sent += (ulg)len<<3;
; 1240 : #endif
; 1241 :     while (len--) {

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
	cmp	DWORD PTR tv145[ebp], 0
	je	SHORT $LN1@copy_block

; 1242 :         put_byte(s, *buf++);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	dl, BYTE PTR [edx]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 1
	mov	DWORD PTR _buf$[ebp], eax

; 1243 :     }

	jmp	SHORT $LN2@copy_block
$LN1@copy_block:

; 1244 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_copy_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _bi_flush
_TEXT	SEGMENT
_s$ = 8							; size = 4
_bi_flush PROC						; COMDAT

; 1188 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1189 :     if (s->bi_valid == 16) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5820], 16		; 00000010H
	jne	SHORT $LN2@bi_flush

; 1190 :         put_short(s, s->bi_buf);

	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 1191 :         s->bi_buf = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax

; 1192 :         s->bi_valid = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5820], 0
	jmp	SHORT $LN1@bi_flush
$LN2@bi_flush:

; 1193 :     } else if (s->bi_valid >= 8) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5820], 8
	jl	SHORT $LN1@bi_flush

; 1194 :         put_byte(s, (Byte)s->bi_buf);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [edx+5816]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 1195 :         s->bi_buf >>= 8;

	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+5816]
	shr	cx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx

; 1196 :         s->bi_valid -= 8;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	sub	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN1@bi_flush:

; 1197 :     }
; 1198 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_bi_flush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _bi_windup
_TEXT	SEGMENT
_s$ = 8							; size = 4
_bi_windup PROC						; COMDAT

; 1205 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1206 :     if (s->bi_valid > 8) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5820], 8
	jle	SHORT $LN2@bi_windup

; 1207 :         put_short(s, s->bi_buf);

	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	jmp	SHORT $LN3@bi_windup
$LN2@bi_windup:

; 1208 :     } else if (s->bi_valid > 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5820], 0
	jle	SHORT $LN3@bi_windup

; 1209 :         put_byte(s, (Byte)s->bi_buf);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [edx+5816]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN3@bi_windup:

; 1210 :     }
; 1211 :     s->bi_buf = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax

; 1212 :     s->bi_valid = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5820], 0

; 1213 : #ifdef DEBUG
; 1214 :     s->bits_sent = (s->bits_sent+7) & ~7;
; 1215 : #endif
; 1216 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_bi_windup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _bi_reverse
_TEXT	SEGMENT
_res$ = -4						; size = 4
_code$ = 8						; size = 4
_len$ = 12						; size = 4
_bi_reverse PROC					; COMDAT

; 1174 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1175 :     register unsigned res = 0;

	mov	DWORD PTR _res$[ebp], 0
$LN4@bi_reverse:

; 1176 :     do {
; 1177 :         res |= code & 1;

	mov	eax, DWORD PTR _code$[ebp]
	and	eax, 1
	or	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR _res$[ebp], eax

; 1178 :         code >>= 1, res <<= 1;

	mov	eax, DWORD PTR _code$[ebp]
	shr	eax, 1
	mov	DWORD PTR _code$[ebp], eax
	mov	ecx, DWORD PTR _res$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _res$[ebp], ecx

; 1179 :     } while (--len > 0);

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _len$[ebp], eax
	cmp	DWORD PTR _len$[ebp], 0
	jg	SHORT $LN4@bi_reverse

; 1180 :     return res >> 1;

	mov	eax, DWORD PTR _res$[ebp]
	shr	eax, 1

; 1181 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_bi_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _detect_data_type
_TEXT	SEGMENT
_n$ = -8						; size = 4
_black_mask$ = -4					; size = 4
_s$ = 8							; size = 4
_detect_data_type PROC					; COMDAT

; 1139 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 1140 :     /* black_mask is the bit mask of black-listed bytes
; 1141 :      * set bits 0..6, 14..25, and 28..31
; 1142 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1143 :      */
; 1144 :     unsigned long black_mask = 0xf3ffc07fUL;

	mov	DWORD PTR _black_mask$[ebp], -201342849	; f3ffc07fH

; 1145 :     int n;
; 1146 : 
; 1147 :     /* Check for non-textual ("black-listed") bytes. */
; 1148 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN4@detect_dat
$LN2@detect_dat:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	mov	ecx, DWORD PTR _black_mask$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _black_mask$[ebp], ecx
$LN4@detect_dat:
	cmp	DWORD PTR _n$[ebp], 31			; 0000001fH
	jg	SHORT $LN3@detect_dat

; 1149 :         if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))

	mov	eax, DWORD PTR _black_mask$[ebp]
	and	eax, 1
	je	SHORT $LN8@detect_dat
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+148]
	test	edx, edx
	je	SHORT $LN8@detect_dat

; 1150 :             return Z_BINARY;

	xor	eax, eax
	jmp	$LN1@detect_dat
$LN8@detect_dat:
	jmp	SHORT $LN2@detect_dat
$LN3@detect_dat:

; 1151 : 
; 1152 :     /* Check for textual ("white-listed") bytes. */
; 1153 :     if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
; 1154 :             || s->dyn_ltree[13].Freq != 0)

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx+148]
	test	eax, eax
	jne	SHORT $LN10@detect_dat
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx+148]
	test	eax, eax
	jne	SHORT $LN10@detect_dat
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx+148]
	test	eax, eax
	je	SHORT $LN9@detect_dat
$LN10@detect_dat:

; 1155 :         return Z_TEXT;

	mov	eax, 1
	jmp	SHORT $LN1@detect_dat
$LN9@detect_dat:

; 1156 :     for (n = 32; n < LITERALS; n++)

	mov	DWORD PTR _n$[ebp], 32			; 00000020H
	jmp	SHORT $LN7@detect_dat
$LN5@detect_dat:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN7@detect_dat:
	cmp	DWORD PTR _n$[ebp], 256			; 00000100H
	jge	SHORT $LN6@detect_dat

; 1157 :         if (s->dyn_ltree[n].Freq != 0)

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+148]
	test	edx, edx
	je	SHORT $LN11@detect_dat

; 1158 :             return Z_TEXT;

	mov	eax, 1
	jmp	SHORT $LN1@detect_dat
$LN11@detect_dat:
	jmp	SHORT $LN5@detect_dat
$LN6@detect_dat:

; 1159 : 
; 1160 :     /* There are no "black-listed" or "white-listed" bytes:
; 1161 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1162 :      */
; 1163 :     return Z_BINARY;

	xor	eax, eax
$LN1@detect_dat:

; 1164 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_detect_data_type ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _compress_block
_TEXT	SEGMENT
tv317 = -136						; size = 4
_val$1 = -68						; size = 4
_len$2 = -64						; size = 4
_val$3 = -60						; size = 4
_len$4 = -56						; size = 4
_val$5 = -52						; size = 4
_len$6 = -48						; size = 4
_val$7 = -44						; size = 4
_len$8 = -40						; size = 4
_val$9 = -36						; size = 4
_len$10 = -32						; size = 4
_val$11 = -28						; size = 4
_len$12 = -24						; size = 4
_extra$ = -20						; size = 4
_code$ = -16						; size = 4
_lx$ = -12						; size = 4
_lc$ = -8						; size = 4
_dist$ = -4						; size = 4
_s$ = 8							; size = 4
_ltree$ = 12						; size = 4
_dtree$ = 16						; size = 4
_compress_block PROC					; COMDAT

; 1080 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi

; 1081 :     unsigned dist;      /* distance of matched string */
; 1082 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1083 :     unsigned lx = 0;    /* running index in l_buf */

	mov	DWORD PTR _lx$[ebp], 0

; 1084 :     unsigned code;      /* the code to send */
; 1085 :     int extra;          /* number of extra bits to send */
; 1086 : 
; 1087 :     if (s->last_lit != 0) do {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5792], 0
	je	$LN5@compress_b
$LN4@compress_b:

; 1088 :         dist = s->d_buf[lx];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5796]
	mov	edx, DWORD PTR _lx$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _dist$[ebp], eax

; 1089 :         lc = s->l_buf[lx++];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5784]
	mov	edx, DWORD PTR _lx$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	DWORD PTR _lc$[ebp], eax
	mov	ecx, DWORD PTR _lx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _lx$[ebp], ecx

; 1090 :         if (dist == 0) {

	cmp	DWORD PTR _dist$[ebp], 0
	jne	$LN6@compress_b

; 1091 :             send_code(s, lc, ltree); /* send a literal byte */

	mov	eax, DWORD PTR _lc$[ebp]
	mov	ecx, DWORD PTR _ltree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2]
	mov	DWORD PTR _len$12[ebp], edx
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$12[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN8@compress_b
	mov	eax, DWORD PTR _lc$[ebp]
	mov	ecx, DWORD PTR _ltree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4]
	mov	DWORD PTR _val$11[ebp], edx
	movzx	eax, WORD PTR _val$11[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$11[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$12[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN9@compress_b
$LN8@compress_b:
	mov	eax, DWORD PTR _lc$[ebp]
	mov	ecx, DWORD PTR _ltree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$12[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN9@compress_b:

; 1092 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1093 :         } else {

	jmp	$LN2@compress_b
$LN6@compress_b:

; 1094 :             /* Here, lc is the match length - MIN_MATCH */
; 1095 :             code = _length_code[lc];

	mov	eax, DWORD PTR _lc$[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	DWORD PTR _code$[ebp], ecx

; 1096 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

	mov	eax, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _ltree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+1030]
	mov	DWORD PTR _len$10[ebp], edx
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$10[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN10@compress_b
	mov	eax, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _ltree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+1028]
	mov	DWORD PTR _val$9[ebp], edx
	movzx	eax, WORD PTR _val$9[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$9[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$10[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN11@compress_b
$LN10@compress_b:
	mov	eax, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _ltree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+1028]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$10[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN11@compress_b:

; 1097 :             extra = extra_lbits[code];

	mov	eax, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _extra_lbits[eax*4]
	mov	DWORD PTR _extra$[ebp], ecx

; 1098 :             if (extra != 0) {

	cmp	DWORD PTR _extra$[ebp], 0
	je	$LN12@compress_b

; 1099 :                 lc -= base_length[code];

	mov	eax, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _lc$[ebp]
	sub	ecx, DWORD PTR _base_length[eax*4]
	mov	DWORD PTR _lc$[ebp], ecx

; 1100 :                 send_bits(s, lc, extra);       /* send the extra length bits */

	mov	eax, DWORD PTR _extra$[ebp]
	mov	DWORD PTR _len$8[ebp], eax
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$8[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN13@compress_b
	mov	eax, DWORD PTR _lc$[ebp]
	mov	DWORD PTR _val$7[ebp], eax
	movzx	eax, WORD PTR _val$7[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$7[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$8[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN12@compress_b
$LN13@compress_b:
	movzx	eax, WORD PTR _lc$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$8[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN12@compress_b:

; 1101 :             }
; 1102 :             dist--; /* dist is now the match distance - 1 */

	mov	eax, DWORD PTR _dist$[ebp]
	sub	eax, 1
	mov	DWORD PTR _dist$[ebp], eax

; 1103 :             code = d_code(dist);

	cmp	DWORD PTR _dist$[ebp], 256		; 00000100H
	jae	SHORT $LN23@compress_b
	mov	eax, DWORD PTR _dist$[ebp]
	movzx	ecx, BYTE PTR __dist_code[eax]
	mov	DWORD PTR tv317[ebp], ecx
	jmp	SHORT $LN24@compress_b
$LN23@compress_b:
	mov	edx, DWORD PTR _dist$[ebp]
	shr	edx, 7
	movzx	eax, BYTE PTR __dist_code[edx+256]
	mov	DWORD PTR tv317[ebp], eax
$LN24@compress_b:
	mov	ecx, DWORD PTR tv317[ebp]
	mov	DWORD PTR _code$[ebp], ecx

; 1104 :             Assert (code < D_CODES, "bad d_code");
; 1105 : 
; 1106 :             send_code(s, code, dtree);       /* send the distance code */

	mov	eax, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _dtree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2]
	mov	DWORD PTR _len$6[ebp], edx
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$6[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN15@compress_b
	mov	eax, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _dtree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4]
	mov	DWORD PTR _val$5[ebp], edx
	movzx	eax, WORD PTR _val$5[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$5[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$6[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN16@compress_b
$LN15@compress_b:
	mov	eax, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _dtree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$6[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN16@compress_b:

; 1107 :             extra = extra_dbits[code];

	mov	eax, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _extra_dbits[eax*4]
	mov	DWORD PTR _extra$[ebp], ecx

; 1108 :             if (extra != 0) {

	cmp	DWORD PTR _extra$[ebp], 0
	je	$LN2@compress_b

; 1109 :                 dist -= base_dist[code];

	mov	eax, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _dist$[ebp]
	sub	ecx, DWORD PTR _base_dist[eax*4]
	mov	DWORD PTR _dist$[ebp], ecx

; 1110 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

	mov	eax, DWORD PTR _extra$[ebp]
	mov	DWORD PTR _len$4[ebp], eax
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$4[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN18@compress_b
	mov	eax, DWORD PTR _dist$[ebp]
	mov	DWORD PTR _val$3[ebp], eax
	movzx	eax, WORD PTR _val$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$4[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN2@compress_b
$LN18@compress_b:
	movzx	eax, WORD PTR _dist$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$4[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN2@compress_b:

; 1111 :             }
; 1112 :         } /* literal or match pair ? */
; 1113 : 
; 1114 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1115 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1116 :                "pendingBuf overflow");
; 1117 : 
; 1118 :     } while (lx < s->last_lit);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _lx$[ebp]
	cmp	ecx, DWORD PTR [eax+5792]
	jb	$LN4@compress_b
$LN5@compress_b:

; 1119 : 
; 1120 :     send_code(s, END_BLOCK, ltree);

	mov	eax, 4
	shl	eax, 8
	mov	ecx, DWORD PTR _ltree$[ebp]
	movzx	edx, WORD PTR [ecx+eax+2]
	mov	DWORD PTR _len$2[ebp], edx
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$2[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN20@compress_b
	mov	eax, 4
	shl	eax, 8
	mov	ecx, DWORD PTR _ltree$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _val$1[ebp], edx
	movzx	eax, WORD PTR _val$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$2[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN21@compress_b
$LN20@compress_b:
	mov	eax, 4
	shl	eax, 8
	mov	ecx, DWORD PTR _ltree$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN21@compress_b:

; 1121 :     s->last_eob_len = ltree[END_BLOCK].Len;

	mov	eax, 4
	shl	eax, 8
	mov	ecx, DWORD PTR _ltree$[ebp]
	movzx	edx, WORD PTR [ecx+eax+2]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5812], edx

; 1122 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_compress_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _send_all_trees
_TEXT	SEGMENT
_val$1 = -36						; size = 4
_len$2 = -32						; size = 4
_val$3 = -28						; size = 4
_len$4 = -24						; size = 4
_val$5 = -20						; size = 4
_len$6 = -16						; size = 4
_val$7 = -12						; size = 4
_len$8 = -8						; size = 4
_rank$ = -4						; size = 4
_s$ = 8							; size = 4
_lcodes$ = 12						; size = 4
_dcodes$ = 16						; size = 4
_blcodes$ = 20						; size = 4
_send_all_trees PROC					; COMDAT

; 845  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 846  :     int rank;                    /* index in bl_order */
; 847  : 
; 848  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 849  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 850  :             "too many codes");
; 851  :     Tracev((stderr, "\nbl counts: "));
; 852  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

	mov	DWORD PTR _len$8[ebp], 5
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$8[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN5@send_all_t
	mov	eax, DWORD PTR _lcodes$[ebp]
	sub	eax, 257				; 00000101H
	mov	DWORD PTR _val$7[ebp], eax
	movzx	eax, WORD PTR _val$7[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$7[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$8[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN6@send_all_t
$LN5@send_all_t:
	mov	eax, DWORD PTR _lcodes$[ebp]
	sub	eax, 257				; 00000101H
	movzx	edx, ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$8[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN6@send_all_t:

; 853  :     send_bits(s, dcodes-1,   5);

	mov	DWORD PTR _len$6[ebp], 5
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$6[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN7@send_all_t
	mov	eax, DWORD PTR _dcodes$[ebp]
	sub	eax, 1
	mov	DWORD PTR _val$5[ebp], eax
	movzx	eax, WORD PTR _val$5[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$5[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$6[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN8@send_all_t
$LN7@send_all_t:
	mov	eax, DWORD PTR _dcodes$[ebp]
	sub	eax, 1
	movzx	edx, ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$6[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN8@send_all_t:

; 854  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

	mov	DWORD PTR _len$4[ebp], 4
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$4[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN9@send_all_t
	mov	eax, DWORD PTR _blcodes$[ebp]
	sub	eax, 4
	mov	DWORD PTR _val$3[ebp], eax
	movzx	eax, WORD PTR _val$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$4[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN10@send_all_t
$LN9@send_all_t:
	mov	eax, DWORD PTR _blcodes$[ebp]
	sub	eax, 4
	movzx	edx, ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$4[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN10@send_all_t:

; 855  :     for (rank = 0; rank < blcodes; rank++) {

	mov	DWORD PTR _rank$[ebp], 0
	jmp	SHORT $LN4@send_all_t
$LN2@send_all_t:
	mov	eax, DWORD PTR _rank$[ebp]
	add	eax, 1
	mov	DWORD PTR _rank$[ebp], eax
$LN4@send_all_t:
	mov	eax, DWORD PTR _rank$[ebp]
	cmp	eax, DWORD PTR _blcodes$[ebp]
	jge	$LN3@send_all_t

; 856  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 857  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

	mov	DWORD PTR _len$2[ebp], 3
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$2[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN11@send_all_t
	mov	eax, DWORD PTR _rank$[ebp]
	movzx	ecx, BYTE PTR _bl_order[eax]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx*4+2686]
	mov	DWORD PTR _val$1[ebp], eax
	movzx	eax, WORD PTR _val$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$2[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN12@send_all_t
$LN11@send_all_t:
	mov	eax, DWORD PTR _rank$[ebp]
	movzx	ecx, BYTE PTR _bl_order[eax]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx*4+2686]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN12@send_all_t:

; 858  :     }

	jmp	$LN2@send_all_t
$LN3@send_all_t:

; 859  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 860  : 
; 861  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

	mov	eax, DWORD PTR _lcodes$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 148				; 00000094H
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_send_tree
	add	esp, 12					; 0000000cH

; 862  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 863  : 
; 864  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

	mov	eax, DWORD PTR _dcodes$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 2440				; 00000988H
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_send_tree
	add	esp, 12					; 0000000cH

; 865  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 866  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_send_all_trees ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _build_bl_tree
_TEXT	SEGMENT
_max_blindex$ = -4					; size = 4
_s$ = 8							; size = 4
_build_bl_tree PROC					; COMDAT

; 809  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 810  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 811  : 
; 812  :     /* Determine the bit length frequencies for literal and distance trees */
; 813  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+2844]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 148				; 00000094H
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_scan_tree
	add	esp, 12					; 0000000cH

; 814  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+2856]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2440				; 00000988H
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_scan_tree
	add	esp, 12					; 0000000cH

; 815  : 
; 816  :     /* Build the bit length tree: */
; 817  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2864				; 00000b30H
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_build_tree
	add	esp, 8

; 818  :     /* opt_len now includes the length of the tree representations, except
; 819  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 820  :      */
; 821  : 
; 822  :     /* Determine the number of bit length codes to send. The pkzip format
; 823  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 824  :      * 3 but the actual value used is 4.)
; 825  :      */
; 826  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

	mov	DWORD PTR _max_blindex$[ebp], 18	; 00000012H
	jmp	SHORT $LN4@build_bl_t
$LN2@build_bl_t:
	mov	eax, DWORD PTR _max_blindex$[ebp]
	sub	eax, 1
	mov	DWORD PTR _max_blindex$[ebp], eax
$LN4@build_bl_t:
	cmp	DWORD PTR _max_blindex$[ebp], 3
	jl	SHORT $LN3@build_bl_t

; 827  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

	mov	eax, DWORD PTR _max_blindex$[ebp]
	movzx	ecx, BYTE PTR _bl_order[eax]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx*4+2686]
	test	eax, eax
	je	SHORT $LN5@build_bl_t
	jmp	SHORT $LN3@build_bl_t
$LN5@build_bl_t:

; 828  :     }

	jmp	SHORT $LN2@build_bl_t
$LN3@build_bl_t:

; 829  :     /* Update opt_len to include the bit length tree and counts */
; 830  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

	mov	eax, DWORD PTR _max_blindex$[ebp]
	add	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5800]
	lea	ecx, DWORD PTR [ecx+eax+14]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5800], ecx

; 831  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 832  :             s->opt_len, s->static_len));
; 833  : 
; 834  :     return max_blindex;

	mov	eax, DWORD PTR _max_blindex$[ebp]

; 835  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_build_bl_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _send_tree
_TEXT	SEGMENT
_val$1 = -92						; size = 4
_len$2 = -88						; size = 4
_val$3 = -84						; size = 4
_len$4 = -80						; size = 4
_val$5 = -76						; size = 4
_len$6 = -72						; size = 4
_val$7 = -68						; size = 4
_len$8 = -64						; size = 4
_val$9 = -60						; size = 4
_len$10 = -56						; size = 4
_val$11 = -52						; size = 4
_len$12 = -48						; size = 4
_val$13 = -44						; size = 4
_len$14 = -40						; size = 4
_val$15 = -36						; size = 4
_len$16 = -32						; size = 4
_min_count$ = -28					; size = 4
_max_count$ = -24					; size = 4
_count$ = -20						; size = 4
_nextlen$ = -16						; size = 4
_curlen$ = -12						; size = 4
_prevlen$ = -8						; size = 4
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_tree$ = 12						; size = 4
_max_code$ = 16						; size = 4
_send_tree PROC						; COMDAT

; 760  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	ebx
	push	esi
	push	edi

; 761  :     int n;                     /* iterates over all tree elements */
; 762  :     int prevlen = -1;          /* last emitted length */

	mov	DWORD PTR _prevlen$[ebp], -1

; 763  :     int curlen;                /* length of current code */
; 764  :     int nextlen = tree[0].Len; /* length of next code */

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tree$[ebp]
	movzx	eax, WORD PTR [edx+ecx+2]
	mov	DWORD PTR _nextlen$[ebp], eax

; 765  :     int count = 0;             /* repeat count of the current code */

	mov	DWORD PTR _count$[ebp], 0

; 766  :     int max_count = 7;         /* max repeat count */

	mov	DWORD PTR _max_count$[ebp], 7

; 767  :     int min_count = 4;         /* min repeat count */

	mov	DWORD PTR _min_count$[ebp], 4

; 768  : 
; 769  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 770  :     if (nextlen == 0) max_count = 138, min_count = 3;

	cmp	DWORD PTR _nextlen$[ebp], 0
	jne	SHORT $LN8@send_tree
	mov	DWORD PTR _max_count$[ebp], 138		; 0000008aH
	mov	DWORD PTR _min_count$[ebp], 3
$LN8@send_tree:

; 771  : 
; 772  :     for (n = 0; n <= max_code; n++) {

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN4@send_tree
$LN2@send_tree:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN4@send_tree:
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _max_code$[ebp]
	jg	$LN1@send_tree

; 773  :         curlen = nextlen; nextlen = tree[n+1].Len;

	mov	eax, DWORD PTR _nextlen$[ebp]
	mov	DWORD PTR _curlen$[ebp], eax
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+6]
	mov	DWORD PTR _nextlen$[ebp], edx

; 774  :         if (++count < max_count && curlen == nextlen) {

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _count$[ebp]
	cmp	ecx, DWORD PTR _max_count$[ebp]
	jge	SHORT $LN9@send_tree
	mov	eax, DWORD PTR _curlen$[ebp]
	cmp	eax, DWORD PTR _nextlen$[ebp]
	jne	SHORT $LN9@send_tree

; 775  :             continue;

	jmp	SHORT $LN2@send_tree
	jmp	$LN10@send_tree
$LN9@send_tree:

; 776  :         } else if (count < min_count) {

	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _min_count$[ebp]
	jge	$LN11@send_tree
$LN7@send_tree:

; 777  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

	mov	eax, DWORD PTR _curlen$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2686]
	mov	DWORD PTR _len$16[ebp], edx
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$16[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN13@send_tree
	mov	eax, DWORD PTR _curlen$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2684]
	mov	DWORD PTR _val$15[ebp], edx
	movzx	eax, WORD PTR _val$15[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$15[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$16[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN5@send_tree
$LN13@send_tree:
	mov	eax, DWORD PTR _curlen$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2684]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$16[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN5@send_tree:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	jne	$LN7@send_tree

; 778  : 
; 779  :         } else if (curlen != 0) {

	jmp	$LN10@send_tree
$LN11@send_tree:
	cmp	DWORD PTR _curlen$[ebp], 0
	je	$LN15@send_tree

; 780  :             if (curlen != prevlen) {

	mov	eax, DWORD PTR _curlen$[ebp]
	cmp	eax, DWORD PTR _prevlen$[ebp]
	je	$LN17@send_tree

; 781  :                 send_code(s, curlen, s->bl_tree); count--;

	mov	eax, DWORD PTR _curlen$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2686]
	mov	DWORD PTR _len$14[ebp], edx
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$14[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN18@send_tree
	mov	eax, DWORD PTR _curlen$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2684]
	mov	DWORD PTR _val$13[ebp], edx
	movzx	eax, WORD PTR _val$13[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$13[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$14[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN19@send_tree
$LN18@send_tree:
	mov	eax, DWORD PTR _curlen$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2684]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$14[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN19@send_tree:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN17@send_tree:

; 782  :             }
; 783  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 784  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax+2686]
	mov	DWORD PTR _len$12[ebp], edx
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$12[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN20@send_tree
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax+2684]
	mov	DWORD PTR _val$11[ebp], edx
	movzx	eax, WORD PTR _val$11[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$11[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$12[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN21@send_tree
$LN20@send_tree:
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax+2684]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$12[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN21@send_tree:
	mov	DWORD PTR _len$10[ebp], 2
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$10[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN22@send_tree
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 3
	mov	DWORD PTR _val$9[ebp], eax
	movzx	eax, WORD PTR _val$9[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$9[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$10[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN23@send_tree
$LN22@send_tree:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 3
	movzx	edx, ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$10[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN23@send_tree:
	jmp	$LN10@send_tree
$LN15@send_tree:

; 785  : 
; 786  :         } else if (count <= 10) {

	cmp	DWORD PTR _count$[ebp], 10		; 0000000aH
	jg	$LN24@send_tree

; 787  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx+2686]
	mov	DWORD PTR _len$8[ebp], eax
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$8[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN26@send_tree
	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx+2684]
	mov	DWORD PTR _val$7[ebp], eax
	movzx	eax, WORD PTR _val$7[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$7[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$8[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN27@send_tree
$LN26@send_tree:
	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx+2684]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$8[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN27@send_tree:
	mov	DWORD PTR _len$6[ebp], 3
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$6[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN28@send_tree
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 3
	mov	DWORD PTR _val$5[ebp], eax
	movzx	eax, WORD PTR _val$5[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$5[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$6[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN29@send_tree
$LN28@send_tree:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 3
	movzx	edx, ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$6[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN29@send_tree:

; 788  : 
; 789  :         } else {

	jmp	$LN10@send_tree
$LN24@send_tree:

; 790  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx+2686]
	mov	DWORD PTR _len$4[ebp], eax
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$4[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN30@send_tree
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx+2684]
	mov	DWORD PTR _val$3[ebp], eax
	movzx	eax, WORD PTR _val$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$4[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN31@send_tree
$LN30@send_tree:
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx+2684]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$4[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN31@send_tree:
	mov	DWORD PTR _len$2[ebp], 7
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$2[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN32@send_tree
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 11					; 0000000bH
	mov	DWORD PTR _val$1[ebp], eax
	movzx	eax, WORD PTR _val$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$2[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN10@send_tree
$LN32@send_tree:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 11					; 0000000bH
	movzx	edx, ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN10@send_tree:

; 791  :         }
; 792  :         count = 0; prevlen = curlen;

	mov	DWORD PTR _count$[ebp], 0
	mov	eax, DWORD PTR _curlen$[ebp]
	mov	DWORD PTR _prevlen$[ebp], eax

; 793  :         if (nextlen == 0) {

	cmp	DWORD PTR _nextlen$[ebp], 0
	jne	SHORT $LN34@send_tree

; 794  :             max_count = 138, min_count = 3;

	mov	DWORD PTR _max_count$[ebp], 138		; 0000008aH
	mov	DWORD PTR _min_count$[ebp], 3
	jmp	SHORT $LN35@send_tree
$LN34@send_tree:

; 795  :         } else if (curlen == nextlen) {

	mov	eax, DWORD PTR _curlen$[ebp]
	cmp	eax, DWORD PTR _nextlen$[ebp]
	jne	SHORT $LN36@send_tree

; 796  :             max_count = 6, min_count = 3;

	mov	DWORD PTR _max_count$[ebp], 6
	mov	DWORD PTR _min_count$[ebp], 3

; 797  :         } else {

	jmp	SHORT $LN35@send_tree
$LN36@send_tree:

; 798  :             max_count = 7, min_count = 4;

	mov	DWORD PTR _max_count$[ebp], 7
	mov	DWORD PTR _min_count$[ebp], 4
$LN35@send_tree:

; 799  :         }
; 800  :     }

	jmp	$LN2@send_tree
$LN1@send_tree:

; 801  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_send_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _scan_tree
_TEXT	SEGMENT
_min_count$ = -28					; size = 4
_max_count$ = -24					; size = 4
_count$ = -20						; size = 4
_nextlen$ = -16						; size = 4
_curlen$ = -12						; size = 4
_prevlen$ = -8						; size = 4
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_tree$ = 12						; size = 4
_max_code$ = 16						; size = 4
_scan_tree PROC						; COMDAT

; 715  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 716  :     int n;                     /* iterates over all tree elements */
; 717  :     int prevlen = -1;          /* last emitted length */

	mov	DWORD PTR _prevlen$[ebp], -1

; 718  :     int curlen;                /* length of current code */
; 719  :     int nextlen = tree[0].Len; /* length of next code */

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tree$[ebp]
	movzx	eax, WORD PTR [edx+ecx+2]
	mov	DWORD PTR _nextlen$[ebp], eax

; 720  :     int count = 0;             /* repeat count of the current code */

	mov	DWORD PTR _count$[ebp], 0

; 721  :     int max_count = 7;         /* max repeat count */

	mov	DWORD PTR _max_count$[ebp], 7

; 722  :     int min_count = 4;         /* min repeat count */

	mov	DWORD PTR _min_count$[ebp], 4

; 723  : 
; 724  :     if (nextlen == 0) max_count = 138, min_count = 3;

	cmp	DWORD PTR _nextlen$[ebp], 0
	jne	SHORT $LN5@scan_tree
	mov	DWORD PTR _max_count$[ebp], 138		; 0000008aH
	mov	DWORD PTR _min_count$[ebp], 3
$LN5@scan_tree:

; 725  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _max_code$[ebp]
	mov	edx, DWORD PTR _tree$[ebp]
	mov	WORD PTR [edx+ecx*4+6], ax

; 726  : 
; 727  :     for (n = 0; n <= max_code; n++) {

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN4@scan_tree
$LN2@scan_tree:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN4@scan_tree:
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _max_code$[ebp]
	jg	$LN1@scan_tree

; 728  :         curlen = nextlen; nextlen = tree[n+1].Len;

	mov	eax, DWORD PTR _nextlen$[ebp]
	mov	DWORD PTR _curlen$[ebp], eax
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+6]
	mov	DWORD PTR _nextlen$[ebp], edx

; 729  :         if (++count < max_count && curlen == nextlen) {

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _count$[ebp]
	cmp	ecx, DWORD PTR _max_count$[ebp]
	jge	SHORT $LN6@scan_tree
	mov	eax, DWORD PTR _curlen$[ebp]
	cmp	eax, DWORD PTR _nextlen$[ebp]
	jne	SHORT $LN6@scan_tree

; 730  :             continue;

	jmp	SHORT $LN2@scan_tree
	jmp	$LN7@scan_tree
$LN6@scan_tree:

; 731  :         } else if (count < min_count) {

	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _min_count$[ebp]
	jge	SHORT $LN8@scan_tree

; 732  :             s->bl_tree[curlen].Freq += count;

	mov	eax, DWORD PTR _curlen$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2684]
	add	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _curlen$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+2684], dx
	jmp	$LN7@scan_tree
$LN8@scan_tree:

; 733  :         } else if (curlen != 0) {

	cmp	DWORD PTR _curlen$[ebp], 0
	je	SHORT $LN10@scan_tree

; 734  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

	mov	eax, DWORD PTR _curlen$[ebp]
	cmp	eax, DWORD PTR _prevlen$[ebp]
	je	SHORT $LN12@scan_tree
	mov	eax, DWORD PTR _curlen$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+2684]
	add	dx, 1
	mov	eax, DWORD PTR _curlen$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+2684], dx
$LN12@scan_tree:

; 735  :             s->bl_tree[REP_3_6].Freq++;

	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax+2684]
	add	dx, 1
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax+2684], dx
	jmp	SHORT $LN7@scan_tree
$LN10@scan_tree:

; 736  :         } else if (count <= 10) {

	cmp	DWORD PTR _count$[ebp], 10		; 0000000aH
	jg	SHORT $LN13@scan_tree

; 737  :             s->bl_tree[REPZ_3_10].Freq++;

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx+2684]
	add	ax, 1
	mov	ecx, 4
	imul	edx, ecx, 17
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx+2684], ax

; 738  :         } else {

	jmp	SHORT $LN7@scan_tree
$LN13@scan_tree:

; 739  :             s->bl_tree[REPZ_11_138].Freq++;

	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx+2684]
	add	ax, 1
	mov	ecx, 4
	imul	edx, ecx, 18
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx+2684], ax
$LN7@scan_tree:

; 740  :         }
; 741  :         count = 0; prevlen = curlen;

	mov	DWORD PTR _count$[ebp], 0
	mov	eax, DWORD PTR _curlen$[ebp]
	mov	DWORD PTR _prevlen$[ebp], eax

; 742  :         if (nextlen == 0) {

	cmp	DWORD PTR _nextlen$[ebp], 0
	jne	SHORT $LN15@scan_tree

; 743  :             max_count = 138, min_count = 3;

	mov	DWORD PTR _max_count$[ebp], 138		; 0000008aH
	mov	DWORD PTR _min_count$[ebp], 3
	jmp	SHORT $LN16@scan_tree
$LN15@scan_tree:

; 744  :         } else if (curlen == nextlen) {

	mov	eax, DWORD PTR _curlen$[ebp]
	cmp	eax, DWORD PTR _nextlen$[ebp]
	jne	SHORT $LN17@scan_tree

; 745  :             max_count = 6, min_count = 3;

	mov	DWORD PTR _max_count$[ebp], 6
	mov	DWORD PTR _min_count$[ebp], 3

; 746  :         } else {

	jmp	SHORT $LN16@scan_tree
$LN17@scan_tree:

; 747  :             max_count = 7, min_count = 4;

	mov	DWORD PTR _max_count$[ebp], 7
	mov	DWORD PTR _min_count$[ebp], 4
$LN16@scan_tree:

; 748  :         }
; 749  :     }

	jmp	$LN2@scan_tree
$LN1@scan_tree:

; 750  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_scan_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _build_tree
_TEXT	SEGMENT
tv95 = -100						; size = 4
tv244 = -96						; size = 4
tv223 = -96						; size = 4
tv187 = -96						; size = 4
tv181 = -96						; size = 4
tv132 = -96						; size = 4
tv81 = -96						; size = 4
_node$ = -28						; size = 4
_max_code$ = -24					; size = 4
_m$ = -20						; size = 4
_n$ = -16						; size = 4
_elems$ = -12						; size = 4
_stree$ = -8						; size = 4
_tree$ = -4						; size = 4
_s$ = 8							; size = 4
_desc$ = 12						; size = 4
_build_tree PROC					; COMDAT

; 626  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 627  :     ct_data *tree         = desc->dyn_tree;

	mov	eax, DWORD PTR _desc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tree$[ebp], ecx

; 628  :     const ct_data *stree  = desc->stat_desc->static_tree;

	mov	eax, DWORD PTR _desc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _stree$[ebp], edx

; 629  :     int elems             = desc->stat_desc->elems;

	mov	eax, DWORD PTR _desc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _elems$[ebp], edx

; 630  :     int n, m;          /* iterate over heap elements */
; 631  :     int max_code = -1; /* largest code with non zero frequency */

	mov	DWORD PTR _max_code$[ebp], -1

; 632  :     int node;          /* new node being created */
; 633  : 
; 634  :     /* Construct the initial heap, with least frequent element in
; 635  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 636  :      * heap[0] is not used.
; 637  :      */
; 638  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5200], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5204], 573		; 0000023dH

; 639  : 
; 640  :     for (n = 0; n < elems; n++) {

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN4@build_tree
$LN2@build_tree:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN4@build_tree:
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _elems$[ebp]
	jge	SHORT $LN5@build_tree

; 641  :         if (tree[n].Freq != 0) {

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4]
	test	edx, edx
	je	SHORT $LN13@build_tree

; 642  :             s->heap[++(s->heap_len)] = max_code = n;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _max_code$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+5200]
	add	edx, 1
	mov	DWORD PTR tv81[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR tv81[ebp]
	mov	DWORD PTR [eax+5200], ecx
	mov	edx, DWORD PTR tv81[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _max_code$[ebp]
	mov	DWORD PTR [eax+edx*4+2908], ecx

; 643  :             s->depth[n] = 0;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	BYTE PTR [eax+5208], 0

; 644  :         } else {

	jmp	SHORT $LN14@build_tree
$LN13@build_tree:

; 645  :             tree[n].Len = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _tree$[ebp]
	mov	WORD PTR [edx+ecx*4+2], ax
$LN14@build_tree:

; 646  :         }
; 647  :     }

	jmp	SHORT $LN2@build_tree
$LN5@build_tree:

; 648  : 
; 649  :     /* The pkzip format requires that at least one distance code exists,
; 650  :      * and that at least one bit should be sent even if there is only one
; 651  :      * possible code. So to avoid special checks later on we force at least
; 652  :      * two codes of non zero frequency.
; 653  :      */
; 654  :     while (s->heap_len < 2) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5200], 2
	jge	$LN6@build_tree

; 655  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

	cmp	DWORD PTR _max_code$[ebp], 2
	jge	SHORT $LN17@build_tree
	mov	eax, DWORD PTR _max_code$[ebp]
	add	eax, 1
	mov	DWORD PTR _max_code$[ebp], eax
	mov	ecx, DWORD PTR _max_code$[ebp]
	mov	DWORD PTR tv132[ebp], ecx
	jmp	SHORT $LN18@build_tree
$LN17@build_tree:
	mov	DWORD PTR tv132[ebp], 0
$LN18@build_tree:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5200]
	add	eax, 1
	mov	DWORD PTR tv95[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR [ecx+5200], edx
	mov	eax, DWORD PTR tv95[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR tv132[ebp]
	mov	DWORD PTR [ecx+eax*4+2908], edx
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 656  :         tree[node].Freq = 1;

	mov	eax, 1
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR _tree$[ebp]
	mov	WORD PTR [edx+ecx*4], ax

; 657  :         s->depth[node] = 0;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _node$[ebp]
	mov	BYTE PTR [eax+5208], 0

; 658  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5800]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5800], ecx
	cmp	DWORD PTR _stree$[ebp], 0
	je	SHORT $LN15@build_tree
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _stree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5804]
	sub	ecx, edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5804], ecx
$LN15@build_tree:

; 659  :         /* node is 0 or 1 so it does not have extra bits */
; 660  :     }

	jmp	$LN5@build_tree
$LN6@build_tree:

; 661  :     desc->max_code = max_code;

	mov	eax, DWORD PTR _desc$[ebp]
	mov	ecx, DWORD PTR _max_code$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 662  : 
; 663  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 664  :      * establish sub-heaps of increasing lengths:
; 665  :      */
; 666  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+5200]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	jmp	SHORT $LN9@build_tree
$LN7@build_tree:
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN9@build_tree:
	cmp	DWORD PTR _n$[ebp], 1
	jl	SHORT $LN8@build_tree
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_pqdownheap
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN7@build_tree
$LN8@build_tree:

; 667  : 
; 668  :     /* Construct the Huffman tree by repeatedly combining the least two
; 669  :      * frequent nodes.
; 670  :      */
; 671  :     node = elems;              /* next internal node of the tree */

	mov	eax, DWORD PTR _elems$[ebp]
	mov	DWORD PTR _node$[ebp], eax
$LN12@build_tree:

; 672  :     do {
; 673  :         pqremove(s, tree, n);  /* n = node of least frequency */

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax+2908]
	mov	DWORD PTR _n$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5200]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4+2908]
	mov	DWORD PTR [eax+edx+2908], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5200]
	sub	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5200], eax
	push	1
	mov	eax, DWORD PTR _tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_pqdownheap
	add	esp, 12					; 0000000cH

; 674  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax+2908]
	mov	DWORD PTR _m$[ebp], edx

; 675  : 
; 676  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5204]
	sub	ecx, 1
	mov	DWORD PTR tv181[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv181[ebp]
	mov	DWORD PTR [edx+5204], eax
	mov	ecx, DWORD PTR tv181[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+ecx*4+2908], eax

; 677  :         s->heap[--(s->heap_max)] = m;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5204]
	sub	ecx, 1
	mov	DWORD PTR tv187[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv187[ebp]
	mov	DWORD PTR [edx+5204], eax
	mov	ecx, DWORD PTR tv187[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx+ecx*4+2908], eax

; 678  : 
; 679  :         /* Create a new node father of n and m */
; 680  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	movzx	eax, WORD PTR [ecx+eax*4]
	add	edx, eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _tree$[ebp]
	mov	WORD PTR [eax+ecx*4], dx

; 681  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	movzx	ecx, BYTE PTR [eax+5208]
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR _m$[ebp]
	movzx	eax, BYTE PTR [edx+5208]
	cmp	ecx, eax
	jl	SHORT $LN19@build_tree
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	movzx	edx, BYTE PTR [ecx+5208]
	mov	DWORD PTR tv223[ebp], edx
	jmp	SHORT $LN20@build_tree
$LN19@build_tree:
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _m$[ebp]
	movzx	ecx, BYTE PTR [eax+5208]
	mov	DWORD PTR tv223[ebp], ecx
$LN20@build_tree:
	mov	edx, DWORD PTR tv223[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _node$[ebp]
	mov	BYTE PTR [eax+5208], dl

; 682  :                                 s->depth[n] : s->depth[m]) + 1);
; 683  :         tree[n].Dad = tree[m].Dad = (ush)node;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	mov	dx, WORD PTR _node$[ebp]
	mov	WORD PTR [ecx+eax*4+2], dx
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	mov	dx, WORD PTR _node$[ebp]
	mov	WORD PTR [ecx+eax*4+2], dx

; 684  : #ifdef DUMP_BL_TREE
; 685  :         if (tree == s->bl_tree) {
; 686  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 687  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 688  :         }
; 689  : #endif
; 690  :         /* and insert the new node in the heap */
; 691  :         s->heap[SMALLEST] = node++;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+eax+2908], edx
	mov	eax, DWORD PTR _node$[ebp]
	add	eax, 1
	mov	DWORD PTR _node$[ebp], eax

; 692  :         pqdownheap(s, tree, SMALLEST);

	push	1
	mov	eax, DWORD PTR _tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_pqdownheap
	add	esp, 12					; 0000000cH

; 693  : 
; 694  :     } while (s->heap_len >= 2);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+5200], 2
	jge	$LN12@build_tree

; 695  : 
; 696  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5204]
	sub	ecx, 1
	mov	DWORD PTR tv244[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv244[ebp]
	mov	DWORD PTR [edx+5204], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR tv244[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [esi+ecx+2908]
	mov	DWORD PTR [eax+edx*4+2908], ecx

; 697  : 
; 698  :     /* At this point, the fields freq and dad are set. We can now
; 699  :      * generate the bit lengths.
; 700  :      */
; 701  :     gen_bitlen(s, (tree_desc *)desc);

	mov	eax, DWORD PTR _desc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_gen_bitlen
	add	esp, 8

; 702  : 
; 703  :     /* The field len is now set, we can generate the bit codes */
; 704  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2876				; 00000b3cH
	push	eax
	mov	ecx, DWORD PTR _max_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tree$[ebp]
	push	edx
	call	_gen_codes
	add	esp, 12					; 0000000cH

; 705  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_build_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _gen_codes
_TEXT	SEGMENT
tv128 = -116						; size = 4
_len$1 = -48						; size = 4
_n$ = -44						; size = 4
_bits$ = -40						; size = 4
_code$ = -36						; size = 2
_next_code$ = -32					; size = 32
_tree$ = 8						; size = 4
_max_code$ = 12						; size = 4
_bl_count$ = 16						; size = 4
_gen_codes PROC						; COMDAT

; 585  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi

; 586  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 587  :     ush code = 0;              /* running code value */

	xor	eax, eax
	mov	WORD PTR _code$[ebp], ax

; 588  :     int bits;                  /* bit index */
; 589  :     int n;                     /* code index */
; 590  : 
; 591  :     /* The distribution counts are first used to generate the code values
; 592  :      * without bit reversal.
; 593  :      */
; 594  :     for (bits = 1; bits <= MAX_BITS; bits++) {

	mov	DWORD PTR _bits$[ebp], 1
	jmp	SHORT $LN4@gen_codes
$LN2@gen_codes:
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 1
	mov	DWORD PTR _bits$[ebp], eax
$LN4@gen_codes:
	cmp	DWORD PTR _bits$[ebp], 15		; 0000000fH
	jg	SHORT $LN3@gen_codes

; 595  :         next_code[bits] = code = (code + bl_count[bits-1]) << 1;

	movzx	eax, WORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	mov	edx, DWORD PTR _bl_count$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2-2]
	add	eax, ecx
	shl	eax, 1
	mov	WORD PTR _code$[ebp], ax
	mov	edx, DWORD PTR _bits$[ebp]
	mov	ax, WORD PTR _code$[ebp]
	mov	WORD PTR _next_code$[ebp+edx*2], ax

; 596  :     }

	jmp	SHORT $LN2@gen_codes
$LN3@gen_codes:

; 597  :     /* Check that the bit counts in bl_count are consistent. The last code
; 598  :      * must be all ones.
; 599  :      */
; 600  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 601  :             "inconsistent bit counts");
; 602  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 603  : 
; 604  :     for (n = 0;  n <= max_code; n++) {

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN7@gen_codes
$LN5@gen_codes:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN7@gen_codes:
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _max_code$[ebp]
	jg	SHORT $LN1@gen_codes

; 605  :         int len = tree[n].Len;

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2]
	mov	DWORD PTR _len$1[ebp], edx

; 606  :         if (len == 0) continue;

	cmp	DWORD PTR _len$1[ebp], 0
	jne	SHORT $LN8@gen_codes
	jmp	SHORT $LN5@gen_codes
$LN8@gen_codes:

; 607  :         /* Now reverse the bits */
; 608  :         tree[n].Code = bi_reverse(next_code[len]++, len);

	mov	eax, DWORD PTR _len$1[ebp]
	movzx	ecx, WORD PTR _next_code$[ebp+eax*2]
	mov	DWORD PTR tv128[ebp], ecx
	mov	edx, DWORD PTR _len$1[ebp]
	mov	ax, WORD PTR _next_code$[ebp+edx*2]
	add	ax, 1
	mov	ecx, DWORD PTR _len$1[ebp]
	mov	WORD PTR _next_code$[ebp+ecx*2], ax
	mov	edx, DWORD PTR _len$1[ebp]
	push	edx
	mov	eax, DWORD PTR tv128[ebp]
	push	eax
	call	_bi_reverse
	add	esp, 8
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _tree$[ebp]
	mov	WORD PTR [edx+ecx*4], ax

; 609  : 
; 610  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 611  :              n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
; 612  :     }

	jmp	SHORT $LN5@gen_codes
$LN1@gen_codes:

; 613  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_gen_codes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _gen_bitlen
_TEXT	SEGMENT
_overflow$ = -52					; size = 4
_f$ = -48						; size = 2
_xbits$ = -44						; size = 4
_bits$ = -40						; size = 4
_m$ = -36						; size = 4
_n$ = -32						; size = 4
_h$ = -28						; size = 4
_max_length$ = -24					; size = 4
_base$ = -20						; size = 4
_extra$ = -16						; size = 4
_stree$ = -12						; size = 4
_max_code$ = -8						; size = 4
_tree$ = -4						; size = 4
_s$ = 8							; size = 4
_desc$ = 12						; size = 4
_gen_bitlen PROC					; COMDAT

; 497  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi

; 498  :     ct_data *tree        = desc->dyn_tree;

	mov	eax, DWORD PTR _desc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tree$[ebp], ecx

; 499  :     int max_code         = desc->max_code;

	mov	eax, DWORD PTR _desc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _max_code$[ebp], ecx

; 500  :     const ct_data *stree = desc->stat_desc->static_tree;

	mov	eax, DWORD PTR _desc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _stree$[ebp], edx

; 501  :     const intf *extra    = desc->stat_desc->extra_bits;

	mov	eax, DWORD PTR _desc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _extra$[ebp], edx

; 502  :     int base             = desc->stat_desc->extra_base;

	mov	eax, DWORD PTR _desc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _base$[ebp], edx

; 503  :     int max_length       = desc->stat_desc->max_length;

	mov	eax, DWORD PTR _desc$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _max_length$[ebp], edx

; 504  :     int h;              /* heap index */
; 505  :     int n, m;           /* iterate over the tree elements */
; 506  :     int bits;           /* bit length */
; 507  :     int xbits;          /* extra bits */
; 508  :     ush f;              /* frequency */
; 509  :     int overflow = 0;   /* number of elements with bit length too large */

	mov	DWORD PTR _overflow$[ebp], 0

; 510  : 
; 511  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

	mov	DWORD PTR _bits$[ebp], 0
	jmp	SHORT $LN4@gen_bitlen
$LN2@gen_bitlen:
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 1
	mov	DWORD PTR _bits$[ebp], eax
$LN4@gen_bitlen:
	cmp	DWORD PTR _bits$[ebp], 15		; 0000000fH
	jg	SHORT $LN3@gen_bitlen
	xor	eax, eax
	mov	ecx, DWORD PTR _bits$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*2+2876], ax
	jmp	SHORT $LN2@gen_bitlen
$LN3@gen_bitlen:

; 512  : 
; 513  :     /* In a first pass, compute the optimal bit lengths (which may
; 514  :      * overflow in the case of the bit length tree).
; 515  :      */
; 516  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5204]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+2908]
	xor	ecx, ecx
	mov	edx, DWORD PTR _tree$[ebp]
	mov	WORD PTR [edx+eax*4+2], cx

; 517  : 
; 518  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5204]
	add	ecx, 1
	mov	DWORD PTR _h$[ebp], ecx
	jmp	SHORT $LN7@gen_bitlen
$LN5@gen_bitlen:
	mov	eax, DWORD PTR _h$[ebp]
	add	eax, 1
	mov	DWORD PTR _h$[ebp], eax
$LN7@gen_bitlen:
	cmp	DWORD PTR _h$[ebp], 573			; 0000023dH
	jge	$LN6@gen_bitlen

; 519  :         n = s->heap[h];

	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+2908]
	mov	DWORD PTR _n$[ebp], edx

; 520  :         bits = tree[tree[n].Dad].Len + 1;

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2]
	mov	eax, DWORD PTR _tree$[ebp]
	movzx	ecx, WORD PTR [eax+edx*4+2]
	add	ecx, 1
	mov	DWORD PTR _bits$[ebp], ecx

; 521  :         if (bits > max_length) bits = max_length, overflow++;

	mov	eax, DWORD PTR _bits$[ebp]
	cmp	eax, DWORD PTR _max_length$[ebp]
	jle	SHORT $LN18@gen_bitlen
	mov	eax, DWORD PTR _max_length$[ebp]
	mov	DWORD PTR _bits$[ebp], eax
	mov	ecx, DWORD PTR _overflow$[ebp]
	add	ecx, 1
	mov	DWORD PTR _overflow$[ebp], ecx
$LN18@gen_bitlen:

; 522  :         tree[n].Len = (ush)bits;

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	mov	dx, WORD PTR _bits$[ebp]
	mov	WORD PTR [ecx+eax*4+2], dx

; 523  :         /* We overwrite tree[n].Dad which is no longer needed */
; 524  : 
; 525  :         if (n > max_code) continue; /* not a leaf node */

	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _max_code$[ebp]
	jle	SHORT $LN19@gen_bitlen
	jmp	SHORT $LN5@gen_bitlen
$LN19@gen_bitlen:

; 526  : 
; 527  :         s->bl_count[bits]++;

	mov	eax, DWORD PTR _bits$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*2+2876]
	add	dx, 1
	mov	eax, DWORD PTR _bits$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*2+2876], dx

; 528  :         xbits = 0;

	mov	DWORD PTR _xbits$[ebp], 0

; 529  :         if (n >= base) xbits = extra[n-base];

	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _base$[ebp]
	jl	SHORT $LN20@gen_bitlen
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _extra$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xbits$[ebp], edx
$LN20@gen_bitlen:

; 530  :         f = tree[n].Freq;

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	mov	dx, WORD PTR [ecx+eax*4]
	mov	WORD PTR _f$[ebp], dx

; 531  :         s->opt_len += (ulg)f * (bits + xbits);

	movzx	eax, WORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, DWORD PTR _xbits$[ebp]
	imul	eax, ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+5800]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5800], eax

; 532  :         if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);

	cmp	DWORD PTR _stree$[ebp], 0
	je	SHORT $LN21@gen_bitlen
	movzx	eax, WORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _stree$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*4+2]
	add	ecx, DWORD PTR _xbits$[ebp]
	imul	eax, ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+5804]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5804], eax
$LN21@gen_bitlen:

; 533  :     }

	jmp	$LN5@gen_bitlen
$LN6@gen_bitlen:

; 534  :     if (overflow == 0) return;

	cmp	DWORD PTR _overflow$[ebp], 0
	jne	SHORT $LN10@gen_bitlen
	jmp	$LN1@gen_bitlen
$LN10@gen_bitlen:

; 535  : 
; 536  :     Trace((stderr,"\nbit length overflow\n"));
; 537  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 538  : 
; 539  :     /* Find the first bit length which could increase: */
; 540  :     do {
; 541  :         bits = max_length-1;

	mov	eax, DWORD PTR _max_length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _bits$[ebp], eax
$LN11@gen_bitlen:

; 542  :         while (s->bl_count[bits] == 0) bits--;

	mov	eax, DWORD PTR _bits$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2876]
	test	edx, edx
	jne	SHORT $LN12@gen_bitlen
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 1
	mov	DWORD PTR _bits$[ebp], eax
	jmp	SHORT $LN11@gen_bitlen
$LN12@gen_bitlen:

; 543  :         s->bl_count[bits]--;      /* move one leaf down the tree */

	mov	eax, DWORD PTR _bits$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*2+2876]
	sub	dx, 1
	mov	eax, DWORD PTR _bits$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*2+2876], dx

; 544  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */

	mov	eax, DWORD PTR _bits$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2878]
	add	edx, 2
	mov	eax, DWORD PTR _bits$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*2+2878], dx

; 545  :         s->bl_count[max_length]--;

	mov	eax, DWORD PTR _max_length$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*2+2876]
	sub	dx, 1
	mov	eax, DWORD PTR _max_length$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*2+2876], dx

; 546  :         /* The brother of the overflow item also moves one step up,
; 547  :          * but this does not affect bl_count[max_length]
; 548  :          */
; 549  :         overflow -= 2;

	mov	eax, DWORD PTR _overflow$[ebp]
	sub	eax, 2
	mov	DWORD PTR _overflow$[ebp], eax

; 550  :     } while (overflow > 0);

	cmp	DWORD PTR _overflow$[ebp], 0
	jg	$LN10@gen_bitlen

; 551  : 
; 552  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 553  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 554  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 555  :      * from 'ar' written by Haruhiko Okumura.)
; 556  :      */
; 557  :     for (bits = max_length; bits != 0; bits--) {

	mov	eax, DWORD PTR _max_length$[ebp]
	mov	DWORD PTR _bits$[ebp], eax
	jmp	SHORT $LN15@gen_bitlen
$LN13@gen_bitlen:
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 1
	mov	DWORD PTR _bits$[ebp], eax
$LN15@gen_bitlen:
	cmp	DWORD PTR _bits$[ebp], 0
	je	$LN1@gen_bitlen

; 558  :         n = s->bl_count[bits];

	mov	eax, DWORD PTR _bits$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2876]
	mov	DWORD PTR _n$[ebp], edx
$LN16@gen_bitlen:

; 559  :         while (n != 0) {

	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN17@gen_bitlen

; 560  :             m = s->heap[--h];

	mov	eax, DWORD PTR _h$[ebp]
	sub	eax, 1
	mov	DWORD PTR _h$[ebp], eax
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+2908]
	mov	DWORD PTR _m$[ebp], eax

; 561  :             if (m > max_code) continue;

	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _max_code$[ebp]
	jle	SHORT $LN23@gen_bitlen
	jmp	SHORT $LN16@gen_bitlen
$LN23@gen_bitlen:

; 562  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2]
	cmp	edx, DWORD PTR _bits$[ebp]
	je	SHORT $LN24@gen_bitlen

; 563  :                 Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 564  :                 s->opt_len += ((long)bits - (long)tree[m].Len)

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+2]
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, edx
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _tree$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*4]
	imul	eax, ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+5800]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5800], eax

; 565  :                               *(long)tree[m].Freq;
; 566  :                 tree[m].Len = (ush)bits;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	mov	dx, WORD PTR _bits$[ebp]
	mov	WORD PTR [ecx+eax*4+2], dx
$LN24@gen_bitlen:

; 567  :             }
; 568  :             n--;

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax

; 569  :         }

	jmp	$LN16@gen_bitlen
$LN17@gen_bitlen:

; 570  :     }

	jmp	$LN13@gen_bitlen
$LN1@gen_bitlen:

; 571  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_gen_bitlen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _pqdownheap
_TEXT	SEGMENT
_j$ = -8						; size = 4
_v$ = -4						; size = 4
_s$ = 8							; size = 4
_tree$ = 12						; size = 4
_k$ = 16						; size = 4
_pqdownheap PROC					; COMDAT

; 463  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 464  :     int v = s->heap[k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+2908]
	mov	DWORD PTR _v$[ebp], edx

; 465  :     int j = k << 1;  /* left son of k */

	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN2@pqdownheap:

; 466  :     while (j <= s->heap_len) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+5200]
	jg	$LN3@pqdownheap

; 467  :         /* Set j to the smallest of the two sons: */
; 468  :         if (j < s->heap_len &&

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+5200]
	jge	$LN4@pqdownheap
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+2912]
	mov	eax, DWORD PTR _tree$[ebp]
	movzx	ecx, WORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+2908]
	mov	eax, DWORD PTR _tree$[ebp]
	movzx	edx, WORD PTR [eax+edx*4]
	cmp	ecx, edx
	jl	SHORT $LN5@pqdownheap
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+2912]
	mov	eax, DWORD PTR _tree$[ebp]
	movzx	ecx, WORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+2908]
	mov	eax, DWORD PTR _tree$[ebp]
	movzx	edx, WORD PTR [eax+edx*4]
	cmp	ecx, edx
	jne	SHORT $LN4@pqdownheap
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+2912]
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+5208]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+2908]
	mov	eax, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [eax+edx+5208]
	cmp	ecx, edx
	jg	SHORT $LN4@pqdownheap
$LN5@pqdownheap:

; 469  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
; 470  :             j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@pqdownheap:

; 471  :         }
; 472  :         /* Exit if v is smaller than both sons */
; 473  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+2908]
	mov	ecx, DWORD PTR _tree$[ebp]
	movzx	eax, WORD PTR [ecx+eax*4]
	cmp	edx, eax
	jl	SHORT $LN7@pqdownheap
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+2908]
	mov	ecx, DWORD PTR _tree$[ebp]
	movzx	eax, WORD PTR [ecx+eax*4]
	cmp	edx, eax
	jne	SHORT $LN6@pqdownheap
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _v$[ebp]
	movzx	ecx, BYTE PTR [eax+5208]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+2908]
	mov	eax, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [eax+edx+5208]
	cmp	ecx, edx
	jg	SHORT $LN6@pqdownheap
$LN7@pqdownheap:
	jmp	SHORT $LN3@pqdownheap
$LN6@pqdownheap:

; 474  : 
; 475  :         /* Exchange v with the smallest son */
; 476  :         s->heap[k] = s->heap[j];  k = j;

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+2908]
	mov	DWORD PTR [ecx+eax*4+2908], edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _k$[ebp], eax

; 477  : 
; 478  :         /* And continue down the tree, setting j to the left son of k */
; 479  :         j <<= 1;

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 1
	mov	DWORD PTR _j$[ebp], eax

; 480  :     }

	jmp	$LN2@pqdownheap
$LN3@pqdownheap:

; 481  :     s->heap[k] = v;

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	DWORD PTR [ecx+eax*4+2908], edx

; 482  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_pqdownheap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _init_block
_TEXT	SEGMENT
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_init_block PROC					; COMDAT

; 417  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 418  :     int n; /* iterates over tree elements */
; 419  : 
; 420  :     /* Initialize the trees. */
; 421  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN4@init_block
$LN2@init_block:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN4@init_block:
	cmp	DWORD PTR _n$[ebp], 286			; 0000011eH
	jge	SHORT $LN3@init_block
	xor	eax, eax
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+148], ax
	jmp	SHORT $LN2@init_block
$LN3@init_block:

; 422  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN7@init_block
$LN5@init_block:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN7@init_block:
	cmp	DWORD PTR _n$[ebp], 30			; 0000001eH
	jge	SHORT $LN6@init_block
	xor	eax, eax
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+2440], ax
	jmp	SHORT $LN5@init_block
$LN6@init_block:

; 423  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN10@init_block
$LN8@init_block:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN10@init_block:
	cmp	DWORD PTR _n$[ebp], 19			; 00000013H
	jge	SHORT $LN9@init_block
	xor	eax, eax
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+2684], ax
	jmp	SHORT $LN8@init_block
$LN9@init_block:

; 424  : 
; 425  :     s->dyn_ltree[END_BLOCK].Freq = 1;

	mov	eax, 4
	shl	eax, 8
	mov	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+eax+148], cx

; 426  :     s->opt_len = s->static_len = 0L;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5804], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5800], 0

; 427  :     s->last_lit = s->matches = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5808], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5792], 0

; 428  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_init_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT _tr_static_init
_TEXT	SEGMENT
_tr_static_init PROC					; COMDAT

; 240  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 241  : #if defined(GEN_TREES_H) || !defined(STDC)
; 242  :     static int static_init_done = 0;
; 243  :     int n;        /* iterates over tree elements */
; 244  :     int bits;     /* bit counter */
; 245  :     int length;   /* length value */
; 246  :     int code;     /* code value */
; 247  :     int dist;     /* distance index */
; 248  :     ush bl_count[MAX_BITS+1];
; 249  :     /* number of codes at each bit length for an optimal tree */
; 250  : 
; 251  :     if (static_init_done) return;
; 252  : 
; 253  :     /* For some embedded targets, global variables are not initialized: */
; 254  : #ifdef NO_INIT_GLOBAL_POINTERS
; 255  :     static_l_desc.static_tree = static_ltree;
; 256  :     static_l_desc.extra_bits = extra_lbits;
; 257  :     static_d_desc.static_tree = static_dtree;
; 258  :     static_d_desc.extra_bits = extra_dbits;
; 259  :     static_bl_desc.extra_bits = extra_blbits;
; 260  : #endif
; 261  : 
; 262  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 263  :     length = 0;
; 264  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 265  :         base_length[code] = length;
; 266  :         for (n = 0; n < (1<<extra_lbits[code]); n++) {
; 267  :             _length_code[length++] = (uch)code;
; 268  :         }
; 269  :     }
; 270  :     Assert (length == 256, "tr_static_init: length != 256");
; 271  :     /* Note that the length 255 (match length 258) can be represented
; 272  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 273  :      * overwrite length_code[255] to use the best encoding:
; 274  :      */
; 275  :     _length_code[length-1] = (uch)code;
; 276  : 
; 277  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 278  :     dist = 0;
; 279  :     for (code = 0 ; code < 16; code++) {
; 280  :         base_dist[code] = dist;
; 281  :         for (n = 0; n < (1<<extra_dbits[code]); n++) {
; 282  :             _dist_code[dist++] = (uch)code;
; 283  :         }
; 284  :     }
; 285  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 286  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 287  :     for ( ; code < D_CODES; code++) {
; 288  :         base_dist[code] = dist << 7;
; 289  :         for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
; 290  :             _dist_code[256 + dist++] = (uch)code;
; 291  :         }
; 292  :     }
; 293  :     Assert (dist == 256, "tr_static_init: 256+dist != 512");
; 294  : 
; 295  :     /* Construct the codes of the static literal tree */
; 296  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 297  :     n = 0;
; 298  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 299  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 300  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 301  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 302  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 303  :      * tree construction to get a canonical Huffman tree (longest code
; 304  :      * all ones)
; 305  :      */
; 306  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 307  : 
; 308  :     /* The static distance tree is trivial: */
; 309  :     for (n = 0; n < D_CODES; n++) {
; 310  :         static_dtree[n].Len = 5;
; 311  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 312  :     }
; 313  :     static_init_done = 1;
; 314  : 
; 315  : #  ifdef GEN_TREES_H
; 316  :     gen_trees_header();
; 317  : #  endif
; 318  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 319  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_tr_static_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT __tr_stored_block
_TEXT	SEGMENT
_val$1 = -8						; size = 4
_len$2 = -4						; size = 4
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_stored_len$ = 16					; size = 4
_last$ = 20						; size = 4
__tr_stored_block PROC					; COMDAT

; 876  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 877  :     send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */

	mov	DWORD PTR _len$2[ebp], 3
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$2[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN2@tr_stored_
	mov	eax, DWORD PTR _last$[ebp]
	mov	DWORD PTR _val$1[ebp], eax
	movzx	eax, WORD PTR _val$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$2[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN3@tr_stored_
$LN2@tr_stored_:
	movzx	eax, WORD PTR _last$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN3@tr_stored_:

; 878  : #ifdef DEBUG
; 879  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 880  :     s->compressed_len += (stored_len + 4) << 3;
; 881  : #endif
; 882  :     copy_block(s, buf, (unsigned)stored_len, 1); /* with header */

	push	1
	mov	eax, DWORD PTR _stored_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_copy_block
	add	esp, 16					; 00000010H

; 883  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__tr_stored_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT __tr_align
_TEXT	SEGMENT
_val$1 = -32						; size = 4
_len$2 = -28						; size = 4
_val$3 = -24						; size = 4
_len$4 = -20						; size = 4
_val$5 = -16						; size = 4
_len$6 = -12						; size = 4
_val$7 = -8						; size = 4
_len$8 = -4						; size = 4
_s$ = 8							; size = 4
__tr_align PROC						; COMDAT

; 898  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 899  :     send_bits(s, STATIC_TREES<<1, 3);

	mov	DWORD PTR _len$8[ebp], 3
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$8[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN2@tr_align
	mov	DWORD PTR _val$7[ebp], 2
	movzx	eax, WORD PTR _val$7[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$7[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$8[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN3@tr_align
$LN2@tr_align:
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, 2
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	or	ecx, edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$8[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN3@tr_align:

; 900  :     send_code(s, END_BLOCK, static_ltree);

	mov	eax, 4
	shl	eax, 8
	movzx	ecx, WORD PTR _static_ltree[eax+2]
	mov	DWORD PTR _len$6[ebp], ecx
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$6[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN4@tr_align
	mov	eax, 4
	shl	eax, 8
	movzx	ecx, WORD PTR _static_ltree[eax]
	mov	DWORD PTR _val$5[ebp], ecx
	movzx	eax, WORD PTR _val$5[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$5[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$6[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN5@tr_align
$LN4@tr_align:
	mov	eax, 4
	shl	eax, 8
	movzx	edx, WORD PTR _static_ltree[eax]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$6[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN5@tr_align:

; 901  : #ifdef DEBUG
; 902  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 903  : #endif
; 904  :     bi_flush(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_bi_flush
	add	esp, 4

; 905  :     /* Of the 10 bits for the empty block, we have already sent
; 906  :      * (10 - bi_valid) bits. The lookahead for the last real code (before
; 907  :      * the EOB of the previous block) was thus at least one plus the length
; 908  :      * of the EOB plus what we have just sent of the empty static block.
; 909  :      */
; 910  :     if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5812]
	add	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _s$[ebp]
	sub	ecx, DWORD PTR [edx+5820]
	cmp	ecx, 9
	jge	$LN6@tr_align

; 911  :         send_bits(s, STATIC_TREES<<1, 3);

	mov	DWORD PTR _len$4[ebp], 3
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$4[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN7@tr_align
	mov	DWORD PTR _val$3[ebp], 2
	movzx	eax, WORD PTR _val$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$4[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN8@tr_align
$LN7@tr_align:
	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, 2
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	or	ecx, edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$4[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN8@tr_align:

; 912  :         send_code(s, END_BLOCK, static_ltree);

	mov	eax, 4
	shl	eax, 8
	movzx	ecx, WORD PTR _static_ltree[eax+2]
	mov	DWORD PTR _len$2[ebp], ecx
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$2[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN9@tr_align
	mov	eax, 4
	shl	eax, 8
	movzx	ecx, WORD PTR _static_ltree[eax]
	mov	DWORD PTR _val$1[ebp], ecx
	movzx	eax, WORD PTR _val$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$2[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN10@tr_align
$LN9@tr_align:
	mov	eax, 4
	shl	eax, 8
	movzx	edx, WORD PTR _static_ltree[eax]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN10@tr_align:

; 913  : #ifdef DEBUG
; 914  :         s->compressed_len += 10L;
; 915  : #endif
; 916  :         bi_flush(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_bi_flush
	add	esp, 4
$LN6@tr_align:

; 917  :     }
; 918  :     s->last_eob_len = 7;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5812], 7

; 919  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__tr_align ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT __tr_flush_block
_TEXT	SEGMENT
_val$1 = -28						; size = 4
_len$2 = -24						; size = 4
_val$3 = -20						; size = 4
_len$4 = -16						; size = 4
_max_blindex$ = -12					; size = 4
_static_lenb$ = -8					; size = 4
_opt_lenb$ = -4						; size = 4
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_stored_len$ = 16					; size = 4
_last$ = 20						; size = 4
__tr_flush_block PROC					; COMDAT

; 930  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi

; 931  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 932  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */

	mov	DWORD PTR _max_blindex$[ebp], 0

; 933  : 
; 934  :     /* Build the Huffman trees unless a stored block is forced */
; 935  :     if (s->level > 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 0
	jle	$LN2@tr_flush_b

; 936  : 
; 937  :         /* Check if the file is binary or text */
; 938  :         if (s->strm->data_type == Z_UNKNOWN)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+44], 2
	jne	SHORT $LN4@tr_flush_b

; 939  :             s->strm->data_type = detect_data_type(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_detect_data_type
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+44], eax
$LN4@tr_flush_b:

; 940  : 
; 941  :         /* Construct the literal and distance trees */
; 942  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2840				; 00000b18H
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_build_tree
	add	esp, 8

; 943  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 944  :                 s->static_len));
; 945  : 
; 946  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2852				; 00000b24H
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_build_tree
	add	esp, 8

; 947  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 948  :                 s->static_len));
; 949  :         /* At this point, opt_len and static_len are the total bit lengths of
; 950  :          * the compressed block data, excluding the tree representations.
; 951  :          */
; 952  : 
; 953  :         /* Build the bit length tree for the above two trees, and get the index
; 954  :          * in bl_order of the last bit length code to send.
; 955  :          */
; 956  :         max_blindex = build_bl_tree(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_build_bl_tree
	add	esp, 4
	mov	DWORD PTR _max_blindex$[ebp], eax

; 957  : 
; 958  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 959  :         opt_lenb = (s->opt_len+3+7)>>3;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5800]
	add	ecx, 10					; 0000000aH
	shr	ecx, 3
	mov	DWORD PTR _opt_lenb$[ebp], ecx

; 960  :         static_lenb = (s->static_len+3+7)>>3;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5804]
	add	ecx, 10					; 0000000aH
	shr	ecx, 3
	mov	DWORD PTR _static_lenb$[ebp], ecx

; 961  : 
; 962  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 963  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 964  :                 s->last_lit));
; 965  : 
; 966  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;

	mov	eax, DWORD PTR _static_lenb$[ebp]
	cmp	eax, DWORD PTR _opt_lenb$[ebp]
	ja	SHORT $LN5@tr_flush_b
	mov	eax, DWORD PTR _static_lenb$[ebp]
	mov	DWORD PTR _opt_lenb$[ebp], eax
$LN5@tr_flush_b:

; 967  : 
; 968  :     } else {

	jmp	SHORT $LN3@tr_flush_b
$LN2@tr_flush_b:

; 969  :         Assert(buf != (char*)0, "lost buf");
; 970  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

	mov	eax, DWORD PTR _stored_len$[ebp]
	add	eax, 5
	mov	DWORD PTR _static_lenb$[ebp], eax
	mov	ecx, DWORD PTR _static_lenb$[ebp]
	mov	DWORD PTR _opt_lenb$[ebp], ecx
$LN3@tr_flush_b:

; 971  :     }
; 972  : 
; 973  : #ifdef FORCE_STORED
; 974  :     if (buf != (char*)0) { /* force stored block */
; 975  : #else
; 976  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

	mov	eax, DWORD PTR _stored_len$[ebp]
	add	eax, 4
	cmp	eax, DWORD PTR _opt_lenb$[ebp]
	ja	SHORT $LN6@tr_flush_b
	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN6@tr_flush_b

; 977  :                        /* 4: two words for the lengths */
; 978  : #endif
; 979  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 980  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 981  :          * the last block flush, because compression would have been
; 982  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 983  :          * transform a block into a stored block.
; 984  :          */
; 985  :         _tr_stored_block(s, buf, stored_len, last);

	mov	eax, DWORD PTR _last$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stored_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_stored_block
	add	esp, 16					; 00000010H
	jmp	$LN7@tr_flush_b
$LN6@tr_flush_b:

; 986  : 
; 987  : #ifdef FORCE_STATIC
; 988  :     } else if (static_lenb >= 0) { /* force static trees */
; 989  : #else
; 990  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 4
	je	SHORT $LN10@tr_flush_b
	mov	eax, DWORD PTR _static_lenb$[ebp]
	cmp	eax, DWORD PTR _opt_lenb$[ebp]
	jne	$LN8@tr_flush_b
$LN10@tr_flush_b:

; 991  : #endif
; 992  :         send_bits(s, (STATIC_TREES<<1)+last, 3);

	mov	DWORD PTR _len$4[ebp], 3
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$4[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN11@tr_flush_b
	mov	eax, DWORD PTR _last$[ebp]
	add	eax, 2
	mov	DWORD PTR _val$3[ebp], eax
	movzx	eax, WORD PTR _val$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$3[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$4[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN12@tr_flush_b
$LN11@tr_flush_b:
	mov	eax, DWORD PTR _last$[ebp]
	add	eax, 2
	movzx	edx, ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$4[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN12@tr_flush_b:

; 993  :         compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);

	push	OFFSET _static_dtree
	push	OFFSET _static_ltree
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_compress_block
	add	esp, 12					; 0000000cH

; 994  : #ifdef DEBUG
; 995  :         s->compressed_len += 3 + s->static_len;
; 996  : #endif
; 997  :     } else {

	jmp	$LN7@tr_flush_b
$LN8@tr_flush_b:

; 998  :         send_bits(s, (DYN_TREES<<1)+last, 3);

	mov	DWORD PTR _len$2[ebp], 3
	mov	eax, 16					; 00000010H
	sub	eax, DWORD PTR _len$2[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5820], eax
	jle	$LN13@tr_flush_b
	mov	eax, DWORD PTR _last$[ebp]
	add	eax, 4
	mov	DWORD PTR _val$1[ebp], eax
	movzx	eax, WORD PTR _val$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+5820]
	shl	eax, cl
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [edx+5816]
	or	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+5816], cx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+5816]
	sar	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	movzx	eax, WORD PTR _val$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 16					; 00000010H
	sub	edx, DWORD PTR [ecx+5820]
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	mov	edx, DWORD PTR _len$2[ebp]
	lea	eax, DWORD PTR [edx+ecx-16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5820], eax
	jmp	SHORT $LN14@tr_flush_b
$LN13@tr_flush_b:
	mov	eax, DWORD PTR _last$[ebp]
	add	eax, 4
	movzx	edx, ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	shl	edx, cl
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [ecx+5816]
	or	eax, edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5820]
	add	ecx, DWORD PTR _len$2[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5820], ecx
$LN14@tr_flush_b:

; 999  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,

	mov	eax, DWORD PTR _max_blindex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+2856]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+2844]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_send_all_trees
	add	esp, 16					; 00000010H

; 1000 :                        max_blindex+1);
; 1001 :         compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2440				; 00000988H
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 148				; 00000094H
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_compress_block
	add	esp, 12					; 0000000cH
$LN7@tr_flush_b:

; 1002 : #ifdef DEBUG
; 1003 :         s->compressed_len += 3 + s->opt_len;
; 1004 : #endif
; 1005 :     }
; 1006 :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 1007 :     /* The above check is made mod 2^32, for files larger than 512 MB
; 1008 :      * and uLong implemented on 32 bits.
; 1009 :      */
; 1010 :     init_block(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_init_block
	add	esp, 4

; 1011 : 
; 1012 :     if (last) {

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN1@tr_flush_b

; 1013 :         bi_windup(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_bi_windup
	add	esp, 4
$LN1@tr_flush_b:

; 1014 : #ifdef DEBUG
; 1015 :         s->compressed_len += 7;  /* align on byte boundary */
; 1016 : #endif
; 1017 :     }
; 1018 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
; 1019 :            s->compressed_len-7*last));
; 1020 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__tr_flush_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT __tr_tally
_TEXT	SEGMENT
tv181 = -68						; size = 4
tv164 = -68						; size = 4
_s$ = 8							; size = 4
_dist$ = 12						; size = 4
_lc$ = 16						; size = 4
__tr_tally PROC						; COMDAT

; 1030 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 1031 :     s->d_buf[s->last_lit] = (ush)dist;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	mov	dx, WORD PTR _dist$[ebp]
	mov	WORD PTR [eax+ecx*2], dx

; 1032 :     s->l_buf[s->last_lit++] = (uch)lc;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _lc$[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx

; 1033 :     if (dist == 0) {

	cmp	DWORD PTR _dist$[ebp], 0
	jne	SHORT $LN2@tr_tally

; 1034 :         /* lc is the unmatched char */
; 1035 :         s->dyn_ltree[lc].Freq++;

	mov	eax, DWORD PTR _lc$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	mov	eax, DWORD PTR _lc$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx

; 1036 :     } else {

	jmp	$LN3@tr_tally
$LN2@tr_tally:

; 1037 :         s->matches++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5808]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5808], ecx

; 1038 :         /* Here, lc is the match length - MIN_MATCH */
; 1039 :         dist--;             /* dist = match distance - 1 */

	mov	eax, DWORD PTR _dist$[ebp]
	sub	eax, 1
	mov	DWORD PTR _dist$[ebp], eax

; 1040 :         Assert((ush)dist < (ush)MAX_DIST(s) &&
; 1041 :                (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
; 1042 :                (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
; 1043 : 
; 1044 :         s->dyn_ltree[_length_code[lc]+LITERALS+1].Freq++;

	mov	eax, DWORD PTR _lc$[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+1176]
	add	ax, 1
	mov	ecx, DWORD PTR _lc$[ebp]
	movzx	edx, BYTE PTR __length_code[ecx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx*4+1176], ax

; 1045 :         s->dyn_dtree[d_code(dist)].Freq++;

	cmp	DWORD PTR _dist$[ebp], 256		; 00000100H
	jae	SHORT $LN5@tr_tally
	mov	eax, DWORD PTR _dist$[ebp]
	movzx	ecx, BYTE PTR __dist_code[eax]
	mov	DWORD PTR tv164[ebp], ecx
	jmp	SHORT $LN6@tr_tally
$LN5@tr_tally:
	mov	edx, DWORD PTR _dist$[ebp]
	shr	edx, 7
	movzx	eax, BYTE PTR __dist_code[edx+256]
	mov	DWORD PTR tv164[ebp], eax
$LN6@tr_tally:
	mov	ecx, DWORD PTR tv164[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+2440]
	add	ax, 1
	mov	ecx, DWORD PTR tv164[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx+ecx*4+2440], ax
$LN3@tr_tally:

; 1046 :     }
; 1047 : 
; 1048 : #ifdef TRUNCATE_BLOCK
; 1049 :     /* Try to guess if it is profitable to stop the current block here */
; 1050 :     if ((s->last_lit & 0x1fff) == 0 && s->level > 2) {
; 1051 :         /* Compute an upper bound for the compressed length */
; 1052 :         ulg out_length = (ulg)s->last_lit*8L;
; 1053 :         ulg in_length = (ulg)((long)s->strstart - s->block_start);
; 1054 :         int dcode;
; 1055 :         for (dcode = 0; dcode < D_CODES; dcode++) {
; 1056 :             out_length += (ulg)s->dyn_dtree[dcode].Freq *
; 1057 :                 (5L+extra_dbits[dcode]);
; 1058 :         }
; 1059 :         out_length >>= 3;
; 1060 :         Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
; 1061 :                s->last_lit, in_length, out_length,
; 1062 :                100L - out_length*100L/in_length));
; 1063 :         if (s->matches < s->last_lit/2 && out_length < in_length/2) return 1;
; 1064 :     }
; 1065 : #endif
; 1066 :     return (s->last_lit == s->lit_bufsize-1);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN7@tr_tally
	mov	DWORD PTR tv181[ebp], 1
	jmp	SHORT $LN8@tr_tally
$LN7@tr_tally:
	mov	DWORD PTR tv181[ebp], 0
$LN8@tr_tally:
	mov	eax, DWORD PTR tv181[ebp]

; 1067 :     /* We avoid equality with lit_bufsize because of wraparound at 64K
; 1068 :      * on 16 bit machines and because stored blocks are restricted to
; 1069 :      * 64K-1 bytes.
; 1070 :      */
; 1071 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__tr_tally ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\trees.c
;	COMDAT __tr_init
_TEXT	SEGMENT
_s$ = 8							; size = 4
__tr_init PROC						; COMDAT

; 388  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 389  :     tr_static_init();

	call	_tr_static_init

; 390  : 
; 391  :     s->l_desc.dyn_tree = s->dyn_ltree;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 148				; 00000094H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+2840], eax

; 392  :     s->l_desc.stat_desc = &static_l_desc;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+2848], OFFSET _static_l_desc

; 393  : 
; 394  :     s->d_desc.dyn_tree = s->dyn_dtree;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2440				; 00000988H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+2852], eax

; 395  :     s->d_desc.stat_desc = &static_d_desc;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+2860], OFFSET _static_d_desc

; 396  : 
; 397  :     s->bl_desc.dyn_tree = s->bl_tree;

	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2684				; 00000a7cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+2864], eax

; 398  :     s->bl_desc.stat_desc = &static_bl_desc;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+2872], OFFSET _static_bl_desc

; 399  : 
; 400  :     s->bi_buf = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+5816], ax

; 401  :     s->bi_valid = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5820], 0

; 402  :     s->last_eob_len = 8; /* enough lookahead for inflate */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5812], 8

; 403  : #ifdef DEBUG
; 404  :     s->compressed_len = 0L;
; 405  :     s->bits_sent = 0L;
; 406  : #endif
; 407  : 
; 408  :     /* Initialize the first block of the first file: */
; 409  :     init_block(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_init_block
	add	esp, 4

; 410  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__tr_init ENDP
_TEXT	ENDS
END
