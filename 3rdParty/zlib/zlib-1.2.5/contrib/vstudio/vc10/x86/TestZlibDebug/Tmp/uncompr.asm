; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26730.0 

	TITLE	E:\git\mcferront\anttrap-engine\3rdParty\zlib\zlib-1.2.5\uncompr.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_uncompress@16
PUBLIC	??_C@_05DFCKICEH@1?42?45@			; `string'
EXTRN	_inflate@8:PROC
EXTRN	_inflateEnd@4:PROC
EXTRN	_inflateInit_@12:PROC
;	COMDAT ??_C@_05DFCKICEH@1?42?45@
CONST	SEGMENT
??_C@_05DFCKICEH@1?42?45@ DB '1.2.5', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\uncompr.c
;	COMDAT _uncompress@16
_TEXT	SEGMENT
_err$ = -60						; size = 4
_stream$ = -56						; size = 56
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_uncompress@16 PROC					; COMDAT

; 29   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	ebx
	push	esi
	push	edi

; 30   :     z_stream stream;
; 31   :     int err;
; 32   : 
; 33   :     stream.next_in = (Bytef*)source;

	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _stream$[ebp], eax

; 34   :     stream.avail_in = (uInt)sourceLen;

	mov	eax, DWORD PTR _sourceLen$[ebp]
	mov	DWORD PTR _stream$[ebp+4], eax

; 35   :     /* Check for source > 64K on 16-bit machine: */
; 36   :     if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;

	mov	eax, DWORD PTR _stream$[ebp+4]
	cmp	eax, DWORD PTR _sourceLen$[ebp]
	je	SHORT $LN2@uncompress
	mov	eax, -5					; fffffffbH
	jmp	$LN1@uncompress
$LN2@uncompress:

; 37   : 
; 38   :     stream.next_out = dest;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _stream$[ebp+12], eax

; 39   :     stream.avail_out = (uInt)*destLen;

	mov	eax, DWORD PTR _destLen$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _stream$[ebp+16], ecx

; 40   :     if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;

	mov	eax, DWORD PTR _destLen$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp+16]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@uncompress
	mov	eax, -5					; fffffffbH
	jmp	SHORT $LN1@uncompress
$LN3@uncompress:

; 41   : 
; 42   :     stream.zalloc = (alloc_func)0;

	mov	DWORD PTR _stream$[ebp+32], 0

; 43   :     stream.zfree = (free_func)0;

	mov	DWORD PTR _stream$[ebp+36], 0

; 44   : 
; 45   :     err = inflateInit(&stream);

	push	56					; 00000038H
	push	OFFSET ??_C@_05DFCKICEH@1?42?45@
	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_inflateInit_@12
	mov	DWORD PTR _err$[ebp], eax

; 46   :     if (err != Z_OK) return err;

	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN4@uncompress
	mov	eax, DWORD PTR _err$[ebp]
	jmp	SHORT $LN1@uncompress
$LN4@uncompress:

; 47   : 
; 48   :     err = inflate(&stream, Z_FINISH);

	push	4
	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_inflate@8
	mov	DWORD PTR _err$[ebp], eax

; 49   :     if (err != Z_STREAM_END) {

	cmp	DWORD PTR _err$[ebp], 1
	je	SHORT $LN5@uncompress

; 50   :         inflateEnd(&stream);

	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_inflateEnd@4

; 51   :         if (err == Z_NEED_DICT || (err == Z_BUF_ERROR && stream.avail_in == 0))

	cmp	DWORD PTR _err$[ebp], 2
	je	SHORT $LN7@uncompress
	cmp	DWORD PTR _err$[ebp], -5		; fffffffbH
	jne	SHORT $LN6@uncompress
	cmp	DWORD PTR _stream$[ebp+4], 0
	jne	SHORT $LN6@uncompress
$LN7@uncompress:

; 52   :             return Z_DATA_ERROR;

	mov	eax, -3					; fffffffdH
	jmp	SHORT $LN1@uncompress
$LN6@uncompress:

; 53   :         return err;

	mov	eax, DWORD PTR _err$[ebp]
	jmp	SHORT $LN1@uncompress
$LN5@uncompress:

; 54   :     }
; 55   :     *destLen = stream.total_out;

	mov	eax, DWORD PTR _destLen$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp+20]
	mov	DWORD PTR [eax], ecx

; 56   : 
; 57   :     err = inflateEnd(&stream);

	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_inflateEnd@4
	mov	DWORD PTR _err$[ebp], eax

; 58   :     return err;

	mov	eax, DWORD PTR _err$[ebp]
$LN1@uncompress:

; 59   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_uncompress@16 ENDP
_TEXT	ENDS
END
