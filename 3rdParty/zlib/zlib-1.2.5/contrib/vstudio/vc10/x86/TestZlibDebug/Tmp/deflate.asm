; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26730.0 

	TITLE	E:\git\mcferront\anttrap-engine\3rdParty\zlib\zlib-1.2.5\deflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_deflate_copyright
CONST	SEGMENT
_deflate_copyright DB ' deflate 1.2.5 Copyright 1995-2010 Jean-loup Gaill'
	DB	'y and Mark Adler ', 00H
	ORG $+4
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
?my_version@?1??deflateInit2_@@9@9 DB '1.2.5', 00H	; `deflateInit2_'::`2'::my_version
CONST	ENDS
PUBLIC	_deflate@8
PUBLIC	_deflateEnd@4
PUBLIC	_deflateSetDictionary@12
PUBLIC	_deflateCopy@8
PUBLIC	_deflateReset@4
PUBLIC	_deflateParams@12
PUBLIC	_deflateTune@20
PUBLIC	_deflateBound@8
PUBLIC	_deflatePrime@12
PUBLIC	_deflateSetHeader@8
PUBLIC	_deflateInit_@16
PUBLIC	_deflateInit2_@32
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_adler32@12:PROC
EXTRN	_crc32@12:PROC
EXTRN	_zcalloc:PROC
EXTRN	_zcfree:PROC
EXTRN	__tr_init:PROC
EXTRN	__tr_flush_block:PROC
EXTRN	__tr_align:PROC
EXTRN	__tr_stored_block:PROC
EXTRN	_match_init:PROC
EXTRN	_longest_match:PROC
EXTRN	_z_errmsg:BYTE
EXTRN	__length_code:BYTE
EXTRN	__dist_code:BYTE
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _read_buf
_TEXT	SEGMENT
_len$ = -4						; size = 4
_strm$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_read_buf PROC						; COMDAT

; 996  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 997  :     unsigned len = strm->avail_in;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx

; 998  : 
; 999  :     if (len > size) len = size;

	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jbe	SHORT $LN2@read_buf
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _len$[ebp], eax
$LN2@read_buf:

; 1000 :     if (len == 0) return 0;

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN3@read_buf
	xor	eax, eax
	jmp	$LN1@read_buf
$LN3@read_buf:

; 1001 : 
; 1002 :     strm->avail_in  -= len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1003 : 
; 1004 :     if (strm->state->wrap == 1) {

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 1
	jne	SHORT $LN4@read_buf

; 1005 :         strm->adler = adler32(strm->adler, strm->next_in, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_adler32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax

; 1006 :     }

	jmp	SHORT $LN5@read_buf
$LN4@read_buf:

; 1007 : #ifdef GZIP
; 1008 :     else if (strm->state->wrap == 2) {

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 2
	jne	SHORT $LN5@read_buf

; 1009 :         strm->adler = crc32(strm->adler, strm->next_in, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN5@read_buf:

; 1010 :     }
; 1011 : #endif
; 1012 :     zmemcpy(buf, strm->next_in, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1013 :     strm->next_in  += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx], ecx

; 1014 :     strm->total_in += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1015 : 
; 1016 :     return (int)len;

	mov	eax, DWORD PTR _len$[ebp]
$LN1@read_buf:

; 1017 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _flush_pending
_TEXT	SEGMENT
_len$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush_pending PROC					; COMDAT

; 564  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 565  :     unsigned len = strm->state->pending;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _len$[ebp], edx

; 566  : 
; 567  :     if (len > strm->avail_out) len = strm->avail_out;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jbe	SHORT $LN2@flush_pend
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _len$[ebp], ecx
$LN2@flush_pend:

; 568  :     if (len == 0) return;

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN3@flush_pend
	jmp	$LN1@flush_pend
$LN3@flush_pend:

; 569  : 
; 570  :     zmemcpy(strm->next_out, strm->state->pending_out, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 571  :     strm->next_out  += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 572  :     strm->state->pending_out  += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+16], edx

; 573  :     strm->total_out += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 574  :     strm->avail_out  -= len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 575  :     strm->state->pending -= len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+20], edx

; 576  :     if (strm->state->pending == 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN1@flush_pend

; 577  :         strm->state->pending_out = strm->state->pending_buf;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+16], ecx
$LN1@flush_pend:

; 578  :     }
; 579  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _putShortMSB
_TEXT	SEGMENT
_s$ = 8							; size = 4
_b$ = 12						; size = 4
_putShortMSB PROC					; COMDAT

; 551  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 552  :     put_byte(s, (Byte)(b >> 8));

	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 553  :     put_byte(s, (Byte)(b & 0xff));

	mov	eax, DWORD PTR _b$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	BYTE PTR [ecx+edx], al
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 554  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _lm_init
_TEXT	SEGMENT
_s$ = 8							; size = 4
_lm_init PROC						; COMDAT

; 1024 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1025 :     s->window_size = (ulg)2L*s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 1026 : 
; 1027 :     CLEAR_HASH(s);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2-2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	lea	edx, DWORD PTR [ecx+ecx-2]
	push	edx
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1028 : 
; 1029 :     /* Set the default configuration parameters:
; 1030 :      */
; 1031 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	movzx	edx, WORD PTR _configuration_table[ecx+2]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+128], edx

; 1032 :     s->good_match       = configuration_table[s->level].good_length;

	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	movzx	edx, WORD PTR _configuration_table[ecx]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+140], edx

; 1033 :     s->nice_match       = configuration_table[s->level].nice_length;

	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	movzx	edx, WORD PTR _configuration_table[ecx+4]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+144], edx

; 1034 :     s->max_chain_length = configuration_table[s->level].max_chain;

	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	movzx	edx, WORD PTR _configuration_table[ecx+6]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+124], edx

; 1035 : 
; 1036 :     s->strstart = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], 0

; 1037 :     s->block_start = 0L;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+92], 0

; 1038 :     s->lookahead = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], 0

; 1039 :     s->match_length = s->prev_length = MIN_MATCH-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+120], 2
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], 2

; 1040 :     s->match_available = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+104], 0

; 1041 :     s->ins_h = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+72], 0

; 1042 : #ifndef FASTEST
; 1043 : #ifdef ASMV
; 1044 :     match_init(); /* initialize the asm code */

	call	_match_init

; 1045 : #endif
; 1046 : #endif
; 1047 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_lm_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflate_huff
_TEXT	SEGMENT
tv182 = -80						; size = 4
tv195 = -76						; size = 4
tv193 = -76						; size = 4
tv170 = -76						; size = 4
tv159 = -76						; size = 4
tv138 = -76						; size = 4
_cc$1 = -5						; size = 1
_bflush$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_huff PROC					; COMDAT

; 1810 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
$LN4@deflate_hu:

; 1811 :     int bflush;             /* set if current block must be flushed */
; 1812 : 
; 1813 :     for (;;) {
; 1814 :         /* Make sure that we have a literal to write. */
; 1815 :         if (s->lookahead == 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN5@deflate_hu

; 1816 :             fill_window(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_fill_window
	add	esp, 4

; 1817 :             if (s->lookahead == 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN5@deflate_hu

; 1818 :                 if (flush == Z_NO_FLUSH)

	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN7@deflate_hu

; 1819 :                     return need_more;

	xor	eax, eax
	jmp	$LN1@deflate_hu
$LN7@deflate_hu:

; 1820 :                 break;      /* flush the current block */

	jmp	$LN3@deflate_hu
$LN5@deflate_hu:

; 1821 :             }
; 1822 :         }
; 1823 : 
; 1824 :         /* Output a literal byte */
; 1825 :         s->match_length = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 0

; 1826 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 1827 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	cl, BYTE PTR [eax+ecx]
	mov	BYTE PTR _cc$1[ebp], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _cc$1[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, BYTE PTR _cc$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	movzx	eax, BYTE PTR _cc$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN12@deflate_hu
	mov	DWORD PTR tv138[ebp], 1
	jmp	SHORT $LN13@deflate_hu
$LN12@deflate_hu:
	mov	DWORD PTR tv138[ebp], 0
$LN13@deflate_hu:
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1828 :         s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1829 :         s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1830 :         if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN8@deflate_hu
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN14@deflate_hu
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN15@deflate_hu
$LN14@deflate_hu:
	mov	DWORD PTR tv159[ebp], 0
$LN15@deflate_hu:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv159[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN8@deflate_hu
	xor	eax, eax
	jmp	$LN1@deflate_hu
$LN8@deflate_hu:

; 1831 :     }

	jmp	$LN4@deflate_hu
$LN3@deflate_hu:

; 1832 :     FLUSH_BLOCK(s, flush == Z_FINISH);

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN16@deflate_hu
	mov	DWORD PTR tv170[ebp], 1
	jmp	SHORT $LN17@deflate_hu
$LN16@deflate_hu:
	mov	DWORD PTR tv170[ebp], 0
$LN17@deflate_hu:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN18@deflate_hu
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv182[ebp], edx
	jmp	SHORT $LN19@deflate_hu
$LN18@deflate_hu:
	mov	DWORD PTR tv182[ebp], 0
$LN19@deflate_hu:
	mov	ecx, DWORD PTR tv170[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv182[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN10@deflate_hu
	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN20@deflate_hu
	mov	DWORD PTR tv193[ebp], 2
	jmp	SHORT $LN21@deflate_hu
$LN20@deflate_hu:
	mov	DWORD PTR tv193[ebp], 0
$LN21@deflate_hu:
	mov	eax, DWORD PTR tv193[ebp]
	jmp	SHORT $LN1@deflate_hu
$LN10@deflate_hu:

; 1833 :     return flush == Z_FINISH ? finish_done : block_done;

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN22@deflate_hu
	mov	DWORD PTR tv195[ebp], 3
	jmp	SHORT $LN23@deflate_hu
$LN22@deflate_hu:
	mov	DWORD PTR tv195[ebp], 1
$LN23@deflate_hu:
	mov	eax, DWORD PTR tv195[ebp]
$LN1@deflate_hu:

; 1834 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_huff ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflate_rle
_TEXT	SEGMENT
tv327 = -100						; size = 4
tv340 = -96						; size = 4
tv338 = -96						; size = 4
tv315 = -96						; size = 4
tv304 = -96						; size = 4
tv283 = -96						; size = 4
tv238 = -96						; size = 4
tv221 = -96						; size = 4
_cc$1 = -25						; size = 1
_dist$2 = -24						; size = 2
_len$3 = -17						; size = 1
_strend$ = -16						; size = 4
_scan$ = -12						; size = 4
_prev$ = -8						; size = 4
_bflush$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_rle PROC					; COMDAT

; 1744 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
$LN4@deflate_rl:

; 1745 :     int bflush;             /* set if current block must be flushed */
; 1746 :     uInt prev;              /* byte at distance one to match */
; 1747 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 1748 : 
; 1749 :     for (;;) {
; 1750 :         /* Make sure that we always have enough lookahead, except
; 1751 :          * at the end of the input file. We need MAX_MATCH bytes
; 1752 :          * for the longest encodable run.
; 1753 :          */
; 1754 :         if (s->lookahead < MAX_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 258		; 00000102H
	jae	SHORT $LN8@deflate_rl

; 1755 :             fill_window(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_fill_window
	add	esp, 4

; 1756 :             if (s->lookahead < MAX_MATCH && flush == Z_NO_FLUSH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 258		; 00000102H
	jae	SHORT $LN9@deflate_rl
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN9@deflate_rl

; 1757 :                 return need_more;

	xor	eax, eax
	jmp	$LN1@deflate_rl
$LN9@deflate_rl:

; 1758 :             }
; 1759 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN8@deflate_rl
	jmp	$LN3@deflate_rl
$LN8@deflate_rl:

; 1760 :         }
; 1761 : 
; 1762 :         /* See how many times the previous byte repeats */
; 1763 :         s->match_length = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 0

; 1764 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 3
	jb	$LN11@deflate_rl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	jbe	$LN11@deflate_rl

; 1765 :             scan = s->window + s->strstart - 1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _scan$[ebp], ecx

; 1766 :             prev = *scan;

	mov	eax, DWORD PTR _scan$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _prev$[ebp], ecx

; 1767 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	DWORD PTR _prev$[ebp], edx
	jne	$LN11@deflate_rl
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	DWORD PTR _prev$[ebp], edx
	jne	$LN11@deflate_rl
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	DWORD PTR _prev$[ebp], edx
	jne	$LN11@deflate_rl

; 1768 :                 strend = s->window + s->strstart + MAX_MATCH;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+108]
	lea	ecx, DWORD PTR [ecx+eax+258]
	mov	DWORD PTR _strend$[ebp], ecx
$LN5@deflate_rl:

; 1769 :                 do {
; 1770 :                 } while (prev == *++scan && prev == *++scan &&
; 1771 :                          prev == *++scan && prev == *++scan &&
; 1772 :                          prev == *++scan && prev == *++scan &&
; 1773 :                          prev == *++scan && prev == *++scan &&

	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	DWORD PTR _prev$[ebp], edx
	jne	$LN6@deflate_rl
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	DWORD PTR _prev$[ebp], edx
	jne	$LN6@deflate_rl
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	DWORD PTR _prev$[ebp], edx
	jne	SHORT $LN6@deflate_rl
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	DWORD PTR _prev$[ebp], edx
	jne	SHORT $LN6@deflate_rl
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	DWORD PTR _prev$[ebp], edx
	jne	SHORT $LN6@deflate_rl
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	DWORD PTR _prev$[ebp], edx
	jne	SHORT $LN6@deflate_rl
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	DWORD PTR _prev$[ebp], edx
	jne	SHORT $LN6@deflate_rl
	mov	eax, DWORD PTR _scan$[ebp]
	add	eax, 1
	mov	DWORD PTR _scan$[ebp], eax
	mov	ecx, DWORD PTR _scan$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	DWORD PTR _prev$[ebp], edx
	jne	SHORT $LN6@deflate_rl
	mov	eax, DWORD PTR _scan$[ebp]
	cmp	eax, DWORD PTR _strend$[ebp]
	jb	$LN5@deflate_rl
$LN6@deflate_rl:

; 1774 :                          scan < strend);
; 1775 :                 s->match_length = MAX_MATCH - (int)(strend - scan);

	mov	eax, DWORD PTR _strend$[ebp]
	sub	eax, DWORD PTR _scan$[ebp]
	mov	ecx, 258				; 00000102H
	sub	ecx, eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], ecx

; 1776 :                 if (s->match_length > s->lookahead)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+96]
	cmp	edx, DWORD PTR [ecx+116]
	jbe	SHORT $LN11@deflate_rl

; 1777 :                     s->match_length = s->lookahead;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR [eax+96], edx
$LN11@deflate_rl:

; 1778 :             }
; 1779 :         }
; 1780 : 
; 1781 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 1782 :         if (s->match_length >= MIN_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+96], 3
	jb	$LN15@deflate_rl

; 1783 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 1784 : 
; 1785 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 3
	mov	BYTE PTR _len$3[ebp], cl
	mov	eax, 1
	mov	WORD PTR _dist$2[ebp], ax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	mov	dx, WORD PTR _dist$2[ebp]
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _len$3[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	mov	ax, WORD PTR _dist$2[ebp]
	sub	ax, 1
	mov	WORD PTR _dist$2[ebp], ax
	movzx	eax, BYTE PTR _len$3[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+1176]
	add	ax, 1
	movzx	ecx, BYTE PTR _len$3[ebp]
	movzx	edx, BYTE PTR __length_code[ecx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx*4+1176], ax
	movzx	eax, WORD PTR _dist$2[ebp]
	cmp	eax, 256				; 00000100H
	jge	SHORT $LN21@deflate_rl
	movzx	ecx, WORD PTR _dist$2[ebp]
	movzx	edx, BYTE PTR __dist_code[ecx]
	mov	DWORD PTR tv221[ebp], edx
	jmp	SHORT $LN22@deflate_rl
$LN21@deflate_rl:
	movzx	eax, WORD PTR _dist$2[ebp]
	sar	eax, 7
	movzx	ecx, BYTE PTR __dist_code[eax+256]
	mov	DWORD PTR tv221[ebp], ecx
$LN22@deflate_rl:
	mov	edx, DWORD PTR tv221[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+edx*4+2440]
	add	cx, 1
	mov	edx, DWORD PTR tv221[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+edx*4+2440], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN23@deflate_rl
	mov	DWORD PTR tv238[ebp], 1
	jmp	SHORT $LN24@deflate_rl
$LN23@deflate_rl:
	mov	DWORD PTR tv238[ebp], 0
$LN24@deflate_rl:
	mov	eax, DWORD PTR tv238[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1786 : 
; 1787 :             s->lookahead -= s->match_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+116]
	sub	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], edx

; 1788 :             s->strstart += s->match_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+96]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 1789 :             s->match_length = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 0

; 1790 :         } else {

	jmp	$LN16@deflate_rl
$LN15@deflate_rl:

; 1791 :             /* No match, output a literal byte */
; 1792 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1793 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	cl, BYTE PTR [eax+ecx]
	mov	BYTE PTR _cc$1[ebp], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _cc$1[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, BYTE PTR _cc$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	movzx	eax, BYTE PTR _cc$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN25@deflate_rl
	mov	DWORD PTR tv283[ebp], 1
	jmp	SHORT $LN26@deflate_rl
$LN25@deflate_rl:
	mov	DWORD PTR tv283[ebp], 0
$LN26@deflate_rl:
	mov	eax, DWORD PTR tv283[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1794 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1795 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx
$LN16@deflate_rl:

; 1796 :         }
; 1797 :         if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN17@deflate_rl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN27@deflate_rl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv304[ebp], edx
	jmp	SHORT $LN28@deflate_rl
$LN27@deflate_rl:
	mov	DWORD PTR tv304[ebp], 0
$LN28@deflate_rl:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv304[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN17@deflate_rl
	xor	eax, eax
	jmp	$LN1@deflate_rl
$LN17@deflate_rl:

; 1798 :     }

	jmp	$LN4@deflate_rl
$LN3@deflate_rl:

; 1799 :     FLUSH_BLOCK(s, flush == Z_FINISH);

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN29@deflate_rl
	mov	DWORD PTR tv315[ebp], 1
	jmp	SHORT $LN30@deflate_rl
$LN29@deflate_rl:
	mov	DWORD PTR tv315[ebp], 0
$LN30@deflate_rl:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN31@deflate_rl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv327[ebp], edx
	jmp	SHORT $LN32@deflate_rl
$LN31@deflate_rl:
	mov	DWORD PTR tv327[ebp], 0
$LN32@deflate_rl:
	mov	ecx, DWORD PTR tv315[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv327[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN19@deflate_rl
	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN33@deflate_rl
	mov	DWORD PTR tv338[ebp], 2
	jmp	SHORT $LN34@deflate_rl
$LN33@deflate_rl:
	mov	DWORD PTR tv338[ebp], 0
$LN34@deflate_rl:
	mov	eax, DWORD PTR tv338[ebp]
	jmp	SHORT $LN1@deflate_rl
$LN19@deflate_rl:

; 1800 :     return flush == Z_FINISH ? finish_done : block_done;

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN35@deflate_rl
	mov	DWORD PTR tv340[ebp], 3
	jmp	SHORT $LN36@deflate_rl
$LN35@deflate_rl:
	mov	DWORD PTR tv340[ebp], 1
$LN36@deflate_rl:
	mov	eax, DWORD PTR tv340[ebp]
$LN1@deflate_rl:

; 1801 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflate_slow
_TEXT	SEGMENT
tv471 = -96						; size = 4
tv484 = -92						; size = 4
tv482 = -92						; size = 4
tv459 = -92						; size = 4
tv456 = -92						; size = 4
tv391 = -92						; size = 4
tv378 = -92						; size = 4
tv330 = -92						; size = 4
tv310 = -92						; size = 4
tv271 = -92						; size = 4
tv260 = -92						; size = 4
tv243 = -92						; size = 4
_cc$1 = -22						; size = 1
_cc$2 = -21						; size = 1
_dist$3 = -20						; size = 2
_len$4 = -13						; size = 1
_max_insert$5 = -12					; size = 4
_bflush$ = -8						; size = 4
_hash_head$ = -4					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC					; COMDAT

; 1619 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
$LN4@deflate_sl:

; 1620 :     IPos hash_head;          /* head of hash chain */
; 1621 :     int bflush;              /* set if current block must be flushed */
; 1622 : 
; 1623 :     /* Process the input block. */
; 1624 :     for (;;) {
; 1625 :         /* Make sure that we always have enough lookahead, except
; 1626 :          * at the end of the input file. We need MAX_MATCH bytes
; 1627 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1628 :          * string following the next match.
; 1629 :          */
; 1630 :         if (s->lookahead < MIN_LOOKAHEAD) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN8@deflate_sl

; 1631 :             fill_window(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_fill_window
	add	esp, 4

; 1632 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN9@deflate_sl
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN9@deflate_sl

; 1633 :                 return need_more;

	xor	eax, eax
	jmp	$LN1@deflate_sl
$LN9@deflate_sl:

; 1634 :             }
; 1635 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN8@deflate_sl
	jmp	$LN3@deflate_sl
$LN8@deflate_sl:

; 1636 :         }
; 1637 : 
; 1638 :         /* Insert the string window[strstart .. strstart+2] in the
; 1639 :          * dictionary, and set hash_head to the head of the hash chain:
; 1640 :          */
; 1641 :         hash_head = NIL;

	mov	DWORD PTR _hash_head$[ebp], 0

; 1642 :         if (s->lookahead >= MIN_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 3
	jb	$LN11@deflate_sl

; 1643 :             INSERT_STRING(s, s->strstart, hash_head);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN11@deflate_sl:

; 1644 :         }
; 1645 : 
; 1646 :         /* Find the longest match, discarding those <= prev_length.
; 1647 :          */
; 1648 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+120], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+100], edx

; 1649 :         s->match_length = MIN_MATCH-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2

; 1650 : 
; 1651 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&

	cmp	DWORD PTR _hash_head$[ebp], 0
	je	SHORT $LN12@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+120]
	cmp	edx, DWORD PTR [ecx+128]
	jae	SHORT $LN12@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _hash_head$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, 262				; 00000106H
	cmp	ecx, eax
	ja	SHORT $LN12@deflate_sl

; 1652 :             s->strstart - hash_head <= MAX_DIST(s)) {
; 1653 :             /* To simplify the code, we prevent matches with the string
; 1654 :              * of window index 0 (in particular we have to avoid a match
; 1655 :              * of the string with itself at the start of the input file).
; 1656 :              */
; 1657 :             s->match_length = longest_match (s, hash_head);

	mov	eax, DWORD PTR _hash_head$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_longest_match
	add	esp, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], eax

; 1658 :             /* longest_match() sets match_start */
; 1659 : 
; 1660 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+96], 5
	ja	SHORT $LN12@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 1
	je	SHORT $LN14@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+96], 3
	jne	SHORT $LN12@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+112]
	cmp	edx, 4096				; 00001000H
	jbe	SHORT $LN12@deflate_sl
$LN14@deflate_sl:

; 1661 : #if TOO_FAR <= 32767
; 1662 :                 || (s->match_length == MIN_MATCH &&
; 1663 :                     s->strstart - s->match_start > TOO_FAR)
; 1664 : #endif
; 1665 :                 )) {
; 1666 : 
; 1667 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1668 :                  * but we will ignore the current match anyway.
; 1669 :                  */
; 1670 :                 s->match_length = MIN_MATCH-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2
$LN12@deflate_sl:

; 1671 :             }
; 1672 :         }
; 1673 :         /* If there was a match at the previous step and the current
; 1674 :          * match is not better, output the previous match:
; 1675 :          */
; 1676 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+120], 3
	jb	$LN15@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+96]
	cmp	edx, DWORD PTR [ecx+120]
	ja	$LN15@deflate_sl

; 1677 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	lea	ecx, DWORD PTR [ecx+eax-3]
	mov	DWORD PTR _max_insert$5[ebp], ecx

; 1678 :             /* Do not insert strings in hash table beyond this. */
; 1679 : 
; 1680 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1681 : 
; 1682 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 3
	mov	BYTE PTR _len$4[ebp], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	sub	ecx, DWORD PTR [edx+100]
	mov	WORD PTR _dist$3[ebp], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	mov	dx, WORD PTR _dist$3[ebp]
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _len$4[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	mov	ax, WORD PTR _dist$3[ebp]
	sub	ax, 1
	mov	WORD PTR _dist$3[ebp], ax
	movzx	eax, BYTE PTR _len$4[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+1176]
	add	ax, 1
	movzx	ecx, BYTE PTR _len$4[ebp]
	movzx	edx, BYTE PTR __length_code[ecx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx*4+1176], ax
	movzx	eax, WORD PTR _dist$3[ebp]
	cmp	eax, 256				; 00000100H
	jge	SHORT $LN27@deflate_sl
	movzx	ecx, WORD PTR _dist$3[ebp]
	movzx	edx, BYTE PTR __dist_code[ecx]
	mov	DWORD PTR tv243[ebp], edx
	jmp	SHORT $LN28@deflate_sl
$LN27@deflate_sl:
	movzx	eax, WORD PTR _dist$3[ebp]
	sar	eax, 7
	movzx	ecx, BYTE PTR __dist_code[eax+256]
	mov	DWORD PTR tv243[ebp], ecx
$LN28@deflate_sl:
	mov	edx, DWORD PTR tv243[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+edx*4+2440]
	add	cx, 1
	mov	edx, DWORD PTR tv243[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+edx*4+2440], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN29@deflate_sl
	mov	DWORD PTR tv260[ebp], 1
	jmp	SHORT $LN30@deflate_sl
$LN29@deflate_sl:
	mov	DWORD PTR tv260[ebp], 0
$LN30@deflate_sl:
	mov	eax, DWORD PTR tv260[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1683 :                            s->prev_length - MIN_MATCH, bflush);
; 1684 : 
; 1685 :             /* Insert in hash table all strings up to the end of the match.
; 1686 :              * strstart-1 and strstart are already inserted. If there is not
; 1687 :              * enough lookahead, the last two strings are not inserted in
; 1688 :              * the hash table.
; 1689 :              */
; 1690 :             s->lookahead -= s->prev_length-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+116]
	sub	eax, ecx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 1691 :             s->prev_length -= 2;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+120], ecx
$LN7@deflate_sl:

; 1692 :             do {
; 1693 :                 if (++s->strstart <= max_insert) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	DWORD PTR tv271[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv271[ebp]
	mov	DWORD PTR [edx+108], eax
	mov	ecx, DWORD PTR tv271[ebp]
	cmp	ecx, DWORD PTR _max_insert$5[ebp]
	ja	$LN5@deflate_sl

; 1694 :                     INSERT_STRING(s, s->strstart, hash_head);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN5@deflate_sl:

; 1695 :                 }
; 1696 :             } while (--s->prev_length != 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	sub	ecx, 1
	mov	DWORD PTR tv310[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv310[ebp]
	mov	DWORD PTR [edx+120], eax
	cmp	DWORD PTR tv310[ebp], 0
	jne	$LN7@deflate_sl

; 1697 :             s->match_available = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+104], 0

; 1698 :             s->match_length = MIN_MATCH-1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 2

; 1699 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1700 : 
; 1701 :             if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN18@deflate_sl
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN31@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv330[ebp], edx
	jmp	SHORT $LN32@deflate_sl
$LN31@deflate_sl:
	mov	DWORD PTR tv330[ebp], 0
$LN32@deflate_sl:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv330[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN18@deflate_sl
	xor	eax, eax
	jmp	$LN1@deflate_sl
$LN18@deflate_sl:
	jmp	$LN16@deflate_sl
$LN15@deflate_sl:

; 1702 : 
; 1703 :         } else if (s->match_available) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	$LN20@deflate_sl

; 1704 :             /* If there was no match at the previous position, output a
; 1705 :              * single literal. If there was a match but the current match
; 1706 :              * is longer, truncate the previous match to a single literal.
; 1707 :              */
; 1708 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 1709 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	cl, BYTE PTR [eax+ecx-1]
	mov	BYTE PTR _cc$2[ebp], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _cc$2[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, BYTE PTR _cc$2[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	movzx	eax, BYTE PTR _cc$2[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN33@deflate_sl
	mov	DWORD PTR tv378[ebp], 1
	jmp	SHORT $LN34@deflate_sl
$LN33@deflate_sl:
	mov	DWORD PTR tv378[ebp], 0
$LN34@deflate_sl:
	mov	eax, DWORD PTR tv378[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1710 :             if (bflush) {

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN22@deflate_sl

; 1711 :                 FLUSH_BLOCK_ONLY(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN35@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv391[ebp], edx
	jmp	SHORT $LN36@deflate_sl
$LN35@deflate_sl:
	mov	DWORD PTR tv391[ebp], 0
$LN36@deflate_sl:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv391[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
$LN22@deflate_sl:

; 1712 :             }
; 1713 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1714 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1715 :             if (s->strm->avail_out == 0) return need_more;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN23@deflate_sl
	xor	eax, eax
	jmp	$LN1@deflate_sl
$LN23@deflate_sl:

; 1716 :         } else {

	jmp	SHORT $LN16@deflate_sl
$LN20@deflate_sl:

; 1717 :             /* There is no previous match to compare with, wait for
; 1718 :              * the next step to decide.
; 1719 :              */
; 1720 :             s->match_available = 1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+104], 1

; 1721 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1722 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx
$LN16@deflate_sl:

; 1723 :         }
; 1724 :     }

	jmp	$LN4@deflate_sl
$LN3@deflate_sl:

; 1725 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 1726 :     if (s->match_available) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	$LN24@deflate_sl

; 1727 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 1728 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	cl, BYTE PTR [eax+ecx-1]
	mov	BYTE PTR _cc$1[ebp], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _cc$1[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, BYTE PTR _cc$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	movzx	eax, BYTE PTR _cc$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN37@deflate_sl
	mov	DWORD PTR tv456[ebp], 1
	jmp	SHORT $LN38@deflate_sl
$LN37@deflate_sl:
	mov	DWORD PTR tv456[ebp], 0
$LN38@deflate_sl:
	mov	eax, DWORD PTR tv456[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1729 :         s->match_available = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+104], 0
$LN24@deflate_sl:

; 1730 :     }
; 1731 :     FLUSH_BLOCK(s, flush == Z_FINISH);

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN39@deflate_sl
	mov	DWORD PTR tv459[ebp], 1
	jmp	SHORT $LN40@deflate_sl
$LN39@deflate_sl:
	mov	DWORD PTR tv459[ebp], 0
$LN40@deflate_sl:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN41@deflate_sl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv471[ebp], edx
	jmp	SHORT $LN42@deflate_sl
$LN41@deflate_sl:
	mov	DWORD PTR tv471[ebp], 0
$LN42@deflate_sl:
	mov	ecx, DWORD PTR tv459[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv471[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN25@deflate_sl
	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN43@deflate_sl
	mov	DWORD PTR tv482[ebp], 2
	jmp	SHORT $LN44@deflate_sl
$LN43@deflate_sl:
	mov	DWORD PTR tv482[ebp], 0
$LN44@deflate_sl:
	mov	eax, DWORD PTR tv482[ebp]
	jmp	SHORT $LN1@deflate_sl
$LN25@deflate_sl:

; 1732 :     return flush == Z_FINISH ? finish_done : block_done;

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN45@deflate_sl
	mov	DWORD PTR tv484[ebp], 3
	jmp	SHORT $LN46@deflate_sl
$LN45@deflate_sl:
	mov	DWORD PTR tv484[ebp], 1
$LN46@deflate_sl:
	mov	eax, DWORD PTR tv484[ebp]
$LN1@deflate_sl:

; 1733 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflate_fast
_TEXT	SEGMENT
tv397 = -92						; size = 4
tv410 = -88						; size = 4
tv408 = -88						; size = 4
tv385 = -88						; size = 4
tv374 = -88						; size = 4
tv353 = -88						; size = 4
tv288 = -88						; size = 4
tv233 = -88						; size = 4
tv216 = -88						; size = 4
_cc$1 = -17						; size = 1
_dist$2 = -16						; size = 2
_len$3 = -9						; size = 1
_bflush$ = -8						; size = 4
_hash_head$ = -4					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC					; COMDAT

; 1523 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
$LN4@deflate_fa:

; 1524 :     IPos hash_head;       /* head of the hash chain */
; 1525 :     int bflush;           /* set if current block must be flushed */
; 1526 : 
; 1527 :     for (;;) {
; 1528 :         /* Make sure that we always have enough lookahead, except
; 1529 :          * at the end of the input file. We need MAX_MATCH bytes
; 1530 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1531 :          * string following the next match.
; 1532 :          */
; 1533 :         if (s->lookahead < MIN_LOOKAHEAD) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN8@deflate_fa

; 1534 :             fill_window(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_fill_window
	add	esp, 4

; 1535 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN9@deflate_fa
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN9@deflate_fa

; 1536 :                 return need_more;

	xor	eax, eax
	jmp	$LN1@deflate_fa
$LN9@deflate_fa:

; 1537 :             }
; 1538 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN8@deflate_fa
	jmp	$LN3@deflate_fa
$LN8@deflate_fa:

; 1539 :         }
; 1540 : 
; 1541 :         /* Insert the string window[strstart .. strstart+2] in the
; 1542 :          * dictionary, and set hash_head to the head of the hash chain:
; 1543 :          */
; 1544 :         hash_head = NIL;

	mov	DWORD PTR _hash_head$[ebp], 0

; 1545 :         if (s->lookahead >= MIN_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 3
	jb	$LN11@deflate_fa

; 1546 :             INSERT_STRING(s, s->strstart, hash_head);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx
$LN11@deflate_fa:

; 1547 :         }
; 1548 : 
; 1549 :         /* Find the longest match, discarding those <= prev_length.
; 1550 :          * At this point we have always match_length < MIN_MATCH
; 1551 :          */
; 1552 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

	cmp	DWORD PTR _hash_head$[ebp], 0
	je	SHORT $LN12@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _hash_head$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, 262				; 00000106H
	cmp	ecx, eax
	ja	SHORT $LN12@deflate_fa

; 1553 :             /* To simplify the code, we prevent matches with the string
; 1554 :              * of window index 0 (in particular we have to avoid a match
; 1555 :              * of the string with itself at the start of the input file).
; 1556 :              */
; 1557 :             s->match_length = longest_match (s, hash_head);

	mov	eax, DWORD PTR _hash_head$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_longest_match
	add	esp, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], eax
$LN12@deflate_fa:

; 1558 :             /* longest_match() sets match_start */
; 1559 :         }
; 1560 :         if (s->match_length >= MIN_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+96], 3
	jb	$LN13@deflate_fa

; 1561 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1562 : 
; 1563 :             _tr_tally_dist(s, s->strstart - s->match_start,

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 3
	mov	BYTE PTR _len$3[ebp], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+112]
	mov	WORD PTR _dist$2[ebp], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	mov	dx, WORD PTR _dist$2[ebp]
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _len$3[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	mov	ax, WORD PTR _dist$2[ebp]
	sub	ax, 1
	mov	WORD PTR _dist$2[ebp], ax
	movzx	eax, BYTE PTR _len$3[ebp]
	movzx	ecx, BYTE PTR __length_code[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*4+1176]
	add	ax, 1
	movzx	ecx, BYTE PTR _len$3[ebp]
	movzx	edx, BYTE PTR __length_code[ecx]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx*4+1176], ax
	movzx	eax, WORD PTR _dist$2[ebp]
	cmp	eax, 256				; 00000100H
	jge	SHORT $LN21@deflate_fa
	movzx	ecx, WORD PTR _dist$2[ebp]
	movzx	edx, BYTE PTR __dist_code[ecx]
	mov	DWORD PTR tv216[ebp], edx
	jmp	SHORT $LN22@deflate_fa
$LN21@deflate_fa:
	movzx	eax, WORD PTR _dist$2[ebp]
	sar	eax, 7
	movzx	ecx, BYTE PTR __dist_code[eax+256]
	mov	DWORD PTR tv216[ebp], ecx
$LN22@deflate_fa:
	mov	edx, DWORD PTR tv216[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax+edx*4+2440]
	add	cx, 1
	mov	edx, DWORD PTR tv216[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax+edx*4+2440], cx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN23@deflate_fa
	mov	DWORD PTR tv233[ebp], 1
	jmp	SHORT $LN24@deflate_fa
$LN23@deflate_fa:
	mov	DWORD PTR tv233[ebp], 0
$LN24@deflate_fa:
	mov	eax, DWORD PTR tv233[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1564 :                            s->match_length - MIN_MATCH, bflush);
; 1565 : 
; 1566 :             s->lookahead -= s->match_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+116]
	sub	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], edx

; 1567 : 
; 1568 :             /* Insert new strings in the hash table only if the match length
; 1569 :              * is not too large. This saves time but degrades compression.
; 1570 :              */
; 1571 : #ifndef FASTEST
; 1572 :             if (s->match_length <= s->max_insert_length &&

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+96]
	cmp	edx, DWORD PTR [ecx+128]
	ja	$LN15@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 3
	jb	$LN15@deflate_fa

; 1573 :                 s->lookahead >= MIN_MATCH) {
; 1574 :                 s->match_length--; /* string at strstart already in table */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], ecx
$LN7@deflate_fa:

; 1575 :                 do {
; 1576 :                     s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1577 :                     INSERT_STRING(s, s->strstart, hash_head);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+108]
	and	ecx, DWORD PTR [esi+52]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [esi+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	and	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _hash_head$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [edx+108]
	mov	WORD PTR [eax+ecx*2], dx

; 1578 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1579 :                      * always MIN_MATCH bytes ahead.
; 1580 :                      */
; 1581 :                 } while (--s->match_length != 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	sub	ecx, 1
	mov	DWORD PTR tv288[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR tv288[ebp]
	mov	DWORD PTR [edx+96], eax
	cmp	DWORD PTR tv288[ebp], 0
	jne	$LN7@deflate_fa

; 1582 :                 s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1583 :             } else

	jmp	SHORT $LN16@deflate_fa
$LN15@deflate_fa:

; 1584 : #endif
; 1585 :             {
; 1586 :                 s->strstart += s->match_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+96]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 1587 :                 s->match_length = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], 0

; 1588 :                 s->ins_h = s->window[s->strstart];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+ecx]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 1589 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+1]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
$LN16@deflate_fa:

; 1590 : #if MIN_MATCH != 3
; 1591 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1592 : #endif
; 1593 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1594 :                  * matter since it will be recomputed at next deflate call.
; 1595 :                  */
; 1596 :             }
; 1597 :         } else {

	jmp	$LN14@deflate_fa
$LN13@deflate_fa:

; 1598 :             /* No match, output a literal byte */
; 1599 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1600 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	cl, BYTE PTR [eax+ecx]
	mov	BYTE PTR _cc$1[ebp], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5796]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+5784]
	mov	dl, BYTE PTR _cc$1[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5792]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5792], ecx
	movzx	eax, BYTE PTR _cc$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*4+148]
	add	dx, 1
	movzx	eax, BYTE PTR _cc$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+eax*4+148], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+5792], ecx
	jne	SHORT $LN25@deflate_fa
	mov	DWORD PTR tv353[ebp], 1
	jmp	SHORT $LN26@deflate_fa
$LN25@deflate_fa:
	mov	DWORD PTR tv353[ebp], 0
$LN26@deflate_fa:
	mov	eax, DWORD PTR tv353[ebp]
	mov	DWORD PTR _bflush$[ebp], eax

; 1601 :             s->lookahead--;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1602 :             s->strstart++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx
$LN14@deflate_fa:

; 1603 :         }
; 1604 :         if (bflush) FLUSH_BLOCK(s, 0);

	cmp	DWORD PTR _bflush$[ebp], 0
	je	SHORT $LN17@deflate_fa
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN27@deflate_fa
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv374[ebp], edx
	jmp	SHORT $LN28@deflate_fa
$LN27@deflate_fa:
	mov	DWORD PTR tv374[ebp], 0
$LN28@deflate_fa:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv374[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN17@deflate_fa
	xor	eax, eax
	jmp	$LN1@deflate_fa
$LN17@deflate_fa:

; 1605 :     }

	jmp	$LN4@deflate_fa
$LN3@deflate_fa:

; 1606 :     FLUSH_BLOCK(s, flush == Z_FINISH);

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN29@deflate_fa
	mov	DWORD PTR tv385[ebp], 1
	jmp	SHORT $LN30@deflate_fa
$LN29@deflate_fa:
	mov	DWORD PTR tv385[ebp], 0
$LN30@deflate_fa:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN31@deflate_fa
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv397[ebp], edx
	jmp	SHORT $LN32@deflate_fa
$LN31@deflate_fa:
	mov	DWORD PTR tv397[ebp], 0
$LN32@deflate_fa:
	mov	ecx, DWORD PTR tv385[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv397[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN19@deflate_fa
	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN33@deflate_fa
	mov	DWORD PTR tv408[ebp], 2
	jmp	SHORT $LN34@deflate_fa
$LN33@deflate_fa:
	mov	DWORD PTR tv408[ebp], 0
$LN34@deflate_fa:
	mov	eax, DWORD PTR tv408[ebp]
	jmp	SHORT $LN1@deflate_fa
$LN19@deflate_fa:

; 1607 :     return flush == Z_FINISH ? finish_done : block_done;

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN35@deflate_fa
	mov	DWORD PTR tv410[ebp], 3
	jmp	SHORT $LN36@deflate_fa
$LN35@deflate_fa:
	mov	DWORD PTR tv410[ebp], 1
$LN36@deflate_fa:
	mov	eax, DWORD PTR tv410[ebp]
$LN1@deflate_fa:

; 1608 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflate_stored
_TEXT	SEGMENT
tv185 = -80						; size = 4
tv198 = -76						; size = 4
tv196 = -76						; size = 4
tv173 = -76						; size = 4
tv162 = -76						; size = 4
tv135 = -76						; size = 4
_max_start$ = -8					; size = 4
_max_block_size$ = -4					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC					; COMDAT

; 1465 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 1466 :     /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
; 1467 :      * to pending_buf_size, and each stored block has a 5 byte header:
; 1468 :      */
; 1469 :     ulg max_block_size = 0xffff;

	mov	DWORD PTR _max_block_size$[ebp], 65535	; 0000ffffH

; 1470 :     ulg max_start;
; 1471 : 
; 1472 :     if (max_block_size > s->pending_buf_size - 5) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 5
	cmp	DWORD PTR _max_block_size$[ebp], ecx
	jbe	SHORT $LN4@deflate_st

; 1473 :         max_block_size = s->pending_buf_size - 5;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 5
	mov	DWORD PTR _max_block_size$[ebp], ecx
$LN4@deflate_st:

; 1474 :     }
; 1475 : 
; 1476 :     /* Copy as much as possible from input to output: */
; 1477 :     for (;;) {
; 1478 :         /* Fill the window as much as possible: */
; 1479 :         if (s->lookahead <= 1) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 1
	ja	SHORT $LN6@deflate_st

; 1480 : 
; 1481 :             Assert(s->strstart < s->w_size+MAX_DIST(s) ||
; 1482 :                    s->block_start >= (long)s->w_size, "slide too late");
; 1483 : 
; 1484 :             fill_window(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_fill_window
	add	esp, 4

; 1485 :             if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN7@deflate_st
	cmp	DWORD PTR _flush$[ebp], 0
	jne	SHORT $LN7@deflate_st
	xor	eax, eax
	jmp	$LN1@deflate_st
$LN7@deflate_st:

; 1486 : 
; 1487 :             if (s->lookahead == 0) break; /* flush the current block */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN6@deflate_st
	jmp	$LN3@deflate_st
$LN6@deflate_st:

; 1488 :         }
; 1489 :         Assert(s->block_start >= 0L, "block gone");
; 1490 : 
; 1491 :         s->strstart += s->lookahead;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+116]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 1492 :         s->lookahead = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+116], 0

; 1493 : 
; 1494 :         /* Emit a stored block if pending_buf will be full: */
; 1495 :         max_start = s->block_start + max_block_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	add	ecx, DWORD PTR _max_block_size$[ebp]
	mov	DWORD PTR _max_start$[ebp], ecx

; 1496 :         if (s->strstart == 0 || (ulg)s->strstart >= max_start) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN10@deflate_st
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	cmp	ecx, DWORD PTR _max_start$[ebp]
	jb	$LN9@deflate_st
$LN10@deflate_st:

; 1497 :             /* strstart == 0 is possible when wraparound on 16-bit machine */
; 1498 :             s->lookahead = (uInt)(s->strstart - max_start);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _max_start$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1499 :             s->strstart = (uInt)max_start;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _max_start$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 1500 :             FLUSH_BLOCK(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN16@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv135[ebp], edx
	jmp	SHORT $LN17@deflate_st
$LN16@deflate_st:
	mov	DWORD PTR tv135[ebp], 0
$LN17@deflate_st:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN9@deflate_st
	xor	eax, eax
	jmp	$LN1@deflate_st
$LN9@deflate_st:

; 1501 :         }
; 1502 :         /* Flush if we may have to slide, otherwise block_start may become
; 1503 :          * negative and the data will be gone:
; 1504 :          */
; 1505 :         if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+108]
	sub	edx, DWORD PTR [ecx+92]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 262				; 00000106H
	cmp	edx, ecx
	jb	SHORT $LN12@deflate_st

; 1506 :             FLUSH_BLOCK(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN18@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv162[ebp], edx
	jmp	SHORT $LN19@deflate_st
$LN18@deflate_st:
	mov	DWORD PTR tv162[ebp], 0
$LN19@deflate_st:
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	sub	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR tv162[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN12@deflate_st
	xor	eax, eax
	jmp	$LN1@deflate_st
$LN12@deflate_st:

; 1507 :         }
; 1508 :     }

	jmp	$LN4@deflate_st
$LN3@deflate_st:

; 1509 :     FLUSH_BLOCK(s, flush == Z_FINISH);

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN20@deflate_st
	mov	DWORD PTR tv173[ebp], 1
	jmp	SHORT $LN21@deflate_st
$LN20@deflate_st:
	mov	DWORD PTR tv173[ebp], 0
$LN21@deflate_st:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jl	SHORT $LN22@deflate_st
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+92]
	mov	DWORD PTR tv185[ebp], edx
	jmp	SHORT $LN23@deflate_st
$LN22@deflate_st:
	mov	DWORD PTR tv185[ebp], 0
$LN23@deflate_st:
	mov	ecx, DWORD PTR tv173[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	sub	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR tv185[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_flush_block
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+92], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_flush_pending
	add	esp, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN14@deflate_st
	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN24@deflate_st
	mov	DWORD PTR tv196[ebp], 2
	jmp	SHORT $LN25@deflate_st
$LN24@deflate_st:
	mov	DWORD PTR tv196[ebp], 0
$LN25@deflate_st:
	mov	eax, DWORD PTR tv196[ebp]
	jmp	SHORT $LN1@deflate_st
$LN14@deflate_st:

; 1510 :     return flush == Z_FINISH ? finish_done : block_done;

	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN26@deflate_st
	mov	DWORD PTR tv198[ebp], 3
	jmp	SHORT $LN27@deflate_st
$LN26@deflate_st:
	mov	DWORD PTR tv198[ebp], 1
$LN27@deflate_st:
	mov	eax, DWORD PTR tv198[ebp]
$LN1@deflate_st:

; 1511 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _fill_window
_TEXT	SEGMENT
tv149 = -96						; size = 4
tv138 = -96						; size = 4
_init$1 = -28						; size = 4
_curr$2 = -24						; size = 4
_wsize$ = -20						; size = 4
_more$ = -16						; size = 4
_p$ = -12						; size = 4
_m$ = -8						; size = 4
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_fill_window PROC					; COMDAT

; 1307 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi

; 1308 :     register unsigned n, m;
; 1309 :     register Posf *p;
; 1310 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1311 :     uInt wsize = s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _wsize$[ebp], ecx
$LN4@fill_windo:

; 1312 : 
; 1313 :     do {
; 1314 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+60]
	sub	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _s$[ebp]
	sub	edx, DWORD PTR [eax+108]
	mov	DWORD PTR _more$[ebp], edx

; 1315 : 
; 1316 :         /* Deal with !@#$% 64K limit: */
; 1317 :         if (sizeof(int) <= 2) {

	xor	eax, eax
	je	SHORT $LN11@fill_windo

; 1318 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {

	cmp	DWORD PTR _more$[ebp], 0
	jne	SHORT $LN12@fill_windo
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	jne	SHORT $LN12@fill_windo
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN12@fill_windo

; 1319 :                 more = wsize;

	mov	eax, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _more$[ebp], eax
	jmp	SHORT $LN11@fill_windo
$LN12@fill_windo:

; 1320 : 
; 1321 :             } else if (more == (unsigned)(-1)) {

	cmp	DWORD PTR _more$[ebp], -1
	jne	SHORT $LN11@fill_windo

; 1322 :                 /* Very unlikely, but possible on 16 bit machine if
; 1323 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1324 :                  */
; 1325 :                 more--;

	mov	eax, DWORD PTR _more$[ebp]
	sub	eax, 1
	mov	DWORD PTR _more$[ebp], eax
$LN11@fill_windo:

; 1326 :             }
; 1327 :         }
; 1328 : 
; 1329 :         /* If the window is almost full and there is insufficient lookahead,
; 1330 :          * move the upper half to the lower one to make room in the upper half.
; 1331 :          */
; 1332 :         if (s->strstart >= wsize+MAX_DIST(s)) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _wsize$[ebp]
	lea	eax, DWORD PTR [edx+ecx-262]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+108], eax
	jb	$LN15@fill_windo

; 1333 : 
; 1334 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize);

	mov	eax, DWORD PTR _wsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	add	edx, DWORD PTR _wsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1335 :             s->match_start -= wsize;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+112], ecx

; 1336 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 1337 :             s->block_start -= (long) wsize;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+92], ecx

; 1338 : 
; 1339 :             /* Slide the hash table (could be avoided with 32 bit values
; 1340 :                at the expense of memory usage). We slide even when level == 0
; 1341 :                to keep the hash table consistent if we switch back to level > 0
; 1342 :                later. (Using level 0 permanently is not an optimal usage of
; 1343 :                zlib, so we don't care about this pathological case.)
; 1344 :              */
; 1345 :             n = s->hash_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _n$[ebp], ecx

; 1346 :             p = &s->head[n];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _p$[ebp], eax
$LN7@fill_windo:

; 1347 :             do {
; 1348 :                 m = *--p;

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _m$[ebp], edx

; 1349 :                 *p = (Pos)(m >= wsize ? m-wsize : NIL);

	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _wsize$[ebp]
	jb	SHORT $LN26@fill_windo
	mov	ecx, DWORD PTR _m$[ebp]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR tv138[ebp], ecx
	jmp	SHORT $LN27@fill_windo
$LN26@fill_windo:
	mov	DWORD PTR tv138[ebp], 0
$LN27@fill_windo:
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR tv138[ebp]
	mov	WORD PTR [edx], ax

; 1350 :             } while (--n);

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	jne	SHORT $LN7@fill_windo

; 1351 : 
; 1352 :             n = wsize;

	mov	eax, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _n$[ebp], eax

; 1353 : #ifndef FASTEST
; 1354 :             p = &s->prev[n];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _p$[ebp], eax
$LN10@fill_windo:

; 1355 :             do {
; 1356 :                 m = *--p;

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _m$[ebp], edx

; 1357 :                 *p = (Pos)(m >= wsize ? m-wsize : NIL);

	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _wsize$[ebp]
	jb	SHORT $LN28@fill_windo
	mov	ecx, DWORD PTR _m$[ebp]
	sub	ecx, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR tv149[ebp], ecx
	jmp	SHORT $LN29@fill_windo
$LN28@fill_windo:
	mov	DWORD PTR tv149[ebp], 0
$LN29@fill_windo:
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR tv149[ebp]
	mov	WORD PTR [edx], ax

; 1358 :                 /* If n is not on any hash chain, prev[n] is garbage but
; 1359 :                  * its value will never be used.
; 1360 :                  */
; 1361 :             } while (--n);

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	jne	SHORT $LN10@fill_windo

; 1362 : #endif
; 1363 :             more += wsize;

	mov	eax, DWORD PTR _more$[ebp]
	add	eax, DWORD PTR _wsize$[ebp]
	mov	DWORD PTR _more$[ebp], eax
$LN15@fill_windo:

; 1364 :         }
; 1365 :         if (s->strm->avail_in == 0) return;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN16@fill_windo
	jmp	$LN1@fill_windo
$LN16@fill_windo:

; 1366 : 
; 1367 :         /* If there was no sliding:
; 1368 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1369 :          *    more == window_size - lookahead - strstart
; 1370 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1371 :          * => more >= window_size - 2*WSIZE + 2
; 1372 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1373 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1374 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1375 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1376 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1377 :          */
; 1378 :         Assert(more >= 2, "more < 2");
; 1379 : 
; 1380 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

	mov	eax, DWORD PTR _more$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+108]
	mov	ecx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [ecx+116]
	push	edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_read_buf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _n$[ebp], eax

; 1381 :         s->lookahead += n;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	add	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+116], ecx

; 1382 : 
; 1383 :         /* Initialize the hash value now that we have some input: */
; 1384 :         if (s->lookahead >= MIN_MATCH) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 3
	jb	SHORT $LN2@fill_windo

; 1385 :             s->ins_h = s->window[s->strstart];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+ecx]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 1386 :             UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+56]
	movzx	ecx, BYTE PTR [eax+ecx+1]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
$LN2@fill_windo:

; 1387 : #if MIN_MATCH != 3
; 1388 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1389 : #endif
; 1390 :         }
; 1391 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1392 :          * but this is not important since only literal bytes will be emitted.
; 1393 :          */
; 1394 : 
; 1395 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 262		; 00000106H
	jae	SHORT $LN3@fill_windo
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+4], 0
	jne	$LN4@fill_windo
$LN3@fill_windo:

; 1396 : 
; 1397 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1398 :      * written, then zero those bytes in order to avoid memory check reports of
; 1399 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1400 :      * the longest match routines.  Update the high water mark for the next
; 1401 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1402 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1403 :      */
; 1404 :     if (s->high_water < s->window_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+5824]
	cmp	edx, DWORD PTR [ecx+60]
	jae	$LN1@fill_windo

; 1405 :         ulg curr = s->strstart + (ulg)(s->lookahead);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+116]
	mov	DWORD PTR _curr$2[ebp], ecx

; 1406 :         ulg init;
; 1407 : 
; 1408 :         if (s->high_water < curr) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5824]
	cmp	ecx, DWORD PTR _curr$2[ebp]
	jae	SHORT $LN20@fill_windo

; 1409 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1410 :              * bytes or up to end of window, whichever is less.
; 1411 :              */
; 1412 :             init = s->window_size - curr;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	sub	ecx, DWORD PTR _curr$2[ebp]
	mov	DWORD PTR _init$1[ebp], ecx

; 1413 :             if (init > WIN_INIT)

	cmp	DWORD PTR _init$1[ebp], 258		; 00000102H
	jbe	SHORT $LN22@fill_windo

; 1414 :                 init = WIN_INIT;

	mov	DWORD PTR _init$1[ebp], 258		; 00000102H
$LN22@fill_windo:

; 1415 :             zmemzero(s->window + curr, (unsigned)init);

	mov	eax, DWORD PTR _init$1[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	add	edx, DWORD PTR _curr$2[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1416 :             s->high_water = curr + init;

	mov	eax, DWORD PTR _curr$2[ebp]
	add	eax, DWORD PTR _init$1[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5824], eax

; 1417 :         }

	jmp	$LN1@fill_windo
$LN20@fill_windo:

; 1418 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

	mov	eax, DWORD PTR _curr$2[ebp]
	add	eax, 258				; 00000102H
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+5824], eax
	jae	SHORT $LN1@fill_windo

; 1419 :             /* High water mark at or above current data, but below current data
; 1420 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1421 :              * to end of window, whichever is less.
; 1422 :              */
; 1423 :             init = (ulg)curr + WIN_INIT - s->high_water;

	mov	eax, DWORD PTR _curr$2[ebp]
	add	eax, 258				; 00000102H
	mov	ecx, DWORD PTR _s$[ebp]
	sub	eax, DWORD PTR [ecx+5824]
	mov	DWORD PTR _init$1[ebp], eax

; 1424 :             if (init > s->window_size - s->high_water)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+60]
	sub	edx, DWORD PTR [ecx+5824]
	cmp	DWORD PTR _init$1[ebp], edx
	jbe	SHORT $LN24@fill_windo

; 1425 :                 init = s->window_size - s->high_water;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+60]
	sub	edx, DWORD PTR [ecx+5824]
	mov	DWORD PTR _init$1[ebp], edx
$LN24@fill_windo:

; 1426 :             zmemzero(s->window + s->high_water, (unsigned)init);

	mov	eax, DWORD PTR _init$1[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+5824]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1427 :             s->high_water += init;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5824]
	add	ecx, DWORD PTR _init$1[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+5824], ecx
$LN1@fill_windo:

; 1428 :         }
; 1429 :     }
; 1430 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflateInit2_@32
_TEXT	SEGMENT
_overlay$ = -12						; size = 4
_wrap$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC					; COMDAT

; 220  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 221  :     deflate_state *s;
; 222  :     int wrap = 1;

	mov	DWORD PTR _wrap$[ebp], 1

; 223  :     static const char my_version[] = ZLIB_VERSION;
; 224  : 
; 225  :     ushf *overlay;
; 226  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 227  :      * output size for (length,distance) codes is <= 24 bits.
; 228  :      */
; 229  : 
; 230  :     if (version == Z_NULL || version[0] != my_version[0] ||

	cmp	DWORD PTR _version$[ebp], 0
	je	SHORT $LN3@deflateIni
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _version$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	ecx, BYTE PTR ?my_version@?1??deflateInit2_@@9@9[edx]
	cmp	eax, ecx
	jne	SHORT $LN3@deflateIni
	cmp	DWORD PTR _stream_size$[ebp], 56	; 00000038H
	je	SHORT $LN2@deflateIni
$LN3@deflateIni:

; 231  :         stream_size != sizeof(z_stream)) {
; 232  :         return Z_VERSION_ERROR;

	mov	eax, -6					; fffffffaH
	jmp	$LN1@deflateIni
$LN2@deflateIni:

; 233  :     }
; 234  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	jne	SHORT $LN4@deflateIni
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateIni
$LN4@deflateIni:

; 235  : 
; 236  :     strm->msg = Z_NULL;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], 0

; 237  :     if (strm->zalloc == (alloc_func)0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN5@deflateIni

; 238  :         strm->zalloc = zcalloc;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _zcalloc

; 239  :         strm->opaque = (voidpf)0;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+40], 0
$LN5@deflateIni:

; 240  :     }
; 241  :     if (strm->zfree == (free_func)0) strm->zfree = zcfree;

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN6@deflateIni
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _zcfree
$LN6@deflateIni:

; 242  : 
; 243  : #ifdef FASTEST
; 244  :     if (level != 0) level = 1;
; 245  : #else
; 246  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

	cmp	DWORD PTR _level$[ebp], -1
	jne	SHORT $LN7@deflateIni
	mov	DWORD PTR _level$[ebp], 6
$LN7@deflateIni:

; 247  : #endif
; 248  : 
; 249  :     if (windowBits < 0) { /* suppress zlib wrapper */

	cmp	DWORD PTR _windowBits$[ebp], 0
	jge	SHORT $LN8@deflateIni

; 250  :         wrap = 0;

	mov	DWORD PTR _wrap$[ebp], 0

; 251  :         windowBits = -windowBits;

	mov	eax, DWORD PTR _windowBits$[ebp]
	neg	eax
	mov	DWORD PTR _windowBits$[ebp], eax

; 252  :     }

	jmp	SHORT $LN9@deflateIni
$LN8@deflateIni:

; 253  : #ifdef GZIP
; 254  :     else if (windowBits > 15) {

	cmp	DWORD PTR _windowBits$[ebp], 15		; 0000000fH
	jle	SHORT $LN9@deflateIni

; 255  :         wrap = 2;       /* write gzip wrapper instead */

	mov	DWORD PTR _wrap$[ebp], 2

; 256  :         windowBits -= 16;

	mov	eax, DWORD PTR _windowBits$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _windowBits$[ebp], eax
$LN9@deflateIni:

; 257  :     }
; 258  : #endif
; 259  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 260  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 261  :         strategy < 0 || strategy > Z_FIXED) {

	cmp	DWORD PTR _memLevel$[ebp], 1
	jl	SHORT $LN12@deflateIni
	cmp	DWORD PTR _memLevel$[ebp], 9
	jg	SHORT $LN12@deflateIni
	cmp	DWORD PTR _method$[ebp], 8
	jne	SHORT $LN12@deflateIni
	cmp	DWORD PTR _windowBits$[ebp], 8
	jl	SHORT $LN12@deflateIni
	cmp	DWORD PTR _windowBits$[ebp], 15		; 0000000fH
	jg	SHORT $LN12@deflateIni
	cmp	DWORD PTR _level$[ebp], 0
	jl	SHORT $LN12@deflateIni
	cmp	DWORD PTR _level$[ebp], 9
	jg	SHORT $LN12@deflateIni
	cmp	DWORD PTR _strategy$[ebp], 0
	jl	SHORT $LN12@deflateIni
	cmp	DWORD PTR _strategy$[ebp], 4
	jle	SHORT $LN11@deflateIni
$LN12@deflateIni:

; 262  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateIni
$LN11@deflateIni:

; 263  :     }
; 264  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

	cmp	DWORD PTR _windowBits$[ebp], 8
	jne	SHORT $LN13@deflateIni
	mov	DWORD PTR _windowBits$[ebp], 9
$LN13@deflateIni:

; 265  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

	push	5828					; 000016c4H
	push	1
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _s$[ebp], eax

; 266  :     if (s == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN14@deflateIni
	mov	eax, -4					; fffffffcH
	jmp	$LN1@deflateIni
$LN14@deflateIni:

; 267  :     strm->state = (struct internal_state FAR *)s;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 268  :     s->strm = strm;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax], ecx

; 269  : 
; 270  :     s->wrap = wrap;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _wrap$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 271  :     s->gzhead = Z_NULL;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+28], 0

; 272  :     s->w_bits = windowBits;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _windowBits$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 273  :     s->w_size = 1 << s->w_bits;

	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+48]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+44], edx

; 274  :     s->w_mask = s->w_size - 1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+52], ecx

; 275  : 
; 276  :     s->hash_bits = memLevel + 7;

	mov	eax, DWORD PTR _memLevel$[ebp]
	add	eax, 7
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+80], eax

; 277  :     s->hash_size = 1 << s->hash_bits;

	mov	eax, DWORD PTR _s$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+80]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+76], edx

; 278  :     s->hash_mask = s->hash_size - 1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	sub	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+84], ecx

; 279  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+80]
	add	eax, 2
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+88], eax

; 280  : 
; 281  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

	push	2
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 282  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 283  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 284  : 
; 285  :     s->high_water = 0;      /* nothing written to s->window yet */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5824], 0

; 286  : 
; 287  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	mov	ecx, DWORD PTR _memLevel$[ebp]
	add	ecx, 6
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5788], eax

; 288  : 
; 289  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

	push	4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _overlay$[ebp], eax

; 290  :     s->pending_buf = (uchf *) overlay;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 291  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	shl	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 292  : 
; 293  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN16@deflateIni
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN16@deflateIni
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN16@deflateIni
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN15@deflateIni
$LN16@deflateIni:

; 294  :         s->pending_buf == Z_NULL) {
; 295  :         s->status = FINISH_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 666			; 0000029aH

; 296  :         strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _z_errmsg[ecx]
	mov	DWORD PTR [edx+24], eax

; 297  :         deflateEnd (strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateEnd@4

; 298  :         return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN1@deflateIni
$LN15@deflateIni:

; 299  :     }
; 300  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	shr	ecx, 1
	mov	edx, DWORD PTR _overlay$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+5796], eax

; 301  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+5788], 3
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+5784], ecx

; 302  : 
; 303  :     s->level = level;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _level$[ebp]
	mov	DWORD PTR [eax+132], ecx

; 304  :     s->strategy = strategy;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strategy$[ebp]
	mov	DWORD PTR [eax+136], ecx

; 305  :     s->method = (Byte)method;

	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR _method$[ebp]
	mov	BYTE PTR [eax+36], cl

; 306  : 
; 307  :     return deflateReset(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateReset@4
$LN1@deflateIni:

; 308  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflateInit_@16
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC					; COMDAT

; 203  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 204  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,

	mov	eax, DWORD PTR _stream_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _version$[ebp]
	push	ecx
	push	0
	push	8
	push	15					; 0000000fH
	push	8
	mov	edx, DWORD PTR _level$[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflateInit2_@32

; 205  :                          Z_DEFAULT_STRATEGY, version, stream_size);
; 206  :     /* To do: ignore strm->next_in if we use it as window */
; 207  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_deflateInit_@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflateSetHeader@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC				; COMDAT

; 392  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 393  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN3@deflateSet
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@deflateSet
$LN3@deflateSet:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@deflateSet
$LN2@deflateSet:

; 394  :     if (strm->state->wrap != 2) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 2
	je	SHORT $LN4@deflateSet
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@deflateSet
$LN4@deflateSet:

; 395  :     strm->state->gzhead = head;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _head$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 396  :     return Z_OK;

	xor	eax, eax
$LN1@deflateSet:

; 397  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_deflateSetHeader@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflatePrime@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC					; COMDAT

; 404  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 405  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN3@deflatePri
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@deflatePri
$LN3@deflatePri:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@deflatePri
$LN2@deflatePri:

; 406  :     strm->state->bi_valid = bits;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [ecx+5820], edx

; 407  :     strm->state->bi_buf = (ush)(value & ((1 << bits) - 1));

	mov	eax, 1
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	eax, cl
	sub	eax, 1
	and	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	WORD PTR [edx+5816], ax

; 408  :     return Z_OK;

	xor	eax, eax
$LN1@deflatePri:

; 409  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflateBound@8
_TEXT	SEGMENT
tv138 = -84						; size = 4
tv130 = -84						; size = 4
tv80 = -84						; size = 4
tv77 = -84						; size = 4
_str$ = -16						; size = 4
_wraplen$ = -12						; size = 4
_complen$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC					; COMDAT

; 489  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 490  :     deflate_state *s;
; 491  :     uLong complen, wraplen;
; 492  :     Bytef *str;
; 493  : 
; 494  :     /* conservative upper bound for compressed data */
; 495  :     complen = sourceLen +

	mov	eax, DWORD PTR _sourceLen$[ebp]
	add	eax, 7
	shr	eax, 3
	add	eax, DWORD PTR _sourceLen$[ebp]
	mov	ecx, DWORD PTR _sourceLen$[ebp]
	add	ecx, 63					; 0000003fH
	shr	ecx, 6
	lea	edx, DWORD PTR [eax+ecx+5]
	mov	DWORD PTR _complen$[ebp], edx

; 496  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;
; 497  : 
; 498  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 499  :     if (strm == Z_NULL || strm->state == Z_NULL)

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN11@deflateBou
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN10@deflateBou
$LN11@deflateBou:

; 500  :         return complen + 6;

	mov	eax, DWORD PTR _complen$[ebp]
	add	eax, 6
	jmp	$LN1@deflateBou
$LN10@deflateBou:

; 501  : 
; 502  :     /* compute wrapper length */
; 503  :     s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 504  :     switch (s->wrap) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv77[ebp], ecx
	cmp	DWORD PTR tv77[ebp], 0
	je	SHORT $LN12@deflateBou
	cmp	DWORD PTR tv77[ebp], 1
	je	SHORT $LN13@deflateBou
	cmp	DWORD PTR tv77[ebp], 2
	je	SHORT $LN14@deflateBou
	jmp	$LN20@deflateBou
$LN12@deflateBou:

; 505  :     case 0:                                 /* raw deflate */
; 506  :         wraplen = 0;

	mov	DWORD PTR _wraplen$[ebp], 0

; 507  :         break;

	jmp	$LN2@deflateBou
$LN13@deflateBou:

; 508  :     case 1:                                 /* zlib wrapper */
; 509  :         wraplen = 6 + (s->strstart ? 4 : 0);

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN24@deflateBou
	mov	DWORD PTR tv80[ebp], 4
	jmp	SHORT $LN25@deflateBou
$LN24@deflateBou:
	mov	DWORD PTR tv80[ebp], 0
$LN25@deflateBou:
	mov	ecx, DWORD PTR tv80[ebp]
	add	ecx, 6
	mov	DWORD PTR _wraplen$[ebp], ecx

; 510  :         break;

	jmp	$LN2@deflateBou
$LN14@deflateBou:

; 511  :     case 2:                                 /* gzip wrapper */
; 512  :         wraplen = 18;

	mov	DWORD PTR _wraplen$[ebp], 18		; 00000012H

; 513  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	$LN15@deflateBou

; 514  :             if (s->gzhead->extra != Z_NULL)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN16@deflateBou

; 515  :                 wraplen += 2 + s->gzhead->extra_len;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _wraplen$[ebp]
	lea	ecx, DWORD PTR [eax+edx+2]
	mov	DWORD PTR _wraplen$[ebp], ecx
$LN16@deflateBou:

; 516  :             str = s->gzhead->name;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _str$[ebp], edx

; 517  :             if (str != Z_NULL)

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN17@deflateBou
$LN6@deflateBou:

; 518  :                 do {
; 519  :                     wraplen++;

	mov	eax, DWORD PTR _wraplen$[ebp]
	add	eax, 1
	mov	DWORD PTR _wraplen$[ebp], eax

; 520  :                 } while (*str++);

	mov	eax, DWORD PTR _str$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv130[ebp], ecx
	mov	edx, DWORD PTR _str$[ebp]
	add	edx, 1
	mov	DWORD PTR _str$[ebp], edx
	cmp	DWORD PTR tv130[ebp], 0
	jne	SHORT $LN6@deflateBou
$LN17@deflateBou:

; 521  :             str = s->gzhead->comment;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _str$[ebp], edx

; 522  :             if (str != Z_NULL)

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN18@deflateBou
$LN9@deflateBou:

; 523  :                 do {
; 524  :                     wraplen++;

	mov	eax, DWORD PTR _wraplen$[ebp]
	add	eax, 1
	mov	DWORD PTR _wraplen$[ebp], eax

; 525  :                 } while (*str++);

	mov	eax, DWORD PTR _str$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv138[ebp], ecx
	mov	edx, DWORD PTR _str$[ebp]
	add	edx, 1
	mov	DWORD PTR _str$[ebp], edx
	cmp	DWORD PTR tv138[ebp], 0
	jne	SHORT $LN9@deflateBou
$LN18@deflateBou:

; 526  :             if (s->gzhead->hcrc)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN15@deflateBou

; 527  :                 wraplen += 2;

	mov	eax, DWORD PTR _wraplen$[ebp]
	add	eax, 2
	mov	DWORD PTR _wraplen$[ebp], eax
$LN15@deflateBou:

; 528  :         }
; 529  :         break;

	jmp	SHORT $LN2@deflateBou
$LN20@deflateBou:

; 530  :     default:                                /* for compiler happiness */
; 531  :         wraplen = 6;

	mov	DWORD PTR _wraplen$[ebp], 6
$LN2@deflateBou:

; 532  :     }
; 533  : 
; 534  :     /* if not default parameters, return conservative bound */
; 535  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+48], 15			; 0000000fH
	jne	SHORT $LN22@deflateBou
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+80], 15			; 0000000fH
	je	SHORT $LN21@deflateBou
$LN22@deflateBou:

; 536  :         return complen + wraplen;

	mov	eax, DWORD PTR _complen$[ebp]
	add	eax, DWORD PTR _wraplen$[ebp]
	jmp	SHORT $LN1@deflateBou
$LN21@deflateBou:

; 537  : 
; 538  :     /* default settings: return tight bound for that case */
; 539  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

	mov	eax, DWORD PTR _sourceLen$[ebp]
	shr	eax, 12					; 0000000cH
	add	eax, DWORD PTR _sourceLen$[ebp]
	mov	ecx, DWORD PTR _sourceLen$[ebp]
	shr	ecx, 14					; 0000000eH
	add	eax, ecx
	mov	edx, DWORD PTR _sourceLen$[ebp]
	shr	edx, 25					; 00000019H
	add	eax, DWORD PTR _wraplen$[ebp]
	lea	eax, DWORD PTR [edx+eax+7]
$LN1@deflateBou:

; 540  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 541  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_deflateBound@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflateTune@20
_TEXT	SEGMENT
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC					; COMDAT

; 457  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 458  :     deflate_state *s;
; 459  : 
; 460  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN3@deflateTun
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@deflateTun
$LN3@deflateTun:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@deflateTun
$LN2@deflateTun:

; 461  :     s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 462  :     s->good_match = good_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _good_length$[ebp]
	mov	DWORD PTR [eax+140], ecx

; 463  :     s->max_lazy_match = max_lazy;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _max_lazy$[ebp]
	mov	DWORD PTR [eax+128], ecx

; 464  :     s->nice_match = nice_length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _nice_length$[ebp]
	mov	DWORD PTR [eax+144], ecx

; 465  :     s->max_chain_length = max_chain;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _max_chain$[ebp]
	mov	DWORD PTR [eax+124], ecx

; 466  :     return Z_OK;

	xor	eax, eax
$LN1@deflateTun:

; 467  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflateParams@12
_TEXT	SEGMENT
_err$ = -12						; size = 4
_func$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC					; COMDAT

; 416  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 417  :     deflate_state *s;
; 418  :     compress_func func;
; 419  :     int err = Z_OK;

	mov	DWORD PTR _err$[ebp], 0

; 420  : 
; 421  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN3@deflatePar
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@deflatePar
$LN3@deflatePar:
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflatePar
$LN2@deflatePar:

; 422  :     s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 423  : 
; 424  : #ifdef FASTEST
; 425  :     if (level != 0) level = 1;
; 426  : #else
; 427  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

	cmp	DWORD PTR _level$[ebp], -1
	jne	SHORT $LN4@deflatePar
	mov	DWORD PTR _level$[ebp], 6
$LN4@deflatePar:

; 428  : #endif
; 429  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

	cmp	DWORD PTR _level$[ebp], 0
	jl	SHORT $LN6@deflatePar
	cmp	DWORD PTR _level$[ebp], 9
	jg	SHORT $LN6@deflatePar
	cmp	DWORD PTR _strategy$[ebp], 0
	jl	SHORT $LN6@deflatePar
	cmp	DWORD PTR _strategy$[ebp], 4
	jle	SHORT $LN5@deflatePar
$LN6@deflatePar:

; 430  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflatePar
$LN5@deflatePar:

; 431  :     }
; 432  :     func = configuration_table[s->level].func;

	mov	eax, DWORD PTR _s$[ebp]
	imul	ecx, DWORD PTR [eax+132], 12
	mov	edx, DWORD PTR _configuration_table[ecx+8]
	mov	DWORD PTR _func$[ebp], edx

; 433  : 
; 434  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strategy$[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jne	SHORT $LN8@deflatePar
	imul	eax, DWORD PTR _level$[ebp], 12
	mov	ecx, DWORD PTR _func$[ebp]
	cmp	ecx, DWORD PTR _configuration_table[eax+8]
	je	SHORT $LN7@deflatePar
$LN8@deflatePar:
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@deflatePar

; 435  :         strm->total_in != 0) {
; 436  :         /* Flush the last buffer: */
; 437  :         err = deflate(strm, Z_BLOCK);

	push	5
	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_deflate@8
	mov	DWORD PTR _err$[ebp], eax
$LN7@deflatePar:

; 438  :     }
; 439  :     if (s->level != level) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	cmp	ecx, DWORD PTR _level$[ebp]
	je	SHORT $LN9@deflatePar

; 440  :         s->level = level;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _level$[ebp]
	mov	DWORD PTR [eax+132], ecx

; 441  :         s->max_lazy_match   = configuration_table[level].max_lazy;

	imul	eax, DWORD PTR _level$[ebp], 12
	movzx	ecx, WORD PTR _configuration_table[eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+128], ecx

; 442  :         s->good_match       = configuration_table[level].good_length;

	imul	eax, DWORD PTR _level$[ebp], 12
	movzx	ecx, WORD PTR _configuration_table[eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+140], ecx

; 443  :         s->nice_match       = configuration_table[level].nice_length;

	imul	eax, DWORD PTR _level$[ebp], 12
	movzx	ecx, WORD PTR _configuration_table[eax+4]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+144], ecx

; 444  :         s->max_chain_length = configuration_table[level].max_chain;

	imul	eax, DWORD PTR _level$[ebp], 12
	movzx	ecx, WORD PTR _configuration_table[eax+6]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+124], ecx
$LN9@deflatePar:

; 445  :     }
; 446  :     s->strategy = strategy;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strategy$[ebp]
	mov	DWORD PTR [eax+136], ecx

; 447  :     return err;

	mov	eax, DWORD PTR _err$[ebp]
$LN1@deflatePar:

; 448  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflateParams@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflateReset@4
_TEXT	SEGMENT
tv131 = -72						; size = 4
tv87 = -72						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateReset@4 PROC					; COMDAT

; 355  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 356  :     deflate_state *s;
; 357  : 
; 358  :     if (strm == Z_NULL || strm->state == Z_NULL ||
; 359  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN3@deflateRes
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN3@deflateRes
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN3@deflateRes
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN2@deflateRes
$LN3@deflateRes:

; 360  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateRes
$LN2@deflateRes:

; 361  :     }
; 362  : 
; 363  :     strm->total_in = strm->total_out = 0;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 364  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], 0

; 365  :     strm->data_type = Z_UNKNOWN;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+44], 2

; 366  : 
; 367  :     s = (deflate_state *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 368  :     s->pending = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], 0

; 369  :     s->pending_out = s->pending_buf;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+16], edx

; 370  : 
; 371  :     if (s->wrap < 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jge	SHORT $LN4@deflateRes

; 372  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN4@deflateRes:

; 373  :     }
; 374  :     s->status = s->wrap ? INIT_STATE : BUSY_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN6@deflateRes
	mov	DWORD PTR tv87[ebp], 42			; 0000002aH
	jmp	SHORT $LN7@deflateRes
$LN6@deflateRes:
	mov	DWORD PTR tv87[ebp], 113		; 00000071H
$LN7@deflateRes:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR [ecx+4], edx

; 375  :     strm->adler =

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 2
	jne	SHORT $LN8@deflateRes
	push	0
	push	0
	push	0
	call	_crc32@12
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN9@deflateRes
$LN8@deflateRes:
	push	0
	push	0
	push	0
	call	_adler32@12
	mov	DWORD PTR tv131[ebp], eax
$LN9@deflateRes:
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR tv131[ebp]
	mov	DWORD PTR [ecx+48], edx

; 376  : #ifdef GZIP
; 377  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 378  : #endif
; 379  :         adler32(0L, Z_NULL, 0);
; 380  :     s->last_flush = Z_NO_FLUSH;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], 0

; 381  : 
; 382  :     _tr_init(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_init
	add	esp, 4

; 383  :     lm_init(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_lm_init
	add	esp, 4

; 384  : 
; 385  :     return Z_OK;

	xor	eax, eax
$LN1@deflateRes:

; 386  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_deflateReset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflateCopy@8
_TEXT	SEGMENT
_overlay$ = -12						; size = 4
_ss$ = -8						; size = 4
_ds$ = -4						; size = 4
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC					; COMDAT

; 933  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi

; 934  : #ifdef MAXSEG_64K
; 935  :     return Z_STREAM_ERROR;
; 936  : #else
; 937  :     deflate_state *ds;
; 938  :     deflate_state *ss;
; 939  :     ushf *overlay;
; 940  : 
; 941  : 
; 942  :     if (source == Z_NULL || dest == Z_NULL || source->state == Z_NULL) {

	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN3@deflateCop
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN3@deflateCop
	mov	eax, DWORD PTR _source$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@deflateCop
$LN3@deflateCop:

; 943  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateCop
$LN2@deflateCop:

; 944  :     }
; 945  : 
; 946  :     ss = source->state;

	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _ss$[ebp], ecx

; 947  : 
; 948  :     zmemcpy(dest, source, sizeof(z_stream));

	push	56					; 00000038H
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 949  : 
; 950  :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

	push	5828					; 000016c4H
	push	1
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ds$[ebp], eax

; 951  :     if (ds == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _ds$[ebp], 0
	jne	SHORT $LN4@deflateCop
	mov	eax, -4					; fffffffcH
	jmp	$LN1@deflateCop
$LN4@deflateCop:

; 952  :     dest->state = (struct internal_state FAR *) ds;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 953  :     zmemcpy(ds, ss, sizeof(deflate_state));

	push	5828					; 000016c4H
	mov	eax, DWORD PTR _ss$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 954  :     ds->strm = dest;

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [eax], ecx

; 955  : 
; 956  :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

	push	2
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 957  :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 958  :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

	push	2
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 959  :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

	push	4
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _overlay$[ebp], eax

; 960  :     ds->pending_buf = (uchf *) overlay;

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR _overlay$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 961  : 
; 962  :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||

	mov	eax, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN6@deflateCop
	mov	eax, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN6@deflateCop
	mov	eax, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN6@deflateCop
	mov	eax, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN5@deflateCop
$LN6@deflateCop:

; 963  :         ds->pending_buf == Z_NULL) {
; 964  :         deflateEnd (dest);

	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_deflateEnd@4

; 965  :         return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	$LN1@deflateCop
$LN5@deflateCop:

; 966  :     }
; 967  :     /* following zmemcpy do not work for 16-bit MSDOS */
; 968  :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 969  :     zmemcpy(ds->prev, ss->prev, ds->w_size * sizeof(Pos));

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 970  :     zmemcpy(ds->head, ss->head, ds->hash_size * sizeof(Pos));

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 971  :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 972  : 
; 973  :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

	mov	eax, DWORD PTR _ss$[ebp]
	mov	ecx, DWORD PTR _ss$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _ds$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 974  :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);

	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+5788]
	shr	ecx, 1
	mov	edx, DWORD PTR _overlay$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+5796], eax

; 975  :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

	mov	eax, DWORD PTR _ds$[ebp]
	imul	ecx, DWORD PTR [eax+5788], 3
	mov	edx, DWORD PTR _ds$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [eax+5784], ecx

; 976  : 
; 977  :     ds->l_desc.dyn_tree = ds->dyn_ltree;

	mov	eax, DWORD PTR _ds$[ebp]
	add	eax, 148				; 00000094H
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+2840], eax

; 978  :     ds->d_desc.dyn_tree = ds->dyn_dtree;

	mov	eax, DWORD PTR _ds$[ebp]
	add	eax, 2440				; 00000988H
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+2852], eax

; 979  :     ds->bl_desc.dyn_tree = ds->bl_tree;

	mov	eax, DWORD PTR _ds$[ebp]
	add	eax, 2684				; 00000a7cH
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	DWORD PTR [ecx+2864], eax

; 980  : 
; 981  :     return Z_OK;

	xor	eax, eax
$LN1@deflateCop:

; 982  : #endif /* MAXSEG_64K */
; 983  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_deflateCopy@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflateSetDictionary@12
_TEXT	SEGMENT
_hash_head$ = -16					; size = 4
_n$ = -12						; size = 4
_length$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC				; COMDAT

; 315  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi

; 316  :     deflate_state *s;
; 317  :     uInt length = dictLength;

	mov	eax, DWORD PTR _dictLength$[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 318  :     uInt n;
; 319  :     IPos hash_head = 0;

	mov	DWORD PTR _hash_head$[ebp], 0

; 320  : 
; 321  :     if (strm == Z_NULL || strm->state == Z_NULL || dictionary == Z_NULL ||
; 322  :         strm->state->wrap == 2 ||

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN6@deflateSet
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN6@deflateSet
	cmp	DWORD PTR _dictionary$[ebp], 0
	je	SHORT $LN6@deflateSet
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 2
	je	SHORT $LN6@deflateSet
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 1
	jne	SHORT $LN5@deflateSet
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+4], 42			; 0000002aH
	je	SHORT $LN5@deflateSet
$LN6@deflateSet:

; 323  :         (strm->state->wrap == 1 && strm->state->status != INIT_STATE))
; 324  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateSet
$LN5@deflateSet:

; 325  : 
; 326  :     s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 327  :     if (s->wrap)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN7@deflateSet

; 328  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

	mov	eax, DWORD PTR _dictLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dictionary$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_adler32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN7@deflateSet:

; 329  : 
; 330  :     if (length < MIN_MATCH) return Z_OK;

	cmp	DWORD PTR _length$[ebp], 3
	jae	SHORT $LN8@deflateSet
	xor	eax, eax
	jmp	$LN1@deflateSet
$LN8@deflateSet:

; 331  :     if (length > s->w_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jbe	SHORT $LN9@deflateSet

; 332  :         length = s->w_size;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _length$[ebp], ecx

; 333  :         dictionary += dictLength - length; /* use the tail of the dictionary */

	mov	eax, DWORD PTR _dictLength$[ebp]
	sub	eax, DWORD PTR _length$[ebp]
	add	eax, DWORD PTR _dictionary$[ebp]
	mov	DWORD PTR _dictionary$[ebp], eax
$LN9@deflateSet:

; 334  :     }
; 335  :     zmemcpy(s->window, dictionary, length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dictionary$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 336  :     s->strstart = length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+108], ecx

; 337  :     s->block_start = (long)length;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+92], ecx

; 338  : 
; 339  :     /* Insert all strings in the hash table (except for the last two bytes).
; 340  :      * s->lookahead stays null, so s->ins_h will be recomputed at the next
; 341  :      * call of fill_window.
; 342  :      */
; 343  :     s->ins_h = s->window[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+ecx]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 344  :     UPDATE_HASH(s, s->ins_h, s->window[1]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movzx	eax, BYTE PTR [ecx+eax]
	xor	edx, eax
	mov	ecx, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+72], edx

; 345  :     for (n = 0; n <= length - MIN_MATCH; n++) {

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN4@deflateSet
$LN2@deflateSet:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN4@deflateSet:
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 3
	cmp	DWORD PTR _n$[ebp], eax
	ja	SHORT $LN3@deflateSet

; 346  :         INSERT_STRING(s, n, hash_head);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR _n$[ebp]
	movzx	ecx, BYTE PTR [ecx+eax+2]
	xor	edx, ecx
	mov	eax, DWORD PTR _s$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _n$[ebp]
	and	esi, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [ecx+64]
	mov	dx, WORD PTR [edx+eax*2]
	mov	WORD PTR [ecx+esi*2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	and	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+64]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _hash_head$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	cx, WORD PTR _n$[ebp]
	mov	WORD PTR [edx+eax*2], cx

; 347  :     }

	jmp	$LN2@deflateSet
$LN3@deflateSet:

; 348  :     if (hash_head) hash_head = 0;  /* to make compiler happy */

	cmp	DWORD PTR _hash_head$[ebp], 0
	je	SHORT $LN10@deflateSet
	mov	DWORD PTR _hash_head$[ebp], 0
$LN10@deflateSet:

; 349  :     return Z_OK;

	xor	eax, eax
$LN1@deflateSet:

; 350  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflateEnd@4
_TEXT	SEGMENT
tv151 = -72						; size = 4
_status$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateEnd@4 PROC					; COMDAT

; 897  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 898  :     int status;
; 899  : 
; 900  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN3@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@deflateEnd
$LN3@deflateEnd:
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateEnd
$LN2@deflateEnd:

; 901  : 
; 902  :     status = strm->state->status;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _status$[ebp], edx

; 903  :     if (status != INIT_STATE &&
; 904  :         status != EXTRA_STATE &&
; 905  :         status != NAME_STATE &&
; 906  :         status != COMMENT_STATE &&
; 907  :         status != HCRC_STATE &&
; 908  :         status != BUSY_STATE &&

	cmp	DWORD PTR _status$[ebp], 42		; 0000002aH
	je	SHORT $LN4@deflateEnd
	cmp	DWORD PTR _status$[ebp], 69		; 00000045H
	je	SHORT $LN4@deflateEnd
	cmp	DWORD PTR _status$[ebp], 73		; 00000049H
	je	SHORT $LN4@deflateEnd
	cmp	DWORD PTR _status$[ebp], 91		; 0000005bH
	je	SHORT $LN4@deflateEnd
	cmp	DWORD PTR _status$[ebp], 103		; 00000067H
	je	SHORT $LN4@deflateEnd
	cmp	DWORD PTR _status$[ebp], 113		; 00000071H
	je	SHORT $LN4@deflateEnd
	cmp	DWORD PTR _status$[ebp], 666		; 0000029aH
	je	SHORT $LN4@deflateEnd

; 909  :         status != FINISH_STATE) {
; 910  :       return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflateEnd
$LN4@deflateEnd:

; 911  :     }
; 912  : 
; 913  :     /* Deallocate in reverse order of allocations: */
; 914  :     TRY_FREE(strm, strm->state->pending_buf);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN5@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN5@deflateEnd:

; 915  :     TRY_FREE(strm, strm->state->head);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN6@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN6@deflateEnd:

; 916  :     TRY_FREE(strm, strm->state->prev);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN7@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN7@deflateEnd:

; 917  :     TRY_FREE(strm, strm->state->window);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN8@deflateEnd
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN8@deflateEnd:

; 918  : 
; 919  :     ZFREE(strm, strm->state);

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8

; 920  :     strm->state = Z_NULL;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+28], 0

; 921  : 
; 922  :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

	cmp	DWORD PTR _status$[ebp], 113		; 00000071H
	jne	SHORT $LN10@deflateEnd
	mov	DWORD PTR tv151[ebp], -3		; fffffffdH
	jmp	SHORT $LN11@deflateEnd
$LN10@deflateEnd:
	mov	DWORD PTR tv151[ebp], 0
$LN11@deflateEnd:
	mov	eax, DWORD PTR tv151[ebp]
$LN1@deflateEnd:

; 923  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_deflateEnd@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File e:\git\mcferront\anttrap-engine\3rdparty\zlib\zlib-1.2.5\deflate.c
;	COMDAT _deflate@8
_TEXT	SEGMENT
tv242 = -124						; size = 4
tv237 = -120						; size = 4
tv232 = -116						; size = 4
tv684 = -112						; size = 4
tv305 = -112						; size = 4
tv227 = -112						; size = 4
tv202 = -112						; size = 4
tv830 = -108						; size = 4
tv685 = -108						; size = 4
tv306 = -108						; size = 4
tv223 = -108						; size = 4
tv203 = -108						; size = 4
_bstate$1 = -40						; size = 4
_val$2 = -36						; size = 4
_beg$3 = -32						; size = 4
_val$4 = -28						; size = 4
_beg$5 = -24						; size = 4
_beg$6 = -20						; size = 4
_level_flags$7 = -16					; size = 4
_header$8 = -12						; size = 4
_s$ = -8						; size = 4
_old_flush$ = -4					; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC						; COMDAT

; 585  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	ebx
	push	esi
	push	edi

; 586  :     int old_flush; /* value of flush param for previous deflate call */
; 587  :     deflate_state *s;
; 588  : 
; 589  :     if (strm == Z_NULL || strm->state == Z_NULL ||
; 590  :         flush > Z_BLOCK || flush < 0) {

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN11@deflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN11@deflate
	cmp	DWORD PTR _flush$[ebp], 5
	jg	SHORT $LN11@deflate
	cmp	DWORD PTR _flush$[ebp], 0
	jge	SHORT $LN10@deflate
$LN11@deflate:

; 591  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflate
$LN10@deflate:

; 592  :     }
; 593  :     s = strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s$[ebp], ecx

; 594  : 
; 595  :     if (strm->next_out == Z_NULL ||
; 596  :         (strm->next_in == Z_NULL && strm->avail_in != 0) ||

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN13@deflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN14@deflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN13@deflate
$LN14@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	jne	SHORT $LN12@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN12@deflate
$LN13@deflate:

; 597  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {
; 598  :         ERR_RETURN(strm, Z_STREAM_ERROR);

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _z_errmsg[eax]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, -2					; fffffffeH
	jmp	$LN1@deflate
$LN12@deflate:

; 599  :     }
; 600  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN15@deflate
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _z_errmsg[ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, -5					; fffffffbH
	jmp	$LN1@deflate
$LN15@deflate:

; 601  : 
; 602  :     s->strm = strm; /* just in case */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax], ecx

; 603  :     old_flush = s->last_flush;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _old_flush$[ebp], ecx

; 604  :     s->last_flush = flush;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _flush$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 605  : 
; 606  :     /* Write the header */
; 607  :     if (s->status == INIT_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 42			; 0000002aH
	jne	$LN16@deflate

; 608  : #ifdef GZIP
; 609  :         if (s->wrap == 2) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 2
	jne	$LN17@deflate

; 610  :             strm->adler = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 611  :             put_byte(s, 31);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 31			; 0000001fH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 612  :             put_byte(s, 139);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 139			; 0000008bH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 613  :             put_byte(s, 8);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 8
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 614  :             if (s->gzhead == Z_NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	$LN19@deflate

; 615  :                 put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 616  :                 put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 617  :                 put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 618  :                 put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 619  :                 put_byte(s, 0);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 620  :                 put_byte(s, s->level == 9 ? 2 :

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 9
	jne	SHORT $LN88@deflate
	mov	DWORD PTR tv203[ebp], 2
	jmp	SHORT $LN89@deflate
$LN88@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+136], 2
	jge	SHORT $LN86@deflate
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+132], 2
	jl	SHORT $LN86@deflate
	mov	DWORD PTR tv202[ebp], 0
	jmp	SHORT $LN87@deflate
$LN86@deflate:
	mov	DWORD PTR tv202[ebp], 4
$LN87@deflate:
	mov	eax, DWORD PTR tv202[ebp]
	mov	DWORD PTR tv203[ebp], eax
$LN89@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR tv203[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 621  :                             (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 622  :                              4 : 0));
; 623  :                 put_byte(s, OS_CODE);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+ecx], 11			; 0000000bH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 624  :                 s->status = BUSY_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 113			; 00000071H

; 625  :             }

	jmp	$LN20@deflate
$LN19@deflate:

; 626  :             else {
; 627  :                 put_byte(s, (s->gzhead->text ? 1 : 0) +

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN90@deflate
	mov	DWORD PTR tv223[ebp], 1
	jmp	SHORT $LN91@deflate
$LN90@deflate:
	mov	DWORD PTR tv223[ebp], 0
$LN91@deflate:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN92@deflate
	mov	DWORD PTR tv227[ebp], 2
	jmp	SHORT $LN93@deflate
$LN92@deflate:
	mov	DWORD PTR tv227[ebp], 0
$LN93@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN94@deflate
	mov	DWORD PTR tv232[ebp], 0
	jmp	SHORT $LN95@deflate
$LN94@deflate:
	mov	DWORD PTR tv232[ebp], 4
$LN95@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+28], 0
	jne	SHORT $LN96@deflate
	mov	DWORD PTR tv237[ebp], 0
	jmp	SHORT $LN97@deflate
$LN96@deflate:
	mov	DWORD PTR tv237[ebp], 8
$LN97@deflate:
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN98@deflate
	mov	DWORD PTR tv242[ebp], 0
	jmp	SHORT $LN99@deflate
$LN98@deflate:
	mov	DWORD PTR tv242[ebp], 16		; 00000010H
$LN99@deflate:
	mov	ecx, DWORD PTR tv223[ebp]
	add	ecx, DWORD PTR tv227[ebp]
	add	ecx, DWORD PTR tv232[ebp]
	add	ecx, DWORD PTR tv237[ebp]
	add	ecx, DWORD PTR tv242[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 628  :                             (s->gzhead->hcrc ? 2 : 0) +
; 629  :                             (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 630  :                             (s->gzhead->name == Z_NULL ? 0 : 8) +
; 631  :                             (s->gzhead->comment == Z_NULL ? 0 : 16)
; 632  :                         );
; 633  :                 put_byte(s, (Byte)(s->gzhead->time & 0xff));

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 634  :                 put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 635  :                 put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 636  :                 put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 637  :                 put_byte(s, s->level == 9 ? 2 :

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 9
	jne	SHORT $LN102@deflate
	mov	DWORD PTR tv306[ebp], 2
	jmp	SHORT $LN103@deflate
$LN102@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+136], 2
	jge	SHORT $LN100@deflate
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+132], 2
	jl	SHORT $LN100@deflate
	mov	DWORD PTR tv305[ebp], 0
	jmp	SHORT $LN101@deflate
$LN100@deflate:
	mov	DWORD PTR tv305[ebp], 4
$LN101@deflate:
	mov	eax, DWORD PTR tv305[ebp]
	mov	DWORD PTR tv306[ebp], eax
$LN103@deflate:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR tv306[ebp]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 638  :                             (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 639  :                              4 : 0));
; 640  :                 put_byte(s, s->gzhead->os & 0xff);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 641  :                 if (s->gzhead->extra != Z_NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN21@deflate

; 642  :                     put_byte(s, s->gzhead->extra_len & 0xff);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 643  :                     put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	BYTE PTR [eax+ecx], dl
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN21@deflate:

; 644  :                 }
; 645  :                 if (s->gzhead->hcrc)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN22@deflate

; 646  :                     strm->adler = crc32(strm->adler, s->pending_buf,

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN22@deflate:

; 647  :                                         s->pending);
; 648  :                 s->gzindex = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], 0

; 649  :                 s->status = EXTRA_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 69			; 00000045H
$LN20@deflate:

; 650  :             }
; 651  :         }

	jmp	$LN16@deflate
$LN17@deflate:

; 652  :         else
; 653  : #endif
; 654  :         {
; 655  :             uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 8
	shl	ecx, 4
	add	ecx, 8
	shl	ecx, 8
	mov	DWORD PTR _header$8[ebp], ecx

; 656  :             uInt level_flags;
; 657  : 
; 658  :             if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 2
	jge	SHORT $LN25@deflate
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 2
	jge	SHORT $LN23@deflate
$LN25@deflate:

; 659  :                 level_flags = 0;

	mov	DWORD PTR _level_flags$7[ebp], 0
	jmp	SHORT $LN24@deflate
$LN23@deflate:

; 660  :             else if (s->level < 6)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 6
	jge	SHORT $LN26@deflate

; 661  :                 level_flags = 1;

	mov	DWORD PTR _level_flags$7[ebp], 1
	jmp	SHORT $LN24@deflate
$LN26@deflate:

; 662  :             else if (s->level == 6)

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+132], 6
	jne	SHORT $LN28@deflate

; 663  :                 level_flags = 2;

	mov	DWORD PTR _level_flags$7[ebp], 2
	jmp	SHORT $LN24@deflate
$LN28@deflate:

; 664  :             else
; 665  :                 level_flags = 3;

	mov	DWORD PTR _level_flags$7[ebp], 3
$LN24@deflate:

; 666  :             header |= (level_flags << 6);

	mov	eax, DWORD PTR _level_flags$7[ebp]
	shl	eax, 6
	or	eax, DWORD PTR _header$8[ebp]
	mov	DWORD PTR _header$8[ebp], eax

; 667  :             if (s->strstart != 0) header |= PRESET_DICT;

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN30@deflate
	mov	eax, DWORD PTR _header$8[ebp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR _header$8[ebp], eax
$LN30@deflate:

; 668  :             header += 31 - (header % 31);

	mov	eax, DWORD PTR _header$8[ebp]
	xor	edx, edx
	mov	ecx, 31					; 0000001fH
	div	ecx
	mov	eax, 31					; 0000001fH
	sub	eax, edx
	add	eax, DWORD PTR _header$8[ebp]
	mov	DWORD PTR _header$8[ebp], eax

; 669  : 
; 670  :             s->status = BUSY_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 113			; 00000071H

; 671  :             putShortMSB(s, header);

	mov	eax, DWORD PTR _header$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_putShortMSB
	add	esp, 8

; 672  : 
; 673  :             /* Save the adler32 of the preset dictionary: */
; 674  :             if (s->strstart != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN31@deflate

; 675  :                 putShortMSB(s, (uInt)(strm->adler >> 16));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_putShortMSB
	add	esp, 8

; 676  :                 putShortMSB(s, (uInt)(strm->adler & 0xffff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, 65535				; 0000ffffH
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_putShortMSB
	add	esp, 8
$LN31@deflate:

; 677  :             }
; 678  :             strm->adler = adler32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_adler32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN16@deflate:

; 679  :         }
; 680  :     }
; 681  : #ifdef GZIP
; 682  :     if (s->status == EXTRA_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 69			; 00000045H
	jne	$LN32@deflate

; 683  :         if (s->gzhead->extra != Z_NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+16], 0
	je	$LN33@deflate

; 684  :             uInt beg = s->pending;  /* start of bytes to update crc */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$6[ebp], ecx
$LN2@deflate:

; 685  : 
; 686  :             while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 65535				; 0000ffffH
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+32], edx
	jae	$LN3@deflate

; 687  :                 if (s->pending == s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN35@deflate

; 688  :                     if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN36@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$6[ebp]
	jbe	SHORT $LN36@deflate

; 689  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN36@deflate:

; 690  :                                             s->pending - beg);
; 691  :                     flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 692  :                     beg = s->pending;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$6[ebp], ecx

; 693  :                     if (s->pending == s->pending_buf_size)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN35@deflate

; 694  :                         break;

	jmp	SHORT $LN3@deflate
$LN35@deflate:

; 695  :                 }
; 696  :                 put_byte(s, s->gzhead->extra[s->gzindex]);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	esi, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR [esi+8]
	mov	al, BYTE PTR [ecx+eax]
	mov	BYTE PTR [esi+edx], al
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], edx

; 697  :                 s->gzindex++;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 698  :             }

	jmp	$LN2@deflate
$LN3@deflate:

; 699  :             if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN38@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$6[ebp]
	jbe	SHORT $LN38@deflate

; 700  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN38@deflate:

; 701  :                                     s->pending - beg);
; 702  :             if (s->gzindex == s->gzhead->extra_len) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cmp	eax, DWORD PTR [ecx+20]
	jne	SHORT $LN39@deflate

; 703  :                 s->gzindex = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], 0

; 704  :                 s->status = NAME_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 73			; 00000049H
$LN39@deflate:

; 705  :             }
; 706  :         }

	jmp	SHORT $LN32@deflate
$LN33@deflate:

; 707  :         else
; 708  :             s->status = NAME_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 73			; 00000049H
$LN32@deflate:

; 709  :     }
; 710  :     if (s->status == NAME_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 73			; 00000049H
	jne	$LN40@deflate

; 711  :         if (s->gzhead->name != Z_NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+28], 0
	je	$LN41@deflate

; 712  :             uInt beg = s->pending;  /* start of bytes to update crc */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$5[ebp], ecx
$LN6@deflate:

; 713  :             int val;
; 714  : 
; 715  :             do {
; 716  :                 if (s->pending == s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN43@deflate

; 717  :                     if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN44@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$5[ebp]
	jbe	SHORT $LN44@deflate

; 718  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN44@deflate:

; 719  :                                             s->pending - beg);
; 720  :                     flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 721  :                     beg = s->pending;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$5[ebp], ecx

; 722  :                     if (s->pending == s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN43@deflate

; 723  :                         val = 1;

	mov	DWORD PTR _val$4[ebp], 1

; 724  :                         break;

	jmp	SHORT $LN5@deflate
$LN43@deflate:

; 725  :                     }
; 726  :                 }
; 727  :                 val = s->gzhead->name[s->gzindex++];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [ecx+28]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	DWORD PTR _val$4[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 728  :                 put_byte(s, val);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	dl, BYTE PTR _val$4[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 729  :             } while (val != 0);

	cmp	DWORD PTR _val$4[ebp], 0
	jne	$LN6@deflate
$LN5@deflate:

; 730  :             if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN46@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$5[ebp]
	jbe	SHORT $LN46@deflate

; 731  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN46@deflate:

; 732  :                                     s->pending - beg);
; 733  :             if (val == 0) {

	cmp	DWORD PTR _val$4[ebp], 0
	jne	SHORT $LN47@deflate

; 734  :                 s->gzindex = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], 0

; 735  :                 s->status = COMMENT_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 91			; 0000005bH
$LN47@deflate:

; 736  :             }
; 737  :         }

	jmp	SHORT $LN40@deflate
$LN41@deflate:

; 738  :         else
; 739  :             s->status = COMMENT_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 91			; 0000005bH
$LN40@deflate:

; 740  :     }
; 741  :     if (s->status == COMMENT_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 91			; 0000005bH
	jne	$LN48@deflate

; 742  :         if (s->gzhead->comment != Z_NULL) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN49@deflate

; 743  :             uInt beg = s->pending;  /* start of bytes to update crc */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$3[ebp], ecx
$LN9@deflate:

; 744  :             int val;
; 745  : 
; 746  :             do {
; 747  :                 if (s->pending == s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN51@deflate

; 748  :                     if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN52@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$3[ebp]
	jbe	SHORT $LN52@deflate

; 749  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN52@deflate:

; 750  :                                             s->pending - beg);
; 751  :                     flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 752  :                     beg = s->pending;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _beg$3[ebp], ecx

; 753  :                     if (s->pending == s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN51@deflate

; 754  :                         val = 1;

	mov	DWORD PTR _val$2[ebp], 1

; 755  :                         break;

	jmp	SHORT $LN8@deflate
$LN51@deflate:

; 756  :                     }
; 757  :                 }
; 758  :                 val = s->gzhead->comment[s->gzindex++];

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [ecx+36]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	DWORD PTR _val$2[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 759  :                 put_byte(s, val);

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	dl, BYTE PTR _val$2[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 760  :             } while (val != 0);

	cmp	DWORD PTR _val$2[ebp], 0
	jne	$LN9@deflate
$LN8@deflate:

; 761  :             if (s->gzhead->hcrc && s->pending > beg)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN54@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _beg$3[ebp]
	jbe	SHORT $LN54@deflate

; 762  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _beg$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _beg$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN54@deflate:

; 763  :                                     s->pending - beg);
; 764  :             if (val == 0)

	cmp	DWORD PTR _val$2[ebp], 0
	jne	SHORT $LN55@deflate

; 765  :                 s->status = HCRC_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 103			; 00000067H
$LN55@deflate:

; 766  :         }

	jmp	SHORT $LN48@deflate
$LN49@deflate:

; 767  :         else
; 768  :             s->status = HCRC_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 103			; 00000067H
$LN48@deflate:

; 769  :     }
; 770  :     if (s->status == HCRC_STATE) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 103			; 00000067H
	jne	$LN56@deflate

; 771  :         if (s->gzhead->hcrc) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+44], 0
	je	$LN57@deflate

; 772  :             if (s->pending + 2 > s->pending_buf_size)

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	jbe	SHORT $LN59@deflate

; 773  :                 flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4
$LN59@deflate:

; 774  :             if (s->pending + 2 <= s->pending_buf_size) {

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	ja	SHORT $LN60@deflate

; 775  :                 put_byte(s, (Byte)(strm->adler & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 776  :                 put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 777  :                 strm->adler = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 778  :                 s->status = BUSY_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 113			; 00000071H
$LN60@deflate:

; 779  :             }
; 780  :         }

	jmp	SHORT $LN56@deflate
$LN57@deflate:

; 781  :         else
; 782  :             s->status = BUSY_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 113			; 00000071H
$LN56@deflate:

; 783  :     }
; 784  : #endif
; 785  : 
; 786  :     /* Flush as much pending output as possible */
; 787  :     if (s->pending != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN61@deflate

; 788  :         flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 789  :         if (strm->avail_out == 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN63@deflate

; 790  :             /* Since avail_out is 0, deflate will be called again with
; 791  :              * more output space, but possibly with both pending and
; 792  :              * avail_in equal to zero. There won't be anything to do,
; 793  :              * but this is not an error situation so make sure we
; 794  :              * return OK instead of BUF_ERROR at next call of deflate:
; 795  :              */
; 796  :             s->last_flush = -1;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -1

; 797  :             return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN63@deflate:

; 798  :         }

	jmp	SHORT $LN62@deflate
$LN61@deflate:

; 799  : 
; 800  :     /* Make sure there is something to do and avoid duplicate consecutive
; 801  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 802  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 803  :      */
; 804  :     } else if (strm->avail_in == 0 && flush <= old_flush &&

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN62@deflate
	mov	eax, DWORD PTR _flush$[ebp]
	cmp	eax, DWORD PTR _old_flush$[ebp]
	jg	SHORT $LN62@deflate
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN62@deflate

; 805  :                flush != Z_FINISH) {
; 806  :         ERR_RETURN(strm, Z_BUF_ERROR);

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _z_errmsg[ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, -5					; fffffffbH
	jmp	$LN1@deflate
$LN62@deflate:

; 807  :     }
; 808  : 
; 809  :     /* User must not provide more input after the first FINISH: */
; 810  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	jne	SHORT $LN65@deflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN65@deflate

; 811  :         ERR_RETURN(strm, Z_BUF_ERROR);

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _z_errmsg[ecx]
	mov	DWORD PTR [edx+24], eax
	mov	eax, -5					; fffffffbH
	jmp	$LN1@deflate
$LN65@deflate:

; 812  :     }
; 813  : 
; 814  :     /* Start a new block or continue the current one.
; 815  :      */
; 816  :     if (strm->avail_in != 0 || s->lookahead != 0 ||

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN67@deflate
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN67@deflate
	cmp	DWORD PTR _flush$[ebp], 0
	je	$LN66@deflate
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 666			; 0000029aH
	je	$LN66@deflate
$LN67@deflate:

; 817  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
; 818  :         block_state bstate;
; 819  : 
; 820  :         bstate = s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 2
	jne	SHORT $LN106@deflate
	mov	ecx, DWORD PTR _flush$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_deflate_huff
	add	esp, 8
	mov	DWORD PTR tv685[ebp], eax
	jmp	SHORT $LN107@deflate
$LN106@deflate:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+136], 3
	jne	SHORT $LN104@deflate
	mov	ecx, DWORD PTR _flush$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_deflate_rle
	add	esp, 8
	mov	DWORD PTR tv684[ebp], eax
	jmp	SHORT $LN105@deflate
$LN104@deflate:
	mov	eax, DWORD PTR _flush$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	imul	eax, DWORD PTR [edx+132], 12
	mov	ecx, DWORD PTR _configuration_table[eax+8]
	call	ecx
	add	esp, 8
	mov	DWORD PTR tv684[ebp], eax
$LN105@deflate:
	mov	edx, DWORD PTR tv684[ebp]
	mov	DWORD PTR tv685[ebp], edx
$LN107@deflate:
	mov	eax, DWORD PTR tv685[ebp]
	mov	DWORD PTR _bstate$1[ebp], eax

; 821  :                     (s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 822  :                         (*(configuration_table[s->level].func))(s, flush));
; 823  : 
; 824  :         if (bstate == finish_started || bstate == finish_done) {

	cmp	DWORD PTR _bstate$1[ebp], 2
	je	SHORT $LN69@deflate
	cmp	DWORD PTR _bstate$1[ebp], 3
	jne	SHORT $LN68@deflate
$LN69@deflate:

; 825  :             s->status = FINISH_STATE;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], 666			; 0000029aH
$LN68@deflate:

; 826  :         }
; 827  :         if (bstate == need_more || bstate == finish_started) {

	cmp	DWORD PTR _bstate$1[ebp], 0
	je	SHORT $LN71@deflate
	cmp	DWORD PTR _bstate$1[ebp], 2
	jne	SHORT $LN70@deflate
$LN71@deflate:

; 828  :             if (strm->avail_out == 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN72@deflate

; 829  :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -1
$LN72@deflate:

; 830  :             }
; 831  :             return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN70@deflate:

; 832  :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 833  :              * of deflate should use the same flush parameter to make sure
; 834  :              * that the flush is complete. So we don't have to output an
; 835  :              * empty block here, this will be done at next call. This also
; 836  :              * ensures that for a very small output buffer, we emit at most
; 837  :              * one empty block.
; 838  :              */
; 839  :         }
; 840  :         if (bstate == block_done) {

	cmp	DWORD PTR _bstate$1[ebp], 1
	jne	$LN66@deflate

; 841  :             if (flush == Z_PARTIAL_FLUSH) {

	cmp	DWORD PTR _flush$[ebp], 1
	jne	SHORT $LN74@deflate

; 842  :                 _tr_align(s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_align
	add	esp, 4
	jmp	SHORT $LN75@deflate
$LN74@deflate:

; 843  :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

	cmp	DWORD PTR _flush$[ebp], 5
	je	SHORT $LN75@deflate

; 844  :                 _tr_stored_block(s, (char*)0, 0L, 0);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	__tr_stored_block
	add	esp, 16					; 00000010H

; 845  :                 /* For a full flush, this empty block will be recognized
; 846  :                  * as a special marker by inflate_sync().
; 847  :                  */
; 848  :                 if (flush == Z_FULL_FLUSH) {

	cmp	DWORD PTR _flush$[ebp], 3
	jne	SHORT $LN75@deflate

; 849  :                     CLEAR_HASH(s);             /* forget history */

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+68]
	xor	edx, edx
	mov	WORD PTR [eax+ecx*2-2], dx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	lea	edx, DWORD PTR [ecx+ecx-2]
	push	edx
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 850  :                     if (s->lookahead == 0) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN75@deflate

; 851  :                         s->strstart = 0;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+108], 0

; 852  :                         s->block_start = 0L;

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+92], 0
$LN75@deflate:

; 853  :                     }
; 854  :                 }
; 855  :             }
; 856  :             flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 857  :             if (strm->avail_out == 0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN66@deflate

; 858  :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */

	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+40], -1

; 859  :               return Z_OK;

	xor	eax, eax
	jmp	$LN1@deflate
$LN66@deflate:

; 860  :             }
; 861  :         }
; 862  :     }
; 863  :     Assert(strm->avail_out > 0, "bug2");
; 864  : 
; 865  :     if (flush != Z_FINISH) return Z_OK;

	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN80@deflate
	xor	eax, eax
	jmp	$LN1@deflate
$LN80@deflate:

; 866  :     if (s->wrap <= 0) return Z_STREAM_END;

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jg	SHORT $LN81@deflate
	mov	eax, 1
	jmp	$LN1@deflate
$LN81@deflate:

; 867  : 
; 868  :     /* Write the trailer */
; 869  : #ifdef GZIP
; 870  :     if (s->wrap == 2) {

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 2
	jne	$LN82@deflate

; 871  :         put_byte(s, (Byte)(strm->adler & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 872  :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 873  :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 874  :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 875  :         put_byte(s, (Byte)(strm->total_in & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 876  :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 877  :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 878  :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	BYTE PTR [edx+eax], cl
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 879  :     }

	jmp	SHORT $LN83@deflate
$LN82@deflate:

; 880  :     else
; 881  : #endif
; 882  :     {
; 883  :         putShortMSB(s, (uInt)(strm->adler >> 16));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shr	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_putShortMSB
	add	esp, 8

; 884  :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, 65535				; 0000ffffH
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_putShortMSB
	add	esp, 8
$LN83@deflate:

; 885  :     }
; 886  :     flush_pending(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_flush_pending
	add	esp, 4

; 887  :     /* If avail_out is zero, the application will call deflate again
; 888  :      * to flush the rest.
; 889  :      */
; 890  :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jle	SHORT $LN84@deflate
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	neg	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN84@deflate:

; 891  :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN108@deflate
	mov	DWORD PTR tv830[ebp], 0
	jmp	SHORT $LN109@deflate
$LN108@deflate:
	mov	DWORD PTR tv830[ebp], 1
$LN109@deflate:
	mov	eax, DWORD PTR tv830[ebp]
$LN1@deflate:

; 892  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_deflate@8 ENDP
_TEXT	ENDS
END
